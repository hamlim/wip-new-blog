<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Matt Hamlin's Blog</title>
        <link>https://matthamlin.me</link>
        <description>Matt Hamlin's Blog</description>
        <lastBuildDate>Fri, 18 Jul 2025 20:15:47 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Matt by Hand</generator>
        <language>en</language>
        <image>
            <title>Matt Hamlin's Blog</title>
            <url>https://matthamlin.me/me.png</url>
            <link>https://matthamlin.me</link>
        </image>
        <copyright>¬© 2025 Matt Hamlin</copyright>
        <item>
            <title><![CDATA[31]]></title>
            <link>https://matthamlin.me//2025/july/31</link>
            <guid>https://matthamlin.me//2025/july/31</guid>
            <pubDate>Fri, 18 Jul 2025 20:03:56 GMT</pubDate>
            <description><![CDATA[A quick recap of my goals from the past year and a few goals looking forward as well.]]></description>
            <content:encoded><![CDATA[<link rel="preload" as="image" href="/images/31/weight-per-day-light.png"/><link rel="preload" as="image" href="/images/31/steps-per-day-light.png"/><p>Yet another year has passed since <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/july/30">my last birthday post</a>, and as always the year seemed to fly by incredibly quickly!</p>
<p>In the past year I&#x27;ve:</p>
<ul>
<li>Changed jobs (<em>yes, again</em>, from Fireworks to HubSpot)</li>
<li>Published a few new blog posts ‚úçÔ∏è</li>
<li>Got engaged! üíç</li>
<li><a href="https://bikeshedpod.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">launched a podcast with my friends</a> üéôÔ∏è</li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2025/may/website-redesign-v10">redesigned / rewrote my personal website</a></li>
</ul>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="recap">Recap:</h2>
<p>As usual, I want to revisit the goals that I set for myself in my previous birthday post:</p>
<ul>
<li>Get serious about my health</li>
<li>Build more</li>
<li>[REDACTED]</li>
</ul>
<p>I think this year was a bit of a mixed bag in terms of my goals, lets dig in!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="get-serious-about-my-health-">Get serious about my health ü´§</h3>
<p>Without looking at the data yet (which I&#x27;ll get to below), I feel like I regressed a bit here rather than getting healthier. It&#x27;s been something that I&#x27;ve been thinking about more actively for the past month or so - and I hope I can keep up that mindset.</p>
<img src="/images/31/weight-per-day-light.png" alt="A line graph plotting my weight on the y axis and days on the x axis, showing a slightly downward trend starting around January of 2025"/>
<img src="/images/31/steps-per-day-light.png" alt="A line graph plotting my steps per day, with my total steps on the y axis and days on the x axis, showing a lot of variability, but with a slight upward trend nearing the end of the graph"/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="build-more-">Build more ü´§</h3>
<p>Although I roughly had ~2200 GitHub contributions over the past year, I feel like I dropped off around the holidays and then tried to pick it back up since the spring of this year.</p>
<p>Increasingly I&#x27;m finding it difficult to get motivation to work on side projects, I think part of that is that before I was working closely to some of the things I want to do as side projects, but now my work is a bit different from some of my side projects.</p>
<p>Additionally with AI and the advent of <button data-state="closed" data-slot="tooltip-trigger"><abbr title="Agentic Development Environments">ADE&#x27;s</abbr></button> like Claude Code or Cursor, <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2025/january/the-ai-development-conundrum">I&#x27;ve lost a bit of interest in writing code outside of work</a>.</p>
<p>I had the goal of launching 2 projects this year, but I unfortunately didn&#x27;t do that this year.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="redacted">[REDACTED]</h3>
<p>If you couldn&#x27;t tell, this goal was to ask Katie to marry me - and she said yes!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="goals">Goals:</h2>
<p>Looking forward for the next year I want to tackle the following:</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="health">Health</h3>
<p>While this has been a recurring goal for the past <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/july/30">two</a> <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/july/29">years</a>, one key aspect I want to get better at is monitoring the food I eat on top of my steps and weight. At the moment I&#x27;m using <a href="https://apps.apple.com/us/app/calorie-counter-cronometer/id1145935738" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Cronometer</a> to track my food - the problem I think I&#x27;ll eventually run into is how to track food from restaurants or on the go.</p>
<p>I may look at building something for this since I&#x27;m not a huge fan of the various ads within the app at the moment and I&#x27;m not sure I want to pay monthly for it either.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="read-more">Read more</h3>
<p>Over the past year or so I&#x27;ve been reading a lot more books than I had in previous years, I&#x27;m hoping that I can continue reading often. I don&#x27;t really have any data backing it up at the moment but I think that I&#x27;ve picked up my reading pace as well.</p>
<p>This past year I have read approximately 15 books I think - check my <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/bookshelf">bookshelf</a> to see what they were!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="write-more">Write more</h3>
<p>I have a backlog of 56 blog post ideas in my vault at the moment, while I don&#x27;t want to set any specific goal on the number of posts I do generally want to write more posts, and hopefully burn down that list a bit more!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/31.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Link: How I build software quickly]]></title>
            <link>https://matthamlin.me//2025/july/link-how-i-build-software-quickly</link>
            <guid>https://matthamlin.me//2025/july/link-how-i-build-software-quickly</guid>
            <pubDate>Mon, 14 Jul 2025 11:17:22 GMT</pubDate>
            <description><![CDATA[Status Update: July 14, 2025]]></description>
            <content:encoded><![CDATA[<p>I recently stumbled upon <a href="https://evanhahn.com/how-i-build-software-quickly/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this blog post titled &quot;How I build software quickly&quot;</a> from <button data-state="closed" data-slot="tooltip-trigger"><abbr title="HackerNews">the orange site</abbr></button>.</p>
<p>I highly recommend giving the whole post a read, but these two points really stood out to me:</p>
<blockquote>
<p><strong>Build ‚Äútop to bottom‚Äù.</strong> For example, in an application, I prefer to scaffold the UI before the business logic, even if lots of stuff is hard-coded. I‚Äôve sometimes written business logic <em>first</em>, which I later discarded once the UI came into play, because I miscalculated how it would be used. Build the top layer first‚Äîthe ‚Äúdream code‚Äù I want to write or the API I wish existed‚Äîrather than trying to build the ‚Äúbottom‚Äù layer first. It‚Äôs easier to make the right API decisions when I start with how it will be used. It can also be easier to gather feedback on.</p>
<p><strong>Extract smaller changes while working.</strong> Sometimes, during a rough draft, I realize that some improvement needs to be made elsewhere in the code. Maybe there‚Äôs a dependency that needs updating. Before finishing the final draft, make a separate patch to just update that dependency. This is useful on its own <em>and</em> will benefit the upcoming change. I can push it for code review separately, and hopefully, it‚Äôll be merged by the time I finish my final draft.</p>
</blockquote>
<p>The first point aligns well with my <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2025/february/youre-building-software-wrong">&quot;vertical slice&quot; methodology</a>, and the second is something I&#x27;ve been trying to improve upon in my own development process over the past year or so!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/link-how-i-build-software-quickly.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Vacation (and streaks)]]></title>
            <link>https://matthamlin.me//2025/july/vacation-and-streaks</link>
            <guid>https://matthamlin.me//2025/july/vacation-and-streaks</guid>
            <pubDate>Mon, 07 Jul 2025 14:28:06 GMT</pubDate>
            <description><![CDATA[Status Update: July 7, 2025]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve been on vacation the past week and we still have another week of the trip remaining as well. It&#x27;s been a great trip so far - I&#x27;ll have to do a longer write up of the whole thing<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>At the same time I&#x27;ve been attempting to get a GitHub contribution every day for the rest of the year - now I know that this sounds silly, the little green squares on my profile aren&#x27;t real indicators of anything - however it feels nice building on a long term habit of working on things on the side.</p>
<p>Unfortunately, I didn&#x27;t get a contribution in yesterday (July 6th), which I think is the first missed day after about a 119 days of contributions! However it&#x27;s not the end of the world to miss a single day, I&#x27;ll just have to start a new streak starting today!</p>
<hr/>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="footnotes">Footnotes:</h2>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Although thats what I say about every trip for the past few years and I still haven&#x27;t written up any posts about them either! But this one will be different!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/vacation-and-streaks.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Multi-step Native HTML Forms]]></title>
            <link>https://matthamlin.me//2025/july/multi-step-native-html-forms</link>
            <guid>https://matthamlin.me//2025/july/multi-step-native-html-forms</guid>
            <pubDate>Tue, 01 Jul 2025 17:09:34 GMT</pubDate>
            <content:encoded><![CDATA[<p>If you have a multi-step form and you want to allow the user to go back a step <em>without writing client side JS to manage the current step</em>, you can use another <code>type=&quot;submit&quot;</code> button with a special <code>name</code>, <code>value</code>, and importantly <code>formNoValidate</code> attributes:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  type</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">submit</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;font-style:italic;--shiki-dark:#666666;--shiki-dark-font-style:italic">  //</span><span style="color:#B07D48;--shiki-dark:#BD976A"> this</span><span style="color:#B07D48;--shiki-dark:#BD976A"> can</span><span style="color:#B07D48;--shiki-dark:#BD976A"> be</span><span style="color:#B07D48;--shiki-dark:#BD976A"> any</span><span style="color:#B07D48;--shiki-dark:#BD976A"> value</span><span style="color:#B07D48;--shiki-dark:#BD976A"> you</span><span style="color:#B07D48;--shiki-dark:#BD976A"> want</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  name</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">back</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;font-style:italic;--shiki-dark:#666666;--shiki-dark-font-style:italic">  //</span><span style="color:#B07D48;--shiki-dark:#BD976A"> again</span><span style="color:#B07D48;--shiki-dark:#BD976A"> can</span><span style="color:#B07D48;--shiki-dark:#BD976A"> be</span><span style="color:#B07D48;--shiki-dark:#BD976A"> any</span><span style="color:#B07D48;--shiki-dark:#BD976A"> value</span><span style="color:#B07D48;--shiki-dark:#BD976A"> you</span><span style="color:#B07D48;--shiki-dark:#BD976A"> want</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  value</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">true</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;font-style:italic;--shiki-dark:#666666;--shiki-dark-font-style:italic">  //</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ‚ú®‚ú®‚ú®</span></span>
<span class="line"><span style="color:#999999;font-style:italic;--shiki-dark:#666666;--shiki-dark-font-style:italic">  //</span><span style="color:#B07D48;--shiki-dark:#BD976A"> allow</span><span style="color:#B07D48;--shiki-dark:#BD976A"> form</span><span style="color:#B07D48;--shiki-dark:#BD976A"> submissions</span><span style="color:#B07D48;--shiki-dark:#BD976A"> even</span><span style="color:#B07D48;--shiki-dark:#BD976A"> if</span><span style="color:#B07D48;--shiki-dark:#BD976A"> there</span><span style="color:#B07D48;--shiki-dark:#BD976A"> are</span><span style="color:#B07D48;--shiki-dark:#BD976A"> required</span><span style="color:#B07D48;--shiki-dark:#BD976A"> form</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fields</span></span>
<span class="line"><span style="color:#999999;font-style:italic;--shiki-dark:#666666;--shiki-dark-font-style:italic">  //</span><span style="color:#B07D48;--shiki-dark:#BD976A"> not</span><span style="color:#B07D48;--shiki-dark:#BD976A"> currently</span><span style="color:#B07D48;--shiki-dark:#BD976A"> filled</span><span style="color:#B07D48;--shiki-dark:#BD976A"> in</span></span>
<span class="line"><span style="color:#999999;font-style:italic;--shiki-dark:#666666;--shiki-dark-font-style:italic">  //</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ‚ú®‚ú®‚ú®</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  formNoValidate</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  Go Back</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span></code></pre>
<p>This tip works with plain old HTML forms, and can also work with React forms (server actions/functions, server components, etc)!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/multi-step-native-html-forms.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Git Co-Authorship]]></title>
            <link>https://matthamlin.me//2025/june/git-co-authorship</link>
            <guid>https://matthamlin.me//2025/june/git-co-authorship</guid>
            <pubDate>Tue, 01 Jul 2025 04:19:33 GMT</pubDate>
            <content:encoded><![CDATA[<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">Co-authored-by:</span><span style="color:#B56959;--shiki-dark:#C98A7D"> NAME</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &lt;</span><span style="color:#B56959;--shiki-dark:#C98A7D">NAME@EXAMPLE.CO</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">M</span><span style="color:#AB5959;--shiki-dark:#CB7676">&gt;</span></span></code></pre>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/git-co-authorship.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[useInterval]]></title>
            <link>https://matthamlin.me//2025/june/use-interval</link>
            <guid>https://matthamlin.me//2025/june/use-interval</guid>
            <pubDate>Sun, 29 Jun 2025 14:09:26 GMT</pubDate>
            <content:encoded><![CDATA[<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> useState</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> useEffect</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> useRef</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> </span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> useInterval</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">callback</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> delay</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> savedCallback</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useRef</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> </span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Remember the latest callback.</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    savedCallback</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">current</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> callback</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">callback</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> </span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Set up the interval.</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    function</span><span style="color:#59873A;--shiki-dark:#80A665"> tick</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      savedCallback</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">current</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">delay</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !==</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">      let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> id</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> setInterval</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">tick</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> delay</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#59873A;--shiki-dark:#80A665"> clearInterval</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">id</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">delay</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p><em>Originally sourced from <a href="https://overreacted.io/making-setinterval-declarative-with-react-hooks/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Dan Abramov&#x27;s blog</a></em></p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/use-interval.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Polish is Important]]></title>
            <link>https://matthamlin.me//2025/june/polish-is-important</link>
            <guid>https://matthamlin.me//2025/june/polish-is-important</guid>
            <pubDate>Fri, 27 Jun 2025 12:47:10 GMT</pubDate>
            <description><![CDATA[Status Update: June 27, 2025]]></description>
            <content:encoded><![CDATA[<p>I think a key difference that distinguishes between good software and great software is polish. Often that polish can take the form of things that seem invisible to the user yet still make the user experience orders of magnitude better.</p>
<p>Polish in software development can take the form of almost anything, it can mean;</p>
<ul>
<li>choosing the 90% correct default for an option automatically</li>
<li>providing a <mark class="flexible-marker flexible-marker-default">blazingly fast</mark> experience</li>
<li>reducing the amount of steps to complete an action</li>
</ul>
<p>generally most of this boils down to <em>anticipating the user&#x27;s needs and solving for them quickly</em>.</p>
<p>Some common examples that I often want/reach for include:</p>
<ul>
<li>offering comprehensive <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2022/may/upgrade-guides">upgrade guides</a> in addition to changelogs</li>
<li>prefetching high intent links/actions within a website</li>
<li>providing off ramps when introducing potentially undesired changes (e.g. allowing for <a href="https://newsletter.squishy.computer/p/credible-exit" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">credible exit</a>, or supporting previous versions of APIs)</li>
</ul>
<p>In the same vein as polish being the difference between good and great software, investing effort into polish can be a difference between good and great software engineers.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/polish-is-important.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[<Blank> Driven Development]]></title>
            <link>https://matthamlin.me//2025/june/blank-driven-development</link>
            <guid>https://matthamlin.me//2025/june/blank-driven-development</guid>
            <pubDate>Mon, 23 Jun 2025 15:02:50 GMT</pubDate>
            <description><![CDATA[Status Update: June 23, 2025]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve been collecting a personal note of various <strong>&quot;____ Driven Development&quot;</strong> patterns, I figured I&#x27;d share them here to help others adopt them!</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>Hint - I don&#x27;t actually strongly recommend some of these patterns ü§£</p></div>
<ul>
<li>Domain (name) Driven Development<!-- -->
<ul>
<li>Buying a domain name to motivate you to actually build something</li>
<li>Rarely ever works</li>
</ul>
</li>
<li>Meme Driven Development<!-- -->
<ul>
<li>&quot;Building it for the meme&quot;</li>
</ul>
</li>
<li>Readme Driven Development<!-- -->
<ul>
<li>Outlining how the thing should work in the readme, and then implementing it from there</li>
<li>May actually work really well</li>
</ul>
</li>
<li>CI Driven Development<!-- -->
<ul>
<li>Slinging code changes to remote to see if the CI passes or fails</li>
<li>It usually fails at least couple of times, don&#x27;t worry about trying to find the root issue locally, just keep pushing changes!</li>
</ul>
</li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/blank-driven-development.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[All Documentation Should Be Dated]]></title>
            <link>https://matthamlin.me//2025/june/all-documentation-should-be-dated</link>
            <guid>https://matthamlin.me//2025/june/all-documentation-should-be-dated</guid>
            <pubDate>Fri, 20 Jun 2025 12:26:31 GMT</pubDate>
            <description><![CDATA[Status Update: June 20, 2025]]></description>
            <content:encoded><![CDATA[<p>The title basically says it all - if you manage docs (specifically a documentation website), your docs should show the date and time of when the docs were created and last updated.</p>
<p>I&#x27;m sure most of us have been looking at some docs for a library or feature and then find out later through experimentation or when talking with coworkers that those docs are at least 6+ months out of date.</p>
<p>Add a quick timestamp at the top of the page showing when the docs were created (and also add one for when the docs were last updated)!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/all-documentation-should-be-dated.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Adding Microposts]]></title>
            <link>https://matthamlin.me//2025/june/adding-microposts</link>
            <guid>https://matthamlin.me//2025/june/adding-microposts</guid>
            <pubDate>Fri, 20 Jun 2025 00:35:56 GMT</pubDate>
            <description><![CDATA[Status Update: June 19, 2025]]></description>
            <content:encoded><![CDATA[<p>I&#x27;m working on adding short-form (microblog-like) status updates (<code>microposts</code>) to my personal website.</p>
<p>It&#x27;s not fully flushed (or fleshed?) out yet, so this may change in the near future!</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>I may not use these updates as much - but it seems like a nice low-friction way to share quick thoughts.</p><p>Next step is to build a mini web app to easily post them though!</p></div>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/adding-microposts.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Roundup Notes in Obsidian with Dataview]]></title>
            <link>https://matthamlin.me//2025/june/roundup-notes-in-obsidian-with-dataview</link>
            <guid>https://matthamlin.me//2025/june/roundup-notes-in-obsidian-with-dataview</guid>
            <pubDate>Mon, 16 Jun 2025 23:12:32 GMT</pubDate>
            <description><![CDATA[A quick tip for creating roundup or summary notes based on other notes in Obsidian using the Dataview plugin!]]></description>
            <content:encoded><![CDATA[<p>For a while now I&#x27;ve been tweaking my <a href="https://obsidian.md/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Obsidian</a> setup and leaning more and more into using the <a href="https://blacksmithgu.github.io/obsidian-dataview/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Dataview plugin</a> to create dynamic sections or notes within my vault.</p>
<p>Recently I&#x27;ve been re-using mostly the same snippet over and over to create quick access summary or roundup notes within my vault and I figured I&#x27;d share it for others to use if they find it useful!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="requirements">Requirements:</h3>
<p>This setup only requires the <a href="https://blacksmithgu.github.io/obsidian-dataview/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Dataview plugin</a>.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="implementation">Implementation:</h3>
<p>The snippet that I&#x27;ve continued to re-use has been the following:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">```</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">dataviewjs</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> pages</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> dv</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">pages</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">&lt;query&gt;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Optional - this reverses the order of notes</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// sorting from most recent to oldest based on file created time</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// but this can be replaced with other logic to sort based</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// on properties or other aspects of the pages!</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> sortedPages</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> pages</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">values</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">toSorted</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">a</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> b</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> a</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">file</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">ctime</span><span style="color:#999999;--shiki-dark:#666666"> &gt;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> b</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">file</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">ctime</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ?</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#AB5959;--shiki-dark:#CB7676"> :</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// &quot;rendering&quot; logic of the snippet</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// renders effectively a list of links and embeds for each page</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> page</span><span style="color:#AB5959;--shiki-dark:#CB7676"> of</span><span style="color:#B07D48;--shiki-dark:#BD976A"> sortedPages</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  dv</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">paragraph</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">[[</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">page</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">file</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">path</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">]]</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  dv</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">paragraph</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">![[</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">page</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">file</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">path</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">]]</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">```</span></span></code></pre>
<p>The <code>&lt;query&gt;</code> can be replaced with effectively anything that you want to match on - it can be file paths/folders or tags (e.g. <code>#meeting</code>). See the <a href="https://blacksmithgu.github.io/obsidian-dataview/api/code-reference/#dvpagessource" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>dv.pages(source)</code> docs</a> for more details.</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>You can swap <code>dv.pages()</code> out for <code>await dv.query()</code> for a bit more control over the content that you query for, however the resulting value will be a different shape - so the sorting and rendering logic may need to change!</p></div>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="examples">Examples:</h3>
<p>In practice, I&#x27;ve used this for a few different use cases:</p>
<ul>
<li>A single note to see recurring 1-on-1 meeting notes with a specific individual<!-- -->
<ul>
<li>I&#x27;ve found this to be easier to scan for the previous iteration of the 1-on-1 and see if there are any topics I need to follow up on</li>
</ul>
</li>
<li>A roundup note for <code>#self-reflection</code> notes<!-- -->
<ul>
<li>Every so often I take some zettel-like notes adding some top of mind reflections on how I&#x27;ve been doing / how productive I&#x27;ve been / etc - so now I have a single roundup of those notes that I can scan through and come away with any deeper insights</li>
</ul>
</li>
<li>Daily note collection of Zettel-like notes<!-- -->
<ul>
<li>I now mostly take notes within &quot;zettel-like&quot; nodes (titled with a timestamp), so to connect them back to my daily notes I have used this pattern to render them all in order making it easier to see them all for a single day in one place</li>
</ul>
</li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/roundup-notes-in-obsidian-with-dataview.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Quick Tip - Theme Aware Images]]></title>
            <link>https://matthamlin.me//2025/june/quick-tip-theme-aware-images</link>
            <guid>https://matthamlin.me//2025/june/quick-tip-theme-aware-images</guid>
            <pubDate>Mon, 16 Jun 2025 22:51:35 GMT</pubDate>
            <description><![CDATA[Have you ever found the need to change the image you render on a web page based on the current preferred color scheme of your theme?]]></description>
            <content:encoded><![CDATA[<p>The other day <a href="https://bsky.app/profile/danabra.mov" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Dan Abramov</a> <a href="https://bsky.app/profile/danabra.mov/post/3lqe3az4u3k2e" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">posted</a> asking how folks have handled showing visual graphics from tools like TLDraw / Excalidraw on a webpage that uses a light and a dark theme, to which <a href="https://bsky.app/profile/matthamlin.me/post/3lqe3rn57f222" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">I replied with a quick tip</a> that I have used in the past (albeit it&#x27;s been a while since I&#x27;ve utilized this trick). I figured I&#x27;d expand a bit more on the trick here in a short blog post!</p>
<p>I&#x27;ve written a similar blog post about <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/march/custom-favicon-recipes">selecting custom favicons based on media queries</a>, this trick works in effectively the same way but for inline images!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="the-trick">&quot;The Trick&quot;</h3>
<p>The trick is to use the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/picture" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>&lt;picture&gt;</code></a> HTML element, and to use two <code>&lt;source&gt;</code>&#x27;s, one for the light theme image and the other for the dark theme image.</p>
<p>Example:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">picture</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">source</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    srcset</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">/dark-theme-image.png</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    media</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">(prefers-color-scheme: dark)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">source</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    srcset</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">/light-theme-image.png</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    media</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">(prefers-color-scheme: light)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">img</span><span style="color:#B07D48;--shiki-dark:#BD976A"> src</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">/fallback-asset.png</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> alt</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B31D28;font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic">&lt;</span><span style="color:#B56959;--shiki-dark:#C98A7D">descriptive-text-here&gt;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">picture</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span></code></pre>
<p>This will then use the media query on each <code>&lt;source&gt;</code> to render the correct image based on the <code>prefers-color-scheme</code> media query. So if the user prefers a dark color scheme then it will render the first source, otherwise it will render the second source. The final <code>&lt;img /&gt;</code> element is used as a fallback if the browser doesn&#x27;t support the <code>&lt;picture&gt;</code> element.</p>
<p>The <code>&lt;picture&gt;</code> element is pretty powerful - you can use any kind of media query within the <code>media</code> attribute, and the browser will pick the first one that matches in the list (almost like a <code>&lt;Switch /&gt;</code> component).</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/quick-tip-theme-aware-images.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Async Class Creation In JavaScript]]></title>
            <link>https://matthamlin.me//2025/june/async-class-creation-in-javascript</link>
            <guid>https://matthamlin.me//2025/june/async-class-creation-in-javascript</guid>
            <pubDate>Tue, 03 Jun 2025 20:04:58 GMT</pubDate>
            <description><![CDATA[Have you ever wanted to create a class in JavaScript or TypeScript but also have the initialization be async? Here's a quick tip on a pattern that I've used in the past!]]></description>
            <content:encoded><![CDATA[<p>While JavaScript <code>class</code>es aren&#x27;t exactly all the rage anymore (although I think they are finding a nice niche, and I recommend developers check them out for specific use cases), I&#x27;ve been working with them a decent amount as of late while working with webpack and rspack plugins.</p>
<p>One of the challenges that we&#x27;ve run into at work is needing to instantiate a new instance of the plugins, but doing so with some async dependencies.</p>
<p>If you&#x27;re unfamiliar, <code>class</code> constructors can&#x27;t be <code>async</code> in JavaScript, they syncronously return with a class instance, so if you need to do some async computation before creating the instance you usually would need to do that work outside of the class and then pass the result into the class constructor, e.g.:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> MyClass</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  constructor</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> computeSomething</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> /* ... */</span><span style="color:#999999;--shiki-dark:#666666"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// do async operation:</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> result</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> computeSomething</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// pass result to the MyClass constructor</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> classInstance</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> MyClass</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">result</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p>However this breaks some of the nice encapsulation we get out of the box with JavaScript classes.</p>
<p>At work, we&#x27;ve had to come up with a nice pattern for handling async instantiation without breaking some of the encapsulation we get with classes!</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> MyClass</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // ‚ú® &quot;Magic&quot; ‚ú®</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  static</span><span style="color:#AB5959;--shiki-dark:#CB7676"> async</span><span style="color:#59873A;--shiki-dark:#80A665"> createMyClass</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // do some async operations</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> result</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">/* ... */</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    </span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> MyClass</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">result</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  </span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  constructor</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#A0ADA0;--shiki-dark:#758575DD">/* ... */</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// usage:</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// call the static async method, get back a class instance!</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> classInstance</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#B07D48;--shiki-dark:#BD976A"> MyClass</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">createMyClass</span><span style="color:#999999;--shiki-dark:#666666">();</span></span></code></pre>
<p>This isn&#x27;t all that different from the first code snippet above - but at least now we&#x27;ve nicely coupled the initialization logic within the class, making the code a bit more portable in the case that we might need to move it around.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/async-class-creation-in-javascript.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[In Review - The Belroy Transit Workpack Pro v2]]></title>
            <link>https://matthamlin.me//2025/may/belroy-transit-workpack-pro-v2</link>
            <guid>https://matthamlin.me//2025/may/belroy-transit-workpack-pro-v2</guid>
            <pubDate>Thu, 29 May 2025 11:10:15 GMT</pubDate>
            <description><![CDATA[I semi-recently bought a Belroy Transit Workpack Pro v2 backpack, and after using it for about 9 months now I figured I'd write up some of my thoughts on it!]]></description>
            <content:encoded><![CDATA[<p>A few months ago I updated my go-to travel and daily use backpack to the <a href="https://bellroy.com/products/transit-workpack-pro?color=black&amp;material=dura_polyester_recycled&amp;size=28l#slide-0" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Belroy Transit Workpack Pro 28L</a> (specifically the black color option), after using it for a few months I wanted to write a brief review of it as a product with some of my paper cuts in a hope to provide insight for others looking to purchase the backpack!</p>
<p>Prior to this I was using a fairly larger backpack from peak, I think it was this <a href="https://www.peakdesign.com/products/travel-backpack?Size=45L&amp;Color=Black" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">45L Travel Backpack</a>, and I was looking to find a backpack that was slightly smaller but would still be useful for using as a secondary carry on travel bag.</p>
<p>In addition to using it while traveling, I also use it infrequently when commuting to work and back (when I do go into the office).</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="paper-cuts">Paper Cuts:</h2>
<p>There&#x27;s a few smaller pain points / paper cuts that I&#x27;ve found with the Belroy backpack, some of these may matter for you but some may not!</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>All of these are very minor complaints about the backpack - I still use it as my go-to backpack anyway!</p></div>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="water-bottle-pouch">Water Bottle Pouch</h3>
<p>The water bottle storage in the backpack is a zipper pouch on the side - because its a zipper pouch you&#x27;re fairly limited in the size of water bottle that you can carry in the backpack. I usually carry a 40oz Hydroflask or a 46oz Nalgene - both of which can&#x27;t fit within the side pouch (even without zipping it up partially).</p>
<p>In addition to the smaller size - I&#x27;ve found that the zipper on that pouch seems to stick quite frequently for me and it takes a bit of effort to fully open or close it - however this might just be an issue with my specific backpack vs all backpacks.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="laptop-sleeve">Laptop Sleeve</h3>
<p>The laptop enclosure has a nice separate small pouch for things like a kindle or phone, however there&#x27;s some weird gaps on either side of the laptop pouch that allow for things to go into the main compartment of the backpack.</p>
<p>This isn&#x27;t really that much of an issue (the gaps are about the size of an Airpods case), but it does make me think that I might loose something between the gaps from the laptop compartment into the main compartment.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="small-front-compartment">Small Front Compartment</h3>
<p>The small front compartment is generally pretty nice - I feel like it could use a few more organizational slots, but generally it&#x27;s nice to hold on to a few pens/pencils, and a small notebook or passport. However the glasses compartment in that pouch has a zipper that runs the opposite way as the zipper for the compartment - which feels weird to me. It usually means that I need to fully open the small front compartment in order to access the glasses section.</p>
<p>I usually now just leave that glasses compartment fully unzipped to make it easier to access on the go.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="general-shape">General Shape</h3>
<p>My final pain point with the bag is that it can&#x27;t easily stand on it&#x27;s own. The bottom of the bag curves away (maybe to make it more ergonomic?), but this means that it&#x27;s near impossible to have it sit on it&#x27;s bottom without leaning against a wall.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="summary">Summary</h2>
<p>The above issues are definitely minor inconveniences rather than major pain points. I still use the backpack almost daily and I&#x27;m enjoying it compared to my previous backpack - but I wish that they&#x27;d polish up some of these issues to improve upon it even more!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/belroy-transit-workpack-pro-v2.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Website Redesign v10]]></title>
            <link>https://matthamlin.me//2025/may/website-redesign-v10</link>
            <guid>https://matthamlin.me//2025/may/website-redesign-v10</guid>
            <pubDate>Sun, 25 May 2025 21:45:36 GMT</pubDate>
            <description><![CDATA[I recently launched a rewrite and redesign of this personal website, I figured I'd talk a bit about the changes and new features that I added along the way!]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve done a number of redesigns/rewrites of this blog over the years, so many in fact that I&#x27;ve lost count, but here&#x27;s a few older blog posts talking about those redesigns/rewrites:</p>
<ul>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2015/november/a-new-look">&quot;v1&quot; - November 2015</a></li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2016/april/redesign">&quot;v2&quot; - April 2016</a></li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2016/august/my-new-website">&quot;v3&quot; - August 2016</a></li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2016/august/redesign-v5">&quot;v4/5???&quot; - August 2016</a>
<ul>
<li>At this point I lost track of the number of rewrites of my personal site ü§£</li>
</ul>
</li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2017/march/redesign-v6">&quot;v6&quot; - March 2017</a></li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2018/december/starting-fresh">&quot;v7???&quot; - December 2018</a></li>
</ul>
<p>I know I released a few rewrites in between and since those posts though - and since I&#x27;m entering the 10th year of active development on my blog I figured I&#x27;d call this one the 10th version of my personal site.</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>You can checkout the blog posts tagged with the <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/blog/tags/Redesign"><code>Redesign</code></a> tag to see all related redesign blog posts!</p></div>
<hr/>
<details class="border border-green-400 rounded-md p-4 bg-green-50 dark:bg-green-900/20"><summary class="font-bold cursor-pointer underline underline-offset-1 decoration-wavy decoration-2 decoration-green-400">TL;DR</summary><div class="py-4"><p>For those that just want to look at the code - <a href="https://github.com/hamlim/blog-2025" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">check it out here</a>!</p></div></details>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="framework">Framework:</h2>
<p>For a while now I had been using Next.js as my go-to web framework (or I suppose meta-framework). I&#x27;ve even <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2022/january/my-opinionated-nextjs-setup">written about it</a> <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2022/december/updated-opinionated-nextjs-setup">a few times</a>!</p>
<p>However, I&#x27;ve started to move away from the <button data-state="closed" data-slot="tooltip-trigger"><abbr title="Vercel">Triangle <del>Industrial Complex</del> <strong>Company</strong></abbr></button>, I&#x27;ve started to host my various side project websites on Cloudflare instead of Vercel, and with that I&#x27;ve opted to use a different meta framework, that&#x27;s a bit less of a black box than Next.js.</p>
<p>For the past few months I&#x27;ve been heavily using <a href="https://waku.gg" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Waku</a>, which is a React Server Component compatible framework built on Vite!</p>
<p>It&#x27;s been a breath of fresh air to use Waku compared to Next.js - I feel like I have control over how most of my application works as opposed to what Next.js limits you to. There are still some aspects of Waku that I&#x27;m not a huge fan of - but it still feels like a great option (even though it hasn&#x27;t officially had a stable 1.0 release yet)! <span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup></p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="features">Features:</h2>
<p>Originally - I wanted to heavily invest in some kind of CMS-like setup for my site. Right now I duplicate quite a bit of content between my personal website and my notes within Obsidian (even this blog post started out in Obsidian until I copied it into my website repo!).</p>
<p>However I think I ended up spending way too much time overthinking how to approach that and instead opted for an implementation that was fairly similar to how my site worked with Next.js before (I do a decent amount of &quot;code generation&quot; than I did before, which I talk about <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#code-generation">below</a>).</p>
<p>Once I got to work carrying over the routes and blog posts from my previous blog - I realized that I could build out some of the things that I&#x27;ve wanted for a while now on my personal site!</p>
<p>Including:</p>
<ul>
<li>Related blog posts (see the post &quot;cards&quot; below this blog post as an example)</li>
<li>A <em>limited</em> search feature and a command menu (try hitting <code>cmd + k</code> and then searching for things)</li>
</ul>
<p>My hope is that I&#x27;ll be able to build out more features in the same vein as those in the future too!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="code-generation">Code Generation:</h2>
<p>For both of the two new features noted above - I needed a single &quot;index&quot; of all my blog posts to be able to easily scan through and provide related blog posts based on tags, and search based on title/description/tags etc.</p>
<p>My previous website had the ability to do some of this also but I took a slightly different approach this time. Previously when creating a new blog post I&#x27;d run a script to scaffold out the MDX page for the post and also add the details like title, tags, description, etc all right when I ran the script to a single JSON file.</p>
<p>This worked - but it meant if I wanted to change the description, or the title, or anything else about the post I&#x27;d have to find the entry in this JSON file and then update it.</p>
<p>My new setup is a bit &quot;lazier&quot; instead, it generates that JSON data structure during builds (or watching during dev), which means the blog post MDX file is the true source of truth for that information instead of having it be distributed across a few files.</p>
<hr/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I&#x27;ve wanted to also give Redwood SDK and also Parcel&#x27;s RSC support a try out at some point soon too!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/website-redesign-v10.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Server Side Rendering Compatible CSS Theming]]></title>
            <link>https://matthamlin.me//2025/april/server-side-rendering-compatible-css-theming</link>
            <guid>https://matthamlin.me//2025/april/server-side-rendering-compatible-css-theming</guid>
            <pubDate>Tue, 15 Apr 2025 20:40:38 GMT</pubDate>
            <description><![CDATA[A quick tip to implementing CSS theming that's compatible with Server Side Rendered applications!]]></description>
            <content:encoded><![CDATA[<p>Earlier today I saw some discussion around how to implement light/dark mode theming for a server side rendered (SSR) React application, in this case it was using <a href="https://waku.gg" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Waku</a>, however this pattern is compatible with almost any modern React framework, e.g. Next.js, React Router, etc!</p>
<p>I quickly worked up a <a href="https://waku-ssr-theming-example.mhamlin.workers.dev/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">scrappy demo thats over here</a>, but I figured I could expand on it a bit and outline what it does and how it works in more details. If you&#x27;re just looking for the snippets of code - I recommend jumping to that demo where you can easily copy them!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="background-context">Background Context:</h2>
<p>Traditionally, handling light mode and dark mode theme differences usually meant writing a decent number of <code>@media (prefers-color-scheme: dark) {}</code> media conditions across your CSS. However as Tailwind has increased in popularity - it&#x27;s becoming increasingly rare to hand write the CSS and instead increasingly more web applications are being authored using utility classes.</p>
<p>Tailwind and similar systems usually offer a nice developer experience for customizing styles based on the preferred color scheme (<a href="https://tailwindcss.com/docs/dark-mode" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">the <code>dark:</code> modifier in tailwind for example</a>), however this only solves for half of the problem, the remaining issue is how do you determine when to apply the <code>dark</code> or <code>light</code> classname (or data attribute) to the wrapping element (usually on the <code>html</code> or <code>body</code> elements)?</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="the-pattern">The Pattern:</h2>
<p>To resolve that issue, we can reach for an early inline script that we send to the browser that should be evaluated and run before we start to show the content on the page (in order to avoid the flash of unstyled content)!</p>
<p>The trick relies on the behavior of the browser, where it will parse and execute blocking <code>&lt;script&gt;</code>&#x27;s before proceeding with parsing the rest of the document by default. This allows our inline script to modify the <code>&lt;html&gt;</code> element eagerly, and then when our CSS is loaded it can rely on a change to the <code>&lt;html&gt;</code> element (either via class name or data attribute) to alter the styles of the page.</p>
<p>The trick for server side rendered React apps is that in React v19, there was support added for &quot;floating&quot; resources found while rendering to the <code>&lt;head&gt;</code> (and in fact - this works without SSR as well). If React encounters a <code>&lt;script&gt;</code> or <code>&lt;style&gt;</code> element (or a few other specific elements), it will move the element up to the <code>&lt;head&gt;</code> automatically!</p>
<blockquote>
<p>This feature isn&#x27;t strictly necessary however, if you have control over what elements should be rendered in the <code>&lt;head&gt;</code> for your page, you can render an inline script there manually, and even if you&#x27;re not using a React app but instead have some other framework - you can still use the same pattern!</p>
</blockquote>
<p>Here&#x27;s the snippet that I use in most of my websites these days:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> themeCheck</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let </span><span style="color:#B07D48;--shiki-dark:#BD976A">prefersDarkModeQuery</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> window</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">matchMedia</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">(prefers-color-scheme: dark)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let </span><span style="color:#B07D48;--shiki-dark:#BD976A">preferred</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prefersDarkModeQuery</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">matches</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ? </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">dark</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> : </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">light</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  document</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">documentElement</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">classList</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">add</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">preferred</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  prefersDarkModeQuery</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">addEventListener</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">change</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let </span><span style="color:#B07D48;--shiki-dark:#BD976A">newPreferred</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> e</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">matches</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ? </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">dark</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> : </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">light</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    document</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">documentElement</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">classList</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">remove</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">preferred</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    document</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">documentElement</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">classList</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">add</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">newPreferred</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    preferred</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> newPreferred</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  });</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>What I usually do is define that function as a regular source code function, and then render it within the script by calling <code>.toString()</code> on it, like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">script</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  dangerouslySetInnerHtml</span><span style="color:#999999;--shiki-dark:#666666">={{</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // wrapping parens are necessary in order to invoke the function</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // when this script is parsed and evaluated by the browser!</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    __html</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span><span style="color:#B56959;--shiki-dark:#C98A7D">(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">themeCheck</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">toString</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">)()</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">/&gt;</span></span></code></pre>
<blockquote>
<p>The benefit of authoring the function as an actual value as opposed to maintaining it as a string of JS is that we get the benefit of static analysis during build (e.g. catching typo&#x27;s or type errors, etc).</p>
</blockquote>
<p>This script will manage a few things:</p>
<ol>
<li>Evaluate the <code>matchMedia</code> query when the function is called initially</li>
<li>Set the preferred class name on the <code>html</code> element</li>
<li>Add an event listener to the query to react to changes to the preferences while the page is active, and update the class name on the element</li>
</ol>
<p>In this case were using <code>light</code> and <code>dark</code> classnames on the <code>&lt;html&gt;</code> element, but this snippet can be modified to use data attributes, or other classes if you want!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/server-side-rendering-compatible-css-theming.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Podcasting By Hand]]></title>
            <link>https://matthamlin.me//2025/april/podcasting-by-hand</link>
            <guid>https://matthamlin.me//2025/april/podcasting-by-hand</guid>
            <pubDate>Mon, 14 Apr 2025 11:15:40 GMT</pubDate>
            <description><![CDATA[A brief overview on how we launched The Bikeshed Podcast, including a deep dive in our recording and distribution workflows!]]></description>
            <content:encoded><![CDATA[<p>A couple of my friends (<a href="https://scottykaye.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Scott</a> and <a href="https://dilloncurry.vercel.app/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Dillon</a>) and I recently <a href="https://bikeshedpod.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">started a podcast called The Bikeshed Podcast</a>. One of the things that we did differently from other podcasts (at least from what we can tell), is that we decided to manage all the infrastructure around recording and distributing the podcast ourselves instead of offloading to services that manage the recordings and also manage distribution.</p>
<p>We did all of this by effectively reverse engineering other podcasts we follow in the wild (shout out to <a href="https://runtimerundown.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">runtime rundown</a> and <a href="https://syntax.fm/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">syntax.fm</a>), digging into their <code>rss.xml</code> feeds, and also just generally messing around until we found something that worked.</p>
<p>Here&#x27;s a brief overview of our current process (this may change in the future):</p>
<p>Currently we record the podcast in a Discord voice chat using <a href="https://craig.chat/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Craig</a> - we had originally started by recording manually with OBS, but found that it was a pain to edit the audio because everyone was in a single audio track instead of split up. Craig is insanely good - it just works and gives us a variety of formats/options to export the audio files. I&#x27;m honestly amazed that its still free!</p>
<p>From there, we (meaning primarily <a href="https://scottykaye.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Scott</a>) edit the audio in GarageBand. I don&#x27;t have a complete understanding of the steps involved here - maybe I can convince Scott to write up his workflow on his own blog as well!</p>
<p>After we have the edited audio, we run it through <a href="https://goodsnooze.gumroad.com/l/macwhisper" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">MacWhisper</a> to generate captions for the episode, and also to summarize the episode that we show in the details page on the website (we use a Google Gemini model to summarize the episodes based on the captions).</p>
<p>When we have the edited audio file (<code>.mp3</code>), and the captions file (<code>.vtt</code>), we upload both into a Cloudflare R2 bucket, and then are exposed to the public web under the <code>assets.bikeshedpod.com</code> domain - this is how we host the files for podcast apps / the website to access!</p>
<p>From here - it&#x27;s worth taking a brief detour in how our website works (which also powers our <code>rss.xml</code> feed too)!</p>
<p>The <a href="https://bikeshedpod.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">bikeshedpod.com</a> website is built using <a href="https://waku.gg" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Waku</a> (using <a href="https://github.com/hamlim/garbanzo" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Garbanzo</a>) and deployed on Cloudflare Workers. We have a few standard pages (e.g. <code>/about</code>, <code>/search</code>, etc), and also some &quot;episode detail pages&quot; like <a href="https://bikeshedpod.com/episodes/5/testing-is-it-worth-it" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this one</a>.</p>
<p>The &quot;episode detail pages&quot; are built using MDX files for each episode, the MDX files have a bit of frontmatter for defining things like tags on each episode, who the hosts were, a short description, and also contain the links to the audio asset and captions asset.</p>
<p>During builds of the website, we extract all the frontmatter and use it along with the content to build up a generated file with the metadata in a JSON structure. We use this structure to power both the website - e.g. list of episode cards on the homepage or the all episodes page, and search, as well as the rss feed, which is a custom API route hosted at <code>/rss.xml</code>.</p>
<hr/>
<p>That about covers the current setup for the podcast at the moment, theres small aspects that feel a bit less than ideal at the moment - but all in all the workflow seems to fit us nicely at the moment.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/podcasting-by-hand.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Replacing Dropbox Capture with Raycast]]></title>
            <link>https://matthamlin.me//2025/march/replacing-dropbox-capture-with-raycast</link>
            <guid>https://matthamlin.me//2025/march/replacing-dropbox-capture-with-raycast</guid>
            <pubDate>Tue, 11 Mar 2025 20:56:08 GMT</pubDate>
            <description><![CDATA[Recently Dropbox announced that it was shutting down the Capture app/service, so I sought out an alternative that provided a similar user experience!]]></description>
            <content:encoded><![CDATA[<p>The other week I found out that Dropbox is shutting down the Dropbox Capture app and service:</p>
<a href="https://bsky.app/profile/matthamlin.me/post/3limttz2gac2f">https://bsky.app/profile/matthamlin.me/post/3limttz2gac2f</a>
<p>For those that don&#x27;t know, Dropbox Capture provided a really nice user experience for taking screenshots and screen recordings, automatically uploading them to Dropbox, and then copying a share link to easily share all in one go.</p>
<p>I basically used it every day, whether it was capturing a screenshot for a code change I was working on, or clipping a meme somewhere to share in a Discord chat - I heavily used the tool!</p>
<p>Now that its being shut down however, I started to look for a replacement.</p>
<p>I tried out a few of the options that folks recommended, and even tried to go back to the native macOS Screenshot utility, but none seemed to provide the nice UX of both saving the file to my Dropbox but also copying it to the clipboard to let me share it immediately as well.</p>
<p>I then <a href="https://justin.searls.co/posts/simultaneously-save-and-copy-screenshots-on-the-mac/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">stumbled across this blog post</a> which shared a quick shell script and Apple Shortcut to run the script based on a keyboard shortcut.</p>
<p>I tested this workflow out for a bit but it seemed a bit hit or miss on if the keyboard shortcut would trigger the script. After a bit of messing around with it - I think I found a sweet spot building on the script but using Raycast instead of Shortcuts to manage the keyboard shortcut part for me! The gist was using Raycast&#x27;s <code>Script Command</code> feature!</p>
<p>Here&#x27;s how I built out my &quot;Better Screenshot&quot; workflow using Raycast:</p>
<ol>
<li>Open Raycast</li>
<li>Search for <code>Create Script Command</code></li>
<li>Choose the following:<!-- -->
<ol>
<li>Template: <code>Bash</code></li>
<li>Mode: <code>Silent</code></li>
<li>Title: Whatever you want! I called it <code>Better Screenshot</code></li>
<li>You can leave the rest of the inputs as-is / blank</li>
<li>Create the script</li>
</ol>
</li>
</ol>
<p>Within the created script, you&#x27;ll want to paste in the following snippet (copied and slightly edited from the above linked blog post):</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">#!/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Required parameters:</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># @raycast.schemaVersion 1</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># @raycast.title Better Screenshot</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># @raycast.mode silent</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Optional parameters:</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># @raycast.icon ü§ñ</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Documentation:</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># @raycast.author &lt;your name&gt;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># @raycast.authorURL &lt;your URL&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Usage:</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">#</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">#   $ better-screenshot</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">#</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Then, either:</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">#   - drag and release the mouse to select an area to screenshot</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">#   - press spacebar and click the mouse to select the current window</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Construct a unique-ish filename like:</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># screenshot-2024-03-16-16h43m48s.png</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">isoTime</span><span style="color:#999999;--shiki-dark:#666666">=$(</span><span style="color:#59873A;--shiki-dark:#80A665">date</span><span style="color:#B56959;--shiki-dark:#C98A7D"> +</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">%Y-%m-%d-%Hh%Mm%Ss</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">fileName</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$HOME/Library/CloudStorage/Dropbox/Capture/screenshot-$isoTime.png</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># The -i will put the Screenshot app into interactive mode (like cmd-shift-4)</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">screencapture</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -i</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$fileName</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">if</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -f</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$fileName</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666"> ];</span><span style="color:#1E754F;--shiki-dark:#4D9375"> then</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  # This gnarly &quot;¬´class PNGf¬ª&quot; incantation is for some reason necessary to copy the file</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  osascript</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -e</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">set the clipboard to (read (POSIX file </span><span style="color:#A65E2B;--shiki-dark:#C99076">\&quot;</span><span style="color:#999999;--shiki-dark:#666666">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">fileName</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#A65E2B;--shiki-dark:#C99076">\&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">) as ¬´class PNGf¬ª)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">fi</span></span></code></pre>
<p>You can then save the file and jump back into Raycast.</p>
<p>Open Raycast and then open it&#x27;s settings (e.g. <code>Cmd + ,</code>), go to <code>Extensions</code>, and search for the name of your Script Command, e.g. <code>Better Screenshot</code>, once you find it in the table - you&#x27;ll want to record a keyboard shortcut for it. I opted to use the same shortcut that Dropbox Capture used for screenshots (<code>Option + shift + s</code>).</p>
<p>Now when you hit that keyboard short cut it should show the screenshot cursor allowing you to click and drag to select an area of the screen, and once you do it will both copy the screenshot to the clipboard and also save the file to the location in the script above.</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>A quick note on the file location in the script above - this assumes you&#x27;re storing the file in the <code>Dropbox/Capture/</code> directory. Additionally - I found that you need to update/opt-in to some feature within the Dropbox mac app to have the Dropbox drive mounted under <code>~/Library/CloudStorage</code>.</p></div>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/replacing-dropbox-capture-with-raycast.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Quick Tip - Specific Local Module Declarations]]></title>
            <link>https://matthamlin.me//2025/february/quick-tip-specific-local-module-definitions</link>
            <guid>https://matthamlin.me//2025/february/quick-tip-specific-local-module-definitions</guid>
            <pubDate>Mon, 24 Feb 2025 21:54:47 GMT</pubDate>
            <description><![CDATA[A quick tip outlining how to provide specific TypeScript type definitions for a local module!]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve been working in a codebase lately that uses a shared module across a few different files - in my case the module is a JSON file that I&#x27;m importing and I wanted to enforce consistent types for the value when it was imported across the codebase.</p>
<p>As far as I can tell the recommended solution looked something like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> jsonObject</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./some/path/to/the/file.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#1E754F;--shiki-dark:#4D9375"> type</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">MyDesiredJSONType</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./some-types</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">actualValue</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> jsonObject</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> MyDesiredJSONType</span><span style="color:#999999;--shiki-dark:#666666">;</span></span></code></pre>
<p>It felt a bit icky to me to not only copy and paste that across the codebase, but also worry about trying to remind others contributing to the code to do the same thing when they want to import the JSON value.</p>
<p>I instead found a neat little alternative approach that works pretty well, using <a href="https://www.totaltypescript.com/books/total-typescript-essentials/modules-scripts-and-declaration-files#declare-module" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">module declarations</a> and import maps (I&#x27;ve written about import maps before in <a href="blog/2024/december/a-quick-look-at-import-maps" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this blog post</a>)!</p>
<p>The trick is to do the following:</p>
<ul>
<li>Create a local <code>&lt;some-filename&gt;.d.ts</code> file (I&#x27;ve opted to call mine <code>local-types.d.ts</code> since I have a few other things in there too)</li>
<li>Add the following content to the file:</li>
</ul>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">declare</span><span style="color:#AB5959;--shiki-dark:#CB7676"> module</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#&lt;some-identifier&gt;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  import</span><span style="color:#1E754F;--shiki-dark:#4D9375"> type</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> MyDesiredJSONType</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./src/types</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let </span><span style="color:#B07D48;--shiki-dark:#BD976A">jsonObject</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">MyDesiredJSONType</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#B07D48;--shiki-dark:#BD976A"> jsonObject</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>I recommend prefixing the identifier with a special character, specifically <code>#</code>. This helps to identify it as a local module specifier (as opposed to <code>@</code> which might map to a scoped 3rd party package), and easily stands out to others reading the codebase!</p></div>
<p>Finally, and <strong>importantly</strong>, configure your import maps / paths configs:</p>
<ul>
<li>For Node.js / other node-like tools:<!-- -->
<ul>
<li>Add a new mapping to your <code>package.json</code> <code>imports</code> record</li>
</ul>
</li>
<li>For TypeScript:<!-- -->
<ul>
<li>Add a new mapping to your <code>tsconfig.json</code> <code>paths</code> record</li>
</ul>
</li>
</ul>
<p>Here&#x27;s an example configuration within a <code>package.json</code> file:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">imports</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">    &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">#some-identifier</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./src/some-json-file.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>and here&#x27;s an example configuration within a <code>tsconfig.json</code> file:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">compilerOptions</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">    &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">paths</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">      &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">#some-identifier</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./src/some-json-file.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">]</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>Note! Just because I&#x27;m using a JSON module as an example here doesn&#x27;t mean this strategy <em>only</em> works with JSON files - you can do this for any kind of file type!</p></div>
<p>Thats it! This should then let TypeScript use that declared module type whenever you import from this new identifier!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/quick-tip-specific-local-module-definitions.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On File-System Routing Conventions]]></title>
            <link>https://matthamlin.me//2025/february/on-file-system-routing-conventions</link>
            <guid>https://matthamlin.me//2025/february/on-file-system-routing-conventions</guid>
            <pubDate>Wed, 19 Feb 2025 21:58:25 GMT</pubDate>
            <description><![CDATA[Some rough thoughts on building a file-system routing based web application]]></description>
            <content:encoded><![CDATA[<p>Over the past few weeks (and really <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/december/request-for-minimal-rsc-framework">past few months</a>) I&#x27;ve been <a href="https://github.com/hamlim/guava/blob/main/packages/guava/src/cli.ts" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">tinkering</a> <a href="https://github.com/hamlim/simple-react-ssr-framework" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">with</a> <a href="https://github.com/hamlim/fika" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">a</a> <a href="https://github.com/hamlim/garbanzo" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">few</a> different ideas to building out a web application framework like Next.js, Remix, or others.</p>
<p>Through that experimentation - I&#x27;ve come to realize that file-system based routing conventions are actually pretty tricky to find the right balance between developer experience, ease to implement (from a framework perspective), and runtime performance.</p>
<p>Let&#x27;s take a look at a few options:</p>
<ul>
<li>folder-as-route-segment<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup></li>
<li>file-as-route-segment</li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="folder-as-route-segment">Folder as Route Segment</h3>
<p>This seems to be the most widely adopted pattern that I&#x27;ve seen, you can tell you&#x27;re working with this pattern when you have a ton of <code>page.tsx</code>, <code>index.tsx</code>, or <code>&lt;some-specific-file-name&gt;.tsx</code> files within your codebase.</p>
<p>This system leverages the names of folders to indicate the route segment that the handler (e.g. <code>page.tsx</code>, <code>route.ts</code>, etc) should be used to handle the request.</p>
<p>Next.js&#x27;s <code>AppRouter</code> opted to use this paradigm.</p>
<p>An example filesystem might look like:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span>app/</span></span>
<span class="line"><span>  page.tsx # handles `/` route</span></span>
<span class="line"><span>  blog/</span></span>
<span class="line"><span>    page.tsx # handles `/blog` route</span></span>
<span class="line"><span>  dashboard/</span></span>
<span class="line"><span>    page.tsx # handles `/dashboard` route</span></span>
<span class="line"><span>    settings/</span></span>
<span class="line"><span>      page.tsx # handles `/dashboard/settings` route</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="file-as-route-segment">File as Route Segment</h3>
<p>This one seems to be maybe slightly less adopted from what I&#x27;ve seen (but that might be a bit of recency bias). In this abstraction, the name of the file itself is also the name of the route segment.</p>
<p>The Next.js <code>Pages Router</code> used this paradigm.</p>
<p>Here&#x27;s an example filesystem where this paradigm is used:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span>pages/</span></span>
<span class="line"><span>  index.tsx # handles `/` route</span></span>
<span class="line"><span>  blog.tsx # handles `/blog` route</span></span>
<span class="line"><span>  dashboard/</span></span>
<span class="line"><span>    index.tsx # handles `/dashboard` route</span></span>
<span class="line"><span>    settings.tsx # handles `/dashboard/settings` route</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="trade-offs">Trade Offs</h2>
<p>As I was working on my latest iteration with <a href="https://github.com/hamlim/garbanzo" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">exploring building a web framework</a>, I was trying to figure out what the best strategy would be.</p>
<p>One of the trade offs I&#x27;ve personally noticed (and I think a lot of others have as well) with the folder-as-route-segment approach is your codebase fills up with many <code>page.tsx</code> files. It can be difficult to easily track down the <strong>right</strong> handler for a specific route segment. You usually need to search within your codebase for something like <code>&lt;route-segment-name&gt;/page</code> (and even then it can get a bit messy when dealing with dynamic route segments or catch all segments).</p>
<p>On the other hand, the file-as-route-segment approach leads to some ambiguity with how routes should be handled. Sometimes this can be exposed to the developer using the framework too! For example, using the above filesystem (copied below):</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span>pages/</span></span>
<span class="line"><span>  index.tsx # handles `/` route</span></span>
<span class="line"><span>  blog.tsx # handles `/blog` route</span></span>
<span class="line"><span>  dashboard/</span></span>
<span class="line"><span>    index.tsx # handles `/dashboard` route</span></span>
<span class="line"><span>    settings.tsx # handles `/dashboard/settings` route</span></span></code></pre>
<p>Did you notice that technically we could also use <code>pages/dashboard.tsx</code>? In that case, what happens if you have both <code>dashboard/index.tsx</code> and <code>dashboard.tsx</code>? It&#x27;s possible different frameworks would handle this differently - and sometimes that handling might be counterintuitive to the end developer.</p>
<p>This one actually gets a bit more confusing when we start introducing &quot;meta route segments&quot;, e.g. <code>layout.tsx</code> (a layout component that wraps the page contents) - where should that <code>layout.tsx</code> live in the file-as-route-segment approach? If its under the <code>dashboard/</code> directory - then it might be weird to see <code>dashboard.tsx</code> get wrapped in <code>dashboard/layout.tsx</code>!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="summary">Summary</h2>
<p>I don&#x27;t think there&#x27;s one silver bullet approach that makes sense, is easy to disambiguate, and generally &quot;works as expected&quot; for all use cases.</p>
<p>I&#x27;ve sadly opted to continue using the folder-as-route-segment approach to avoid some of the ambiguity that arises with the file-as-route-segment approach - but I still don&#x27;t like that pages are all named the same!</p>
<p>Have you found a better approach? Please let me know!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->For the context of this blog post, a route segment is the name of a specific slice of the requested path. Usually this is <code>/</code> delimited, e.g. if we have a path that is <code>/foo/bar/baz</code>, then the segments are <code>&#x27;foo&#x27;</code>, <code>&#x27;bar&#x27;</code>, and <code>&#x27;baz&#x27;</code>.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/on-file-system-routing-conventions.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[You're Building Software Wrong]]></title>
            <link>https://matthamlin.me//2025/february/youre-building-software-wrong</link>
            <guid>https://matthamlin.me//2025/february/youre-building-software-wrong</guid>
            <pubDate>Sun, 16 Feb 2025 00:42:00 GMT</pubDate>
            <description><![CDATA[Slicing software: why vertical is better than horizontal.]]></description>
            <content:encoded><![CDATA[<p>Imagine software as a square. A square has four sides‚Äîtop, bottom, left, and right. In this metaphor, that square represents your software product in its entirety. Every piece of your project exists within it.</p>
<p>Now, let‚Äôs focus on two key edges: the top and the bottom. The top edge represents the surface that users interact with directly. If you‚Äôre building a web application, this would be your user interface (UI). Below that, supporting the UI, is everything else‚Äîyour backend services, infrastructure, databases‚Äîextending all the way down to the bottom edge.</p>
<figure class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:89.26315789473685%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/youre-building-software-wrong/software-square.svg" height="424" width="475" loading="lazy" class="rounded-lg" alt="A square, with the top edge highlighted in yellow with a label of &#x27;User Experience&#x27;, and the bottom edge highlighted in blue with a label of &#x27;Infrastructure&#x27;, filled with purple squiggles and a label of &#x27;Implementation&#x27;."/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">A visual model for how to think about software</figcaption></figure>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="the-traditional-approach-horizontal-slices">The Traditional Approach: Horizontal Slices</h3>
<p>Most software teams tend to break down projects into horizontal slices.</p>
<ol>
<li>They start at the bottom, figuring out infrastructure‚Äîwhere and how to deploy the application.</li>
<li>Above that, they choose frameworks and set up backend services.</li>
<li>Higher up, they connect data layers and start wiring backend logic.</li>
<li>Finally, they work their way up to the UI, assembling components and polishing the user experience.</li>
</ol>
<p>At first glance, this approach seems reasonable. Each layer is built in sequence, dependencies are resolved early, and there‚Äôs a logical flow from the ground up.</p>
<p>The problem? It delays meaningful user feedback. By the time teams reach the UI, they may realize they‚Äôve built the wrong thing. Maybe they solved Problem Y when they actually set out to solve Problem X‚Äîall because of cascading decisions made at lower levels.</p>
<figure class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:72.9607250755287%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/youre-building-software-wrong/horizontal-slices.svg" height="483" width="662" loading="lazy" class="rounded-lg" alt="The previous square diagram broken down into horizontal slices, with each slice shifted slightly left or right, resulting in a top horizontal slice being slightly off from the original expected top edge of the square, labeled as &#x27;Resulting UX&#x27;."/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">Horizontal Slices</figcaption></figure>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="the-better-approach-vertical-slices">The Better Approach: Vertical Slices</h3>
<p>Instead of cutting the project horizontally, slice it vertically.</p>
<p>A vertical slice means delivering a thin, end-to-end feature that touches every necessary part of the stack‚Äîfrom UI to backend‚Äîso that it can be tested, validated, and adjusted before moving forward.</p>
<p>For example, if you‚Äôre building a web application, a simple way to slice vertically is by screen or page:</p>
<p>‚Ä¢	The About page can be developed independently of the Homepage.<br/>
<!-- -->‚Ä¢	A basic version of a key feature (e.g., search functionality) can be built with a minimal UI, a simple API, and a rough data model.</p>
<p>Each slice should result in something that users can interact with‚Äîeven if it‚Äôs rough. This could be beta testers, internal users, or real customers if you‚Äôre iterating live.</p>
<figure class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:79.16666666666667%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/youre-building-software-wrong/vertical-slices.svg" height="475" width="600" loading="lazy" class="rounded-lg" alt="The square diagram, this time split into vertical slices. Each slice has a slightly different width, and has different highlighted sections for the top edge of the square. With a label reading &#x27;Each slice delivers incremental value&#x27;."/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">Vertical Slices</figcaption></figure>
<p>Why Vertical Slices Work Better</p>
<p>‚Ä¢	<strong>Early user feedback</strong> ‚Üí Ensures you‚Äôre solving the right problem before investing too much.<br/>
<!-- -->‚Ä¢	<strong>Faster iterations</strong> ‚Üí Teams can adjust and pivot without reworking foundational layers.<br/>
<!-- -->‚Ä¢	<strong>More meaningful progress</strong> ‚Üí Each slice is an actual, usable feature‚Äînot just groundwork.</p>
<p>Instead of reaching the UI after months of backend work, you build user-facing functionality from the start. If something feels wrong or misaligned, you catch it early‚Äîbefore it‚Äôs too late.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="avoiding-pitfalls">Avoiding Pitfalls</h3>
<p>This isn‚Äôt to say you should create one giant, monolithic slice either. The key is to find logical breakpoints where work can be split cleanly.</p>
<p>For example:</p>
<p>‚Ä¢	If a feature requires a settings page, make that its own vertical slice.<br/>
<!-- -->‚Ä¢	If a feature involves real-time updates, build an initial version with fake data before tackling backend optimizations.</p>
<p>By keeping slices narrow but functional, teams maintain flexibility without unnecessary complexity.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="conclusion">Conclusion</h2>
<p>If you structure software development horizontally, you risk spending months building something that doesn‚Äôt meet user needs. By shifting to vertical slices, you validate user experience early, catch misalignments quickly, and deliver usable software faster.</p>
<p>Next time you start a project, don‚Äôt ask ‚ÄúWhat infrastructure do we need?‚Äù. Instead, ask ‚ÄúWhat‚Äôs the smallest, usable feature we can deliver first?‚Äù</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/youre-building-software-wrong.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Cursor and Obsidian]]></title>
            <link>https://matthamlin.me//2025/february/cursor-and-obsidian</link>
            <guid>https://matthamlin.me//2025/february/cursor-and-obsidian</guid>
            <pubDate>Thu, 13 Feb 2025 15:11:05 GMT</pubDate>
            <description><![CDATA[A quick look at combining Cursor with Obsidian to ask questions of your notes!]]></description>
            <content:encoded><![CDATA[<p>The other day I <a href="https://youtu.be/nxss50uZgE0?si=1wzRZFW7urqAPQug" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">found a youtube video</a> diving into showing how someone had set up using <a href="https://cursor.sh" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Cursor</a> to index their obsidian vault and leverage the built-in AI features to not only update notes or add new context to notes but also to extract context from existing notes and connections that might be in your vault.</p>
<p>I&#x27;ve been using this setup only a couple of days now, but I found it really useful to ask natural language questions against my notes to try to recall some of the things that I&#x27;ve captured in the past.</p>
<p>A good example is the other day I captured some notes on how to launch a local development site within our projects internally at work and then also where to see the local development site in my browser. I was trying to recall that today and was about to use the built-in search within Obsidian to find that and I realized that it&#x27;s not going to know how to translate my natural language query into the notes that I took. And so I jumped into my Cursor window that contains my vault and asked it the question in its chat feature and it immediately recalled the information I was looking for.</p>
<p>The setup is pretty simple, you can open a new cursor window and then from there navigate to wherever your vault is stored on your file system. I would also recommend going into cursor settings and ensuring that it indexes your vault completely. And that way it will have the context of your vault &quot;oh-hand&quot; when handling questions within the Chat feature.</p>
<p>You may need to preface your queries in the chat feature with an <code>@Codebase</code> tag so it knows to ground whatever response it gives to you based on the code within the current cursor project which is your vault.</p>
<p>This setup isn&#x27;t necessarily particular to Obsidian. Even if you&#x27;re managing your notes separately, e.g. in some raw markdown files and using a different editor. You can still get the same features out of this setup.</p>
<p>In many ways it starts to get closer to some of the features that other knowledge management systems like Notion and etc. also offer out of the box.</p>
<hr/>
<p>Have you tried this setup out? Or similar setups in terms of asking natural language queries against your notes/vault? I&#x27;d be curious to find out!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/cursor-and-obsidian.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Single File Web Apps]]></title>
            <link>https://matthamlin.me//2025/february/single-file-web-apps</link>
            <guid>https://matthamlin.me//2025/february/single-file-web-apps</guid>
            <pubDate>Mon, 03 Feb 2025 17:27:21 GMT</pubDate>
            <description><![CDATA[What if you could author an entire web application in a single file?]]></description>
            <content:encoded><![CDATA[<div class="rounded-lg bg-muted px-4 py-0.5"><p>This article is currently more of a raw &quot;note&quot;, than a complete blog post. If you&#x27;re looking for something really polished on this topic, keep searching üòÇ.</p></div>
<p>A couple days ago I was giving <a href="https://val.town" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">val.town</a>&#x27;s Townie AI system a try, I was tinkering with a small concept and was wondering if it could build it out for me. While that little experiment didn&#x27;t fully pan out - I did come away with an interesting thought that didn&#x27;t click until about a week later.</p>
<p>Val.town does something interesting, and I don&#x27;t think it&#x27;s limited to their Townie AI assistant either, but present in the fundamental implementation of their system. For those not familiar with val.town, it&#x27;s effectively GitHub Gists (e.g. small snippets of code) that can be ran as one-off scripts, http handlers, cron jobs, etc. Essentially it&#x27;s runnable GitHub Gists, which is how they used to (maybe still do) market the service to new users.</p>
<p>The really cool emergent behavior of this concept is that they both host the code and can run the code, what this means is that you can not only run the code on their services, but you can also request it as a plain old module and load it in another runtime!</p>
<p>While that might not sound all that amazing, what it unlocks is pretty interesting in my opinion. This paradigm lets you author a module that can both be used for server handling of a request <strong>and</strong> also be loaded on the client for client logic and behaviors.</p>
<p>Imagine having a single file that could both handle server requests (server rendering, handling form or other misc. server actions) <em>and</em> also be loaded on the client to hydrate the server request and add client interactions.</p>
<p>Traditionally, you&#x27;d need two separate entrypoints in your application, one (possibly bundled) for the server, expected to run in a server-only environment, and another (most likely bundled) for the client.</p>
<p>Split entrypoints have benefits;</p>
<ul>
<li>Don&#x27;t need to manually sprinkle in <code>if (typeof document !== &#x27;undefined&#x27;)</code> or similar checks</li>
<li>Can reduce code served to the client (or the server)</li>
</ul>
<p>But, for prototyping (which is where val.town excels), not needing to deal with separate entrypoints (and possibly even separate build steps with separate build config), can really make that iteration speed between make a change and test the change be incredibly fast.</p>
<p>Here&#x27;s an example val that does exactly that (if it doesn&#x27;t load, you can <a href="https://www.val.town/v/matthamlin/single_file_web_app" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">find it here as well</a>):</p>
<iframe width="100%" height="400px" src="https://www.val.town/embed/matthamlin/single_file_web_app" title="Val Town" frameBorder="0" allow="web-share" allowFullScreen=""></iframe>
<p>To make this even cooler, you can combine <code>importMaps</code> with this approach to fork behavior between server and client (when working on multiple files for the time being, until the <a href="https://github.com/tc39/proposal-module-declarations" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">define multiple modules in a single file spec gets shipped, e.g. module declarations</a>), I&#x27;ve talked about <code>importMaps</code> previously in <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/december/a-quick-look-at-import-maps">this blog post</a>!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/single-file-web-apps.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The AI Development Conundrum]]></title>
            <link>https://matthamlin.me//2025/january/the-ai-development-conundrum</link>
            <guid>https://matthamlin.me//2025/january/the-ai-development-conundrum</guid>
            <pubDate>Tue, 28 Jan 2025 01:28:43 GMT</pubDate>
            <description><![CDATA[Is it a good or a bad thing to offload writing code to AI agents and Large Language Models?]]></description>
            <content:encoded><![CDATA[<p>While I spent a bit of time talking about using AI to help write code in my recent blog post on <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/october/offload-complexity">offloading complexity</a>, I&#x27;ve been thinking more about the trade-offs of heavily using AI to aid with software development.</p>
<p>I was working on a side project the other day, and I decided to give <a href="https://www.cursor.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Cursor</a>&#x27;s composer mode a go at building out a whole feature from start to finish. Normally what I opt to do is start writing the code myself and then rely on the autocomplete features to fill in some of the details. However this time I was diving in head first on letting the AI do all of the deep thinking and implementation as well.</p>
<p>While the feature seemed to mostly work, aside from a few edge cases that I caught when testing it out locally, I also realized that I had no idea what the code was doing.</p>
<p>I was blindly hitting <code>Accept ‚úÖ</code> on it&#x27;s suggestions, and just assuming that it would do the right thing along the way.</p>
<p>It hit me after a few minutes that I was just there to prompt the system and accept or decline it&#x27;s suggestions.</p>
<hr/>
<p>I&#x27;ve been thinking about this for about two weeks at this point, and I still feel fairly uncertain about the whole thing.</p>
<p>I got into software development because of the thrill of coding up something that I could see and interact with. Solving difficult problems has been what I really enjoy about the job and the hobby as well!</p>
<p>To borrow from my earlier blog post, offloading the problem solving part of the work (or hobby) feels like it&#x27;s against the point of doing the work in the first place.</p>
<p>And yet - not using AI at this point to build software feels like rejecting C when you have been writing assembly (like - why wouldn&#x27;t you opt to become more efficient?)</p>
<p>I think the easy to ask but hard to answer question is what do we do now? Where do we go from here? How do you continue to enjoy working in this field while AI is starting to actually take away the best part of the work from us?</p>
<p>I don&#x27;t have any answers, so sorry if you came here expecting to find some enlightenment, but I hope that you give it some thought and come up with some ways to find and hold on tight to the parts of the job or hobby that you really enjoy!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/the-ai-development-conundrum.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Resetting Controlled Components in Forms]]></title>
            <link>https://matthamlin.me//2025/january/resetting-controlled-components-in-forms</link>
            <guid>https://matthamlin.me//2025/january/resetting-controlled-components-in-forms</guid>
            <pubDate>Sat, 18 Jan 2025 14:42:15 GMT</pubDate>
            <description><![CDATA[A quick way to handle resetting internal state in components when a parent form is submitted!]]></description>
            <content:encoded><![CDATA[<p>If you&#x27;re starting to leverage some of React&#x27;s form primitives (e.g. <code>action</code> / <code>formAction</code> and Server Actions), you might run into the same conundrum I did with controlled components.</p>
<p>By default, React will reset a form after a submission <span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>, however that doesn&#x27;t really do much to components that manage their own state, the state managed by React will be preserved on the form submit.</p>
<p>This could lead to possibly weird looking form states after submission, or even bugs with previous values being submitted the next time a form is submitted.</p>
<p>However, there&#x27;s a really neat way to hook into this automatic form reset behavior within your controlled component, and thats by adding a reset event handler!</p>
<p>Here&#x27;s a small snippet of a controlled component:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> MultiSelect</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  options</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  label</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  name</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // maybe other props too</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">inputValue</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setInputValue</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;&quot;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">selected</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setSelected</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">([]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  function</span><span style="color:#59873A;--shiki-dark:#80A665"> handleInput</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    setInputValue</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">target</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  </span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">input</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        type</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">hidden</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        value</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">selected</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">join</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        name</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">name</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">label</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        {</span><span style="color:#B07D48;--shiki-dark:#BD976A">label</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">input</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          type</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">text</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          value</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">inputValue</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          onChange</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">handleInput</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">label</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">OptionMenu</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          filter</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">inputValue</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          options</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">options</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          selectedValues</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">selected</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          onSelect</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">setSelected</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  )</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>When this is used within a form that is submitted, the <code>inputValue</code> and <code>selected</code> state values will be preserved, meaning the MultiSelect will probably show you the values instead of an empty state.</p>
<p>The neat way to handle this reset behavior is to add an event listener:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// within our `MultiSelect` component</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> controller</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> AbortController</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  document</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">addEventListener</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">reset</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">      setInputValue</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;&quot;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">      setSelected</span><span style="color:#999999;--shiki-dark:#666666">([]);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    {</span><span style="color:#998418;--shiki-dark:#B8A965"> signal</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> controller</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">signal</span><span style="color:#999999;--shiki-dark:#666666"> }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  </span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    controller</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">abort</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">},</span><span style="color:#999999;--shiki-dark:#666666"> [])</span></span></code></pre>
<p>And that&#x27;s it! React, under the hood, effectively calls <code>formElement.reset()</code> which will trigger our event listener and clear our managed state!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->While there is a bit of <a href="https://github.com/facebook/react/issues/29034" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">contention</a> in the community on if that&#x27;s the right behavior</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/resetting-controlled-components-in-forms.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Thoughts on New Years Resolutions]]></title>
            <link>https://matthamlin.me//2024/december/thoughts-on-new-years-resolutions</link>
            <guid>https://matthamlin.me//2024/december/thoughts-on-new-years-resolutions</guid>
            <pubDate>Tue, 31 Dec 2024 14:52:57 GMT</pubDate>
            <description><![CDATA[You don't need to wait until January 1st to set yearly goals and resolutions for yourself!]]></description>
            <content:encoded><![CDATA[<p>For the past two years I&#x27;ve been tracking yearly goals for myself, however I haven&#x27;t been starting them on January 1st like most others often do. Instead I&#x27;ve used my birthday (July 20th) as my &quot;point of reference&quot; for these yearly goals. (see <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/july/29">29</a> and <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/july/30">30</a> for examples).</p>
<p>January 1st provides a nice starting point as it&#x27;s the start of a new calendar year, but for goal setting you don&#x27;t need to wait for a specific date to start tracking progress and improving.</p>
<p>Don&#x27;t wait to start making progress, set some goals, check back on them frequently, and improve!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/thoughts-on-new-years-resolutions.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Team Memes]]></title>
            <link>https://matthamlin.me//2024/december/team-memes</link>
            <guid>https://matthamlin.me//2024/december/team-memes</guid>
            <pubDate>Thu, 19 Dec 2024 22:52:34 GMT</pubDate>
            <description><![CDATA[A snippet of some shared terminology/concepts (memes) from my time on the Frontend Platform team at Wayfair!]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Originally written while I was at Wayfair, this was a team memes doc to help explain common memes among our Frontend Platform team at the time.
I&#x27;m sharing this as a blog post because I reference it often enough, and maybe others could start documenting their internal memes more often too!
Feel free to adopt one/some/all of these if you want!</p>
</blockquote>
<p>Theres usually a number of recurring memes that our team seems to hold on to and we sometimes refer
to during various meetings / discussions, this doc aims to capture some of those and describe what
they mean so everyone knows what we mean!</p>
<p>First off, <code>meme</code> in this context is referring to:</p>
<blockquote>
<p>... an idea, behavior, style, or usage that spreads from person to person within a culture ...</p>
</blockquote>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="holding-it-wrong">&quot;Holding it wrong&quot;</h2>
<p>This is a reference to the early iPhone issues where users were tightly gripping their phones causing the cell antenna to short and resulting in really poor cell reception. <a href="https://www.wired.com/2010/06/iphone-4-holding-it-wrong/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">See this for context</a>.</p>
<p>We generally use this to mean that we&#x27;re not using a tool/framework/pattern/etc the way that it was intended to be used. e.g. Using <code>AsyncLocalStorage</code> to pass values into server components in Next, and also pass values &quot;back up&quot; to express.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="faafo-fuck-around-and-find-out">F.A.A.F.O. (Fuck Around and Find Out)</h2>
<p>We use this to mean &quot;we don&#x27;t know, so experiment and learn&quot;.</p>
<p>e.g.</p>
<p>&quot;Just try removing CPU limits for our HPA settings, FAAFO!&quot;</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="developer-caution">Developer Caution</h2>
<p>We use this as a general &quot;excuse&quot; of sorts for why it might take a while for changes to happen.</p>
<p>e.g.</p>
<p>&quot;They had too much developer caution&quot;</p>
<p>This originates from this video: <a href="https://www.youtube.com/watch?v=LMVQ30c7TcA" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://www.youtube.com/watch?v=LMVQ30c7TcA</a></p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="speculative-generality">Speculative Generality</h2>
<p>As I understand it, this originated from a former Wayfairian Evan Davis, who used it to call out times in development where you are jumping to making a solution overly generalizable.</p>
<p>e.g.</p>
<p>&quot;We need to add in a queue system with a publisher and a subscriber in case we start supporting more clients!&quot;</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="cooking-let-them-cook--overcooked--undercooked">Cooking (&quot;Let them cook&quot; / &quot;overcooked&quot; / &quot;undercooked&quot;)</h2>
<p>This is effectively a direct reference to <a href="https://knowyourmeme.com/memes/let-him-cook-let-that-boy-cook" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">current slang</a>.</p>
<ul>
<li>&quot;Let them cook&quot; - meaning let them work<!-- -->
<ul>
<li>Example: &quot;Let copilot cook&quot;</li>
</ul>
</li>
<li>&quot;Overcooked&quot; - meaning someone over-engineered something<!-- -->
<ul>
<li>Example: &quot;They definitely overcooked with this implementation!&quot;</li>
</ul>
</li>
<li>&quot;Undercooked&quot; - meaning it&#x27;s been underbaked / not fully implemented<!-- -->
<ul>
<li>Example: &quot;We undercooked our solution, we need to make it better&quot;</li>
</ul>
</li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/team-memes.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[A Quick Look at Import Maps]]></title>
            <link>https://matthamlin.me//2024/december/a-quick-look-at-import-maps</link>
            <guid>https://matthamlin.me//2024/december/a-quick-look-at-import-maps</guid>
            <pubDate>Fri, 06 Dec 2024 23:22:09 GMT</pubDate>
            <description><![CDATA[A brief look at Import Maps and package.json#imports to support isomorphic JavaScript applications!]]></description>
            <content:encoded><![CDATA[<p>I know <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script/type/importmap" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Import Maps</a> aren&#x27;t all that new, however I&#x27;ve recently been messing around with them in a demo app that is natively using ESModules and it&#x27;s such a nice developer experience!</p>
<p>For those that aren&#x27;t aware, import maps allow you to configure/tell the browser how it should resolve <abbr title="Import specifiers that aren&#x27;t relative and don&#x27;t follow a URL scheme, e.g. `&#x27;react&#x27;`">bare specifiers</abbr> when it encounters them. Here&#x27;s an example in practice:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">&lt;!-- Import Map --&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">script</span><span style="color:#B07D48;--shiki-dark:#BD976A"> type</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">importmap</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">{</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  &quot;imports&quot;: {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    &quot;&lt;bare-specifier&gt;&quot;: &quot;&lt;where-to-resolve-that-import-from&gt;&quot;,</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    &quot;react&quot;: &quot;https://esm.sh/react@19.0.0&quot;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  }</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">script</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span></code></pre>
<p>This import map will &quot;remap&quot; any <code>&quot;react&quot;</code> bare specifier to <code>&quot;https://esm.sh/react@19.0.0&quot;</code>, which is using <a href="https://esm.sh" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">esm.sh</a> to transform any npm package to a compatible ESModule on the fly!</p>
<p>Now we can ship code that looks like this to the browser and it will work like it would in Node.js, Deno, Bun, or your favorite JS runtime!</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">createElement</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> el</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> createElement</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">marquee</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<hr/>
<p>Import Maps are cool and all - but I also wanted to highlight a really cool feature of using them <em>along with</em> <code>package.json#imports</code> within an <abbr title="A collection of code that runs in both a server environment and a client environment, as is usually the case with Server Side Rendering applications">isomorphic application</abbr>.</p>
<p><a href="https://nodejs.org/api/packages.html#subpath-imports" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>package.json#imports</code></a> (the <code>&quot;imports&quot;</code> key within a <code>package.json</code> file) is similar to the import map concept but for Node.js projects. It allows code being run within Node to similarly resolve import specifiers to different locations, here&#x27;s an example mapping <code>#framework/*</code> imports to a specific directory:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">imports</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">    &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">#framework/*</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./framework/*.mjs</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// will be effectively the same as:</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// import {foo} from &#x27;./framework/foo.mjs&#x27;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">foo</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#framework/foo</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span></code></pre>
<p>We can combine these two features to build an isomorphic application, and importantly we can also resolve imports differently based on the environment (e.g. resolve a package that uses Node.js features on the server, and then a stub or alternative on the client)!</p>
<p>I&#x27;ll leave a bit of this as an exercise to the reader, but I do have an <a href="https://github.com/hamlim/simple-react-ssr-framework" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">example codebase here</a> that you can look at to see how it works in practice if you don&#x27;t want to derive the solution yourself üòÖ.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/a-quick-look-at-import-maps.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Recommended Tech Talks]]></title>
            <link>https://matthamlin.me//2024/december/recommended-tech-talks</link>
            <guid>https://matthamlin.me//2024/december/recommended-tech-talks</guid>
            <pubDate>Fri, 06 Dec 2024 22:27:13 GMT</pubDate>
            <description><![CDATA[A collection of tech talks that I regularly re-watch and also recommend to everyone!]]></description>
            <content:encoded><![CDATA[<p>There&#x27;s a number of tech talks that I routinely revisit every once and while and also share frequently with others because I think they&#x27;re so foundational to my career as a web developer.</p>
<p>I figured I&#x27;d write a blog post sharing those talks!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="react-conf-2015---hype">React Conf 2015 - Hype</h3>
<p>Arguably probably my favorite tech talk that I&#x27;ve every watched. It&#x27;s probably sad to say that I return to watch this every once in a while to have my mind blown!</p>
<p>The magic move demo is still wild to think about!</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/z5e7kWSHWTg?si=ZCBLY3nogYHx-OJZ" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerPolicy="strict-origin-when-cross-origin" allowFullScreen=""></iframe>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="scaling-rd-to-thousands-of-people-without-dedicated-qa">Scaling R&amp;D to thousands of people without dedicated QA</h3>
<p>This talk really influenced how I thought about building platforms while I worked at Wayfair, and then in every role since then!</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/O3JpS_kvP0g?si=wCdxjr5UpaQTTGoh" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerPolicy="strict-origin-when-cross-origin" allowFullScreen=""></iframe>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="game-development-caution">(Game) Development Caution</h3>
<p>While this isn&#x27;t a formal talk, it&#x27;s still a really amazing video that I recommend all developers to watch and listen to!</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/LMVQ30c7TcA?si=D6CJtar_sqdMUDij" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerPolicy="strict-origin-when-cross-origin" allowFullScreen=""></iframe>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="bret-victor---inventing-on-principle">Bret Victor - Inventing on Principle</h3>
<p>I don&#x27;t think I need to provide too much of a prelude for this talk - it&#x27;s simply wonderful and gives me a similar vibe as the Hype talk above!</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/PUv66718DII?si=pvMxDtzXViq-q0IW" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerPolicy="strict-origin-when-cross-origin" allowFullScreen=""></iframe>
<hr/>
<p>More coming soon!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/recommended-tech-talks.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Request for a (minimal) RSC Framework]]></title>
            <link>https://matthamlin.me//2024/december/request-for-minimal-rsc-framework</link>
            <guid>https://matthamlin.me//2024/december/request-for-minimal-rsc-framework</guid>
            <pubDate>Sun, 01 Dec 2024 21:03:08 GMT</pubDate>
            <description><![CDATA[Some features and functionality that I'd like within a React Server Component compatible framework.]]></description>
            <content:encoded><![CDATA[<p>Over the past two or so weeks I&#x27;ve been trying a number of different experiments to setup my ideal React Server Component framework. I&#x27;ve heavily used <a href="https://nextjs.org/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Next.js</a> (both in the past and still actively for this blog at the time of writing), however I&#x27;ve wanted to branch out and try a few other solutions in the ecosystem.</p>
<p>However, I still haven&#x27;t found something that offers the features that I&#x27;d really like from a framework. I figured I&#x27;d write up some of these thoughts and maybe nerd snipe someone into creating something that provides these features!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="requirements">Requirements:</h3>
<ul>
<li>Supports React Server Components (with Server Side Rendering)<!-- -->
<ul>
<li>There&#x27;s been a number of discussions around the trade offs with RSC&#x27;s vs traditional SSR or CSR apps, I feel like there&#x27;s still enough benefits of RSC&#x27;s</li>
</ul>
</li>
<li>Deployable on different runtimes<!-- -->
<ul>
<li>Not limited to Bun (for example), can deploy to Vercel, Cloudflare Workers, traditional serverless platforms, etc</li>
</ul>
</li>
<li>Flexibility with the underlying server framework (ideally <code>hono</code> as a default, but ability to swap it out with something else)</li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="features">Features:</h3>
<ul>
<li>Support for &quot;page&quot; and &quot;route&quot; handlers</li>
<li>Filesystem based routing:<!-- -->
<ul>
<li><code>&lt;path&gt;.(page|route).(ts|tsx|js|jsx)</code>
<ul>
<li>e.g. <code>about.page.tsx</code> renders the <code>/about</code> page</li>
</ul>
</li>
<li><code>@not-found.(page|route).(ts|tsx|js|jsx)</code> for 404-style routes</li>
<li><code>@error.(page|route).(ts|tsx|js|jsx)</code> for 500-style routes</li>
</ul>
</li>
<li>Access to entire <code>Request</code>, <code>Response</code>, and <code>context</code> (HonoContext) values<!-- -->
<ul>
<li>Either from something like an <code>AsyncLocalStore</code> or as arguments/props to the handlers</li>
</ul>
</li>
<li>Support for Tailwind / bring your own favorite CSS framework</li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="example">Example:</h3>
<p>I&#x27;ve created (an obviously non-working) codebase showcasing these features, which I suppose could be used as an example by someone if they were to create a framework to support these features!</p>
<p><a href="https://github.com/hamlim/minimal-rsc-framework-demo" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">minimal-rsc-framework-demo</a>.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/request-for-minimal-rsc-framework.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[My Updated Obsidian Task Management]]></title>
            <link>https://matthamlin.me//2024/november/my-updated-obsidian-task-management</link>
            <guid>https://matthamlin.me//2024/november/my-updated-obsidian-task-management</guid>
            <pubDate>Tue, 26 Nov 2024 01:23:43 GMT</pubDate>
            <description><![CDATA[A quick update on how I manage my tasks within Obsidian!]]></description>
            <content:encoded><![CDATA[<p>I previously wrote about how I started to manage my todos within Obsidian directly <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/july/simple-obsidian-task-management">within this post</a>, however I&#x27;ve tweaked the workflow just a bit and that previous post also outlined a few open questions I had (mostly for myself) that I think I have some answers to now as well!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="updates">Updates</h2>
<p>The previous setup involved a decent amount of manual task management (manually adding tasks to specific sections within a single note, manually sorting them, etc). The primary update I made was automating that bit of the workflow using the <a href="https://github.com/chhoumann/quickadd" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">QuickAdd</a> plugin.</p>
<p>This plugin lets you create a few templates and can automatically insert the content provided into specific notes with other content added around it.</p>
<p>I&#x27;ve setup the plugin with a few specific templates for different task categories, at the time of writing those are:</p>
<ul>
<li>Personal Tasks (day to day things, e.g. &quot;mail package to someone&quot; etc)</li>
<li>Project Tasks (tasks related to specific side projects)</li>
<li>Work Tasks (tasks related to my work)</li>
<li>Writing Tasks (Blog post ideas that I have)</li>
</ul>
<p>The plugin then appends the content of the task into an <code>[[Inbox]]</code> note - this is a single catch-all note that contains all my tasks (the above categories only apply specific tags to each task to then later be grouped as noted below).</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>After a few months of using this workflow - I actually found that this single <code>[[Inbox]]</code> note was starting to really slow down during syncs across my devices.</p><p>I&#x27;ve now opted to semi-regularly manually copy the done/cancelled tasks and move them to a <code>[[Inbox Archive]]</code>  note.</p></div>
<p>Then I primarily use a <code>[[Tasks]]</code> note as the primary tool for checking my tasks and updating their statuses. This note is using the <a href="https://publish.obsidian.md/tasks/Introduction" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Tasks</a> plugin and it&#x27;s <a href="https://publish.obsidian.md/tasks/Queries/About+Queries" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>queries</code> feature</a> to group my categorized tasks (which is pretty similar to my previous setup in the above mentioned blog post).</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="answers-to-open-questions">Answers to Open Questions</h2>
<blockquote>
<p>I haven&#x27;t exactly ironed out how to best add tasks from my phone (I&#x27;ve been opening up the <code>Tasks.md</code> note and manually adding it), I think in my ideal world I&#x27;d use some kind of quick capture flow to easily add tasks and have them be sorted into the correct section in the note when adding them from my phone.</p>
</blockquote>
<p>The <a href="https://github.com/chhoumann/quickadd" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">QuickAdd</a> plugin has effectively solved this for me, on my phone I need to do the following:</p>
<ul>
<li>Swipe down to open the command palette</li>
<li>Type <code>QuickAdd</code></li>
<li>Select the type of task to add</li>
<li>Type the task</li>
<li>Submit</li>
</ul>
<p>Sure it&#x27;s a bit more steps than it could be - but it&#x27;s a pretty slick flow compared to what it used to be!</p>
<blockquote>
<p>I haven&#x27;t figured out a good workflow for managing the long term of what happens to a task when its completed? Should it stick around for several months (or longer)? Or should I routinely clean them up?</p>
</blockquote>
<p>See my callout above - at this time I&#x27;m going to manually move over old tasks to the <code>[[Inbox Archive]]</code>.</p>
<hr/>
<p>All in all - this workflow still works pretty nicely, and I think the benefits of being able to link off to other notes from my tasks still provides the killer feature for me and makes it hard to change to a dedicated tasks app.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/my-updated-obsidian-task-management.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Bluesky Tips and Tools]]></title>
            <link>https://matthamlin.me//2024/november/bluesky-tips-and-tools</link>
            <guid>https://matthamlin.me//2024/november/bluesky-tips-and-tools</guid>
            <pubDate>Mon, 25 Nov 2024 18:48:50 GMT</pubDate>
            <description><![CDATA[A (running) collection of Bluesky tips, tools, packages, and other misc things!]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve been exploring the <a href="https://bsky.social/about" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Bluesky</a> a lot as of late, fully moving over from Twitter to Bluesky as my go-to social media website, and I figured I should highlight some of the cool things I&#x27;ve found about it so far!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="domain-names">Domain Names</h3>
<p>One of the coolest parts of Bluesky is that you are a domain name on the network, which means you can take your personal domain name (or any random one you might own) and use it as your handle!</p>
<a href="https://bsky.app/profile/robertl.in/post/3l7wpu4rrha2q">https://bsky.app/profile/robertl.in/post/3l7wpu4rrha2q</a>
<p>Tools like Vercel and Netlify now offer quick options to use a domain as your username on Bluesky too!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="intent-links">Intent Links</h3>
<p>Twitter used to (maybe still does) support &quot;intent links&quot;, essentially plain old anchor links that will pre fill some content in a post, or take some action for the user when they click on the link. Bluesky supports the same!</p>
<a href="https://bsky.app/profile/cory.laviska.com/post/3lad7ydpx2j2j">https://bsky.app/profile/cory.laviska.com/post/3lad7ydpx2j2j</a>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">a</span><span style="color:#B07D48;--shiki-dark:#BD976A"> href</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">https://bsky.app/intent/compose?text=Hello</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  Share on Bluesky</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">a</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="open-source-tools">Open Source Tools:</h2>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="profile-widgets">Profile Widgets</h3>
<p>There&#x27;s a neat <a href="https://bsky-widget.srbh.dev/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>bsky-widget</code></a> Web Component open sourced by <a href="https://bsky.app/profile/srbh.dev" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Saurabh Daware</a>!</p>
<a href="https://bsky.app/profile/srbh.dev/post/3lah67bbttn2t">https://bsky.app/profile/srbh.dev/post/3lah67bbttn2t</a>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="raycast-extension">Raycast Extension:</h3>
<p>There&#x27;s even a <a href="https://www.raycast.com/dharamkapila/bluesky" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Raycast extension</a> which allows you to view your feeds, make posts, and interact with the app entirely from Raycast (making you feel productive while you&#x27;re checking in on your friends!)</p>
<a href="https://bsky.app/profile/ped.ro/post/3laozswp32s22">https://bsky.app/profile/ped.ro/post/3laozswp32s22</a>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="post-embeds">Post Embeds:</h3>
<p>There&#x27;s a number of open source <code>Post</code> components available, so far I&#x27;ve seen these ones:</p>
<ul>
<li><a href="https://github.com/mary-ext/bluesky-embed" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>bluesky-embed</code></a></li>
<li><a href="https://darn.es/bluesky-post-web-component/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>bluesky-post</code></a></li>
</ul>
<hr/>
<p>There&#x27;s also this <a href="https://github.com/fishttp/awesome-bluesky" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">awesome-bluesky</a> GitHub repo that lists a ton of other tools that you should check out!</p>
<hr/>
<p>What other neat tips, tools or open source packages have you found for Bluesky? <a href="https://bsky.app/intent/compose?text=Hey%20%40matthamlin.me%2C%20I%20found%20this%20Bluesky%20tool%2Ftip%3A%20" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Share them with me on Bluesky!</a></p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/bluesky-tips-and-tools.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The Bookkeeping Pattern]]></title>
            <link>https://matthamlin.me//2024/october/the-bookkeeping-pattern</link>
            <guid>https://matthamlin.me//2024/october/the-bookkeeping-pattern</guid>
            <pubDate>Fri, 25 Oct 2024 15:40:52 GMT</pubDate>
            <description><![CDATA[A quick look at a small but powerful pattern I've been leveraging as of late!]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve found myself lately working with a decent number of <code>Array.prototype.reduce</code> and <code>useReducer</code> uses. With both of these, I&#x27;ve been reaching for what I&#x27;m going to call the &quot;bookkeeping pattern&quot;<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>Before diving into the code, I wanted to step back a bit and outline when and where this pattern could be useful.</p>
<p>Let&#x27;s start with a simple example, imagine you have an array of strings, that can contain some duplicates, and we want to narrow it down to only an array of unique strings. Sure, I know you could also <code>import {uniq} from &#x27;lodash&#x27;</code> and be done with it (or use <code>[...new Set([...array])]</code>), but let&#x27;s say that we wanted to implement this logic via <code>Array.prototype.reduce</code> for a minute!</p>
<p>In order to remove the duplicates, we need some way to know if we&#x27;ve &quot;seen&quot; a value before, while we could use some external value for that, we could also stash that value within the result of our reducer. Essentially we manage our own bookkeeping within the reduce call!</p>
<p>Let&#x27;s look at some code:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">fruits</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> [</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">apple</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">banana</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">kiwi</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">strawberry</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">apple</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">	// First path, maintaining the bookkeeping separate from the reduce:</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	let </span><span style="color:#B07D48;--shiki-dark:#BD976A">seen</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new </span><span style="color:#59873A;--shiki-dark:#80A665">Set</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">	let </span><span style="color:#B07D48;--shiki-dark:#BD976A">reducedFruits</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fruits</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">reduce</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">acc</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fruit</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	  if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">seen</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">has</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">fruit</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">	    seen</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">add</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">fruit</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">	    acc</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">push</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">fruit</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	  }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">	  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> acc</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">	},</span><span style="color:#999999;--shiki-dark:#666666"> []);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Second path - bake in the bookkeeping</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// __within__ the reduce accumulator!</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">reducedFruits</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fruits</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">reduce</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  (</span><span style="color:#B07D48;--shiki-dark:#BD976A">acc</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fruit</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">acc</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">seen</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">has</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">fruit</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      acc</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">seen</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">add</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">fruit</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      acc</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">fruits</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">push</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">fruit</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> acc</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Note: Our default accumulator changed shape!</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    fruits</span><span style="color:#999999;--shiki-dark:#666666">: [],</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    seen</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#AB5959;--shiki-dark:#CB7676">new</span><span style="color:#59873A;--shiki-dark:#80A665"> Set</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Note: We need to grab the value we care about from the reduce call</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  .</span><span style="color:#B07D48;--shiki-dark:#BD976A">fruits</span><span style="color:#999999;--shiki-dark:#666666">;</span></span></code></pre>
<p>Alright, you might be saying that this looks like overkill for this example, clearly that <code>[...new Set(fruits)]</code> would be far easier and I would agree for this use case.</p>
<p>Let&#x27;s talk about a slightly more difficult use case where I&#x27;ve seen this pattern become really useful: managing incremental form submissions within React with <code>useActionState</code>!</p>
<p>Imagine we have a multi-step form, something like a progressive disclosure experience where you enter your name, then your email, and maybe finally a message for example.</p>
<p>We <em>could</em> manage this form state all client side with <code>useState</code>&#x27;s or a <code>useReducer</code>, and then perform a manual form submission (either mimicking it with <code>fetch</code>, or calling <code>form.requestSubmit()</code>), but we could also build it in a way that should work without JS as well!</p>
<p>Enter <code>useActionState</code> and Server Actions in React, we can build a multi-step form building on the concept of accumulating some state within our reducer (server action)!</p>
<p>In our case, we can stash the <code>formData</code> value on our state so we can read back from it within components to re-fill the fields in the form after a submission.</p>
<p>You can test this out in <a href="https://multi-step-form-xi-black.vercel.app/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this minimal demo app</a>, the source for that app is available <a href="https://github.com/hamlim/multi-step-form" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">in this repo</a>.</p>
<p>The gist boils down to both the server action:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> State</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  status</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">name</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666"> | </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">email</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666"> | </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">note</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666"> | </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">error</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666"> | </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">complete</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  formData</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">FormData</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> incrementalSendAction</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  prevState</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">State</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  formData</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">FormData</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Promise</span><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">State</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">use server</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  switch</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">prevState</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">status</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    case</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">name</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">get</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">back</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">true</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        return</span><span style="color:#999999;--shiki-dark:#666666"> { </span><span style="color:#998418;--shiki-dark:#B8A965">status</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">name</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> { </span><span style="color:#998418;--shiki-dark:#B8A965">status</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">email</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    case</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">email</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">get</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">back</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">true</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        return</span><span style="color:#999999;--shiki-dark:#666666"> { </span><span style="color:#998418;--shiki-dark:#B8A965">status</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">name</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> { </span><span style="color:#998418;--shiki-dark:#B8A965">status</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">note</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    case</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">note</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">get</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">back</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">true</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        return</span><span style="color:#999999;--shiki-dark:#666666"> { </span><span style="color:#998418;--shiki-dark:#B8A965">status</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">email</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // regular submission after filling out all the fields</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // validate the form data</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">      let </span><span style="color:#999999;--shiki-dark:#666666">{</span><span style="color:#B07D48;--shiki-dark:#BD976A"> name</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> email</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> note</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Object</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">fromEntries</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">entries</span><span style="color:#999999;--shiki-dark:#666666">());</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">name</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !</span><span style="color:#B07D48;--shiki-dark:#BD976A">email</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !</span><span style="color:#B07D48;--shiki-dark:#BD976A">note</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        return</span><span style="color:#999999;--shiki-dark:#666666"> { </span><span style="color:#998418;--shiki-dark:#B8A965">status</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">error</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // do something with the form data</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // success!</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> { </span><span style="color:#998418;--shiki-dark:#B8A965">status</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">complete</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">, </span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666"> };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    default</span><span style="color:#999999;--shiki-dark:#666666">:</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>and the usage of <code>useActionState</code>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> action</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useActionState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">incrementalSendAction</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> initialState</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p>From this - we can access the previous submitted <code>formData</code> via <code>state.formData</code>, allowing us to re-fill the inputs with the previous submitted value:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Input</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  name</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">name</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // undefined on first render, filled in after first submission</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  defaultValue</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">formData</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">get</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">name</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">/&gt;</span></span></code></pre>
<p>Now we get all the benefits:</p>
<ul>
<li>Minimal state management<!-- -->
<ul>
<li>What state there is, lives on the server</li>
</ul>
</li>
<li>The form works great with and without JavaScript</li>
<li>The rendering logic is easy to reason about</li>
</ul>
<p>The beauty of this also is that it&#x27;s &quot;Just React&quot;‚Ñ¢ and a minimal pattern built on top of the concepts we learned with <code>Array.prototype.reduce</code>!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Although I&#x27;m sure that there is an existing name for this concept/pattern - if you know what it is called reach out and I&#x27;ll update my blog post!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/the-bookkeeping-pattern.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Building a Custom Ghostty Theme]]></title>
            <link>https://matthamlin.me//2024/october/building-a-custom-ghostty-theme</link>
            <guid>https://matthamlin.me//2024/october/building-a-custom-ghostty-theme</guid>
            <pubDate>Tue, 22 Oct 2024 09:22:32 GMT</pubDate>
            <description><![CDATA[How to generate a custom Ghostty theme based on any iterm2 theme!]]></description>
            <content:encoded><![CDATA[<div class="rounded-lg bg-muted px-4 py-0.5"><p><strong>Update Oct. 25th, 2024:</strong></p><p><del>There&#x27;s a bug (see <a href="https://github.com/ghostty-org/ghostty/issues/2495" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">issue here (if you have access)</a>), where custom themes are blown away when upgrading the application, hopefully this is resolved in the future!</del> <em>Edit:</em> You can store custom themes within <code>~/.config/ghostty/themes</code>!</p><p><strong>Update Oct. 24th, 2024:</strong></p><p>I&#x27;ve since created a small repo with the pre-converted Vitesse themes for Ghostty <a href="https://github.com/hamlim/vitesse-ghostty-theme" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">here</a>!</p></div>
<p>I recently got access to <a href="https://mitchellh.com/ghostty" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Ghostty</a> (a new terminal emulator that is still in private beta) after waiting several months in the Discord server, and as I was setting it up I noticed that my go-to theme for my terminal and code editor (<a href="https://vscodethemes.com/e/antfu.theme-vitesse/vitesse-light?language=javascript" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Vitesse Light</a> by <a href="https://antfu.me/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Anthony Fu</a>) wasn&#x27;t available as one of the built-in themes.</p>
<p>After scouring the web and the discord server, I couldn&#x27;t really find a good guide for how to build a custom theme for the terminal, so I set out to attempt to manually make the theme.</p>
<p>Fortunately I stumbled upon the template / converter within the <a href="https://github.com/mbadolato/iTerm2-Color-Schemes/blob/master/tools/templates/ghostty" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">iterm2-color-schemes repo</a>, however I didn&#x27;t really want to clone a repo to run a python script in order to transform the theme to the proper format.</p>
<p>Instead, what I opted to do was reach for <a href="https://v0.dev/chat" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">v0</a> to build a minimal UI to paste in iTerm2 <code>xml</code> formatted color themes and have it spit out the proper Ghostty theme.</p>
<p>I downloaded the Vitesse Light iterm2 theme file from this <a href="https://github.com/HiDeoo/iTerm2-theme-vitesse" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">iTerm2-theme-vitesse repo</a>, and then pasted it into the UI that v0 generated for me and got the theme in the right format.</p>
<p>From there, I created a new file within the custom themes directory for the Ghostty app (on mac for me this was in <code>~/.config/ghostty/themes</code>), and pasted in the theme.</p>
<p>It immediately started showing up when I viewed the built in themes, and works correctly when I set my theme within my config to the new file I created!</p>
<p>Here&#x27;s that little UI component that v0 created for me so you can convert themes inline right on this blog post! (if you run into any bugs, please do reach out and let me know!)</p>
<div data-slot="card" class="bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm w-full max-w-3xl"><div data-slot="card-header" class="@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6"><div data-slot="card-title" class="leading-none font-semibold">iTerm Color Scheme Parser</div><div data-slot="card-description" class="text-muted-foreground text-sm">Paste your iTerm color scheme XML below to extract colors</div></div><div data-slot="card-content" class="px-6 space-y-4"><textarea data-slot="textarea" class="border-input placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive dark:bg-input/30 flex field-sizing-content w-full rounded-md border bg-transparent px-3 py-2 text-base shadow-xs transition-[color,box-shadow] outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50 md:text-sm min-h-[200px]" placeholder="Paste your iTerm color scheme XML here..."></textarea><button data-slot="button" class="inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*=&#x27;size-&#x27;])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive bg-primary text-primary-foreground shadow-xs hover:bg-primary/90 h-9 px-4 py-2 has-[&gt;svg]:px-3">Parse Colors</button><div class="grid grid-cols-1 md:grid-cols-2 gap-4"></div></div></div>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/building-a-custom-ghostty-theme.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[TSLite]]></title>
            <link>https://matthamlin.me//2024/october/tslite</link>
            <guid>https://matthamlin.me//2024/october/tslite</guid>
            <pubDate>Sat, 19 Oct 2024 13:53:49 GMT</pubDate>
            <description><![CDATA[A proposal for a minimal variant of TypeScript!]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve been thinking a bit about TypeScript as of late, primarily motivated by TypeScript&#x27;s <a href="https://devblogs.microsoft.com/typescript/announcing-typescript-5-5-beta/#isolated-declarations" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Isolated Declarations</a> feature. Mainly I&#x27;ve been thinking about what a new and fresh variant of typed JavaScript could look like<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>I&#x27;ve mostly narrowed it down to the following feature set that I&#x27;m tentatively calling TSLite (kinda like SQLite to SQL), to note though - this is only just a concept at this point in time, I haven&#x27;t built anything formal for this idea but I might consider leveraging AI to help me build some kind of type checking tool possibly!</p>
<p>Features (or lack of features):</p>
<ul>
<li>Static types are enforced for variables and functions<!-- -->
<ul>
<li>Essentially no support for type inference</li>
</ul>
</li>
<li>Removing some TypeScript specific features like <code>namespace</code>&#x27;s, <code>enum</code>&#x27;s, and other TS flavored features (like TypeScript decorators)<!-- -->
<ul>
<li>It should strictly be a static superset on JavaScript, with no changes to how the code will work at runtime</li>
</ul>
</li>
<li>No <code>any</code> type, instead prefer <code>unknown</code></li>
</ul>
<p>I think with these constraints you could design a fairly minimal type checking system that could be as efficient (maybe more efficient) than TypeScript is today.</p>
<p>I think the strict &quot;no inference&quot; rule is probably the most constraining for most developers though, type inference is a really nice feature of TypeScript but it leads to a decent amount of ambiguity.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="footnotes">Footnotes:</h2>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->While I&#x27;m not too optimistic in a new typed JavaScript language taking off and gaining as much popularity as either Flow type of TypeScript - it&#x27;s still an interesting thought exercise.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/tslite.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Monorepo Tips and Tricks]]></title>
            <link>https://matthamlin.me//2024/october/monorepo-tips-and-tricks</link>
            <guid>https://matthamlin.me//2024/october/monorepo-tips-and-tricks</guid>
            <pubDate>Mon, 07 Oct 2024 14:38:08 GMT</pubDate>
            <description><![CDATA[Sharing a few core recommendations when working within monorepos to make your life easier!]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve been noodling on monorepos for a while now, and I wasn&#x27;t sure how I wanted to start sharing some of my thoughts on managing monorepos and making it easier to work within them.</p>
<p>For context, I helped setup and manage a large scale web monorepo while I was at Wayfair, and I&#x27;ve done the same at Fireworks as well. While I don&#x27;t claim to know everything about monorepos, I have a number of years working within them with a large number of contributors (and 100&#x27;s of contributions to the main branch per week on average).</p>
<p>This post (and future posts about monorepos), focuses in on &quot;node monorepos&quot;, e.g. those that use package managers like <code>npm</code>, <code>bun</code>, <code>yarn</code>, <code>pnpm</code>, <code>deno</code>, etc and where the code uses JavaScript/TypeScript, or otherwise usually relies on <code>node_modules</code>. However some of these recommendations may apply to other kinds of monorepos as well.</p>
<p>I plan to write a bit more about monorepos in the future, but I figured I should start with some top of mind tips and tricks (really <a href="https://www.youtube.com/watch?v=k9ojK9Q_ARE" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">just a set of recommendations</a>). These are presented in no particular order - if you have any questions on these feel free to reach out!</p>
<hr/>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="dependency-management">Dependency Management</h2>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="1-always-specify-dependencies-within-the-workspace-that-depend-on-them">1. Always specify dependencies within the workspace that depend on them</h3>
<p>Often when working within a monorepo - some dependencies may have been resolved by other workspaces within the repo. For example, if you have a React application and several libraries used within that application, the <code>react</code> dependency is most likely installed by either the app or the libraries. This can make it really easy to accidentally forget to properly declare a dependency within a new workspace.</p>
<p>Your tests, or other flows may &quot;just work&quot;, however you&#x27;ve created an implicit contract that could break depending on how your package manager resolves dependencies, or if you remove that dependency from other workspaces.</p>
<p>The same applies for in-monorepo dependencies, e.g. if you have a workspace that depends on another workspace within the repo - you should specify that as a dependency as well, usually following the format of <code>&quot;workspace-pkg&quot;: &quot;workspace:*&quot;</code> which roughly means resolve the <code>workspace-pkg</code> dependency from the local workspaces at any version. See below for managing versions of workspace dependencies!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="2-in-repo-dependencies-must-always-be-one-way">2. In-repo dependencies must always be one way</h3>
<p>Circular dependencies should always be avoided - even if you&#x27;re not working within a monorepo you want to avoid introducing circular dependencies because they could lead to undefined behavior at run time, or just generally introduce confusion for contributors.</p>
<p>If you have some code in <code>pkg-a</code> (which depends on <code>pkg-b</code>), that <code>pkg-b</code> would like to use - you should extract that code to a shared library that both can depend on (or copy it into both libraries).</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="3-workspaces-should-build-themselves">3. Workspaces should build themselves</h3>
<p>This one is a bit of a üå∂ spicy take üå∂, however I strongly believe that workspaces should have their own build steps, and other workspaces depending on those packages should consume the built artifacts.</p>
<p>This one is particularly important when working with TypeScript, TypeScript doesn&#x27;t usually understand package boundaries and will continue type checking down through code within dependencies. Not only does this mean that TS will do more work than is necessary - it can sometimes also lead to weird race conditions or generate definition files within the source directory<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>The only solid way I&#x27;ve found to avoid this pitfall is two changes:</p>
<ul>
<li>Configure <code>skipLibCheck</code> within <code>tsc</code>, <em>and</em></li>
<li>Build libraries to some kind of <code>dist</code> directory</li>
</ul>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="on-versioning">On Versioning</h2>
<p>There&#x27;s a number of thoughts I have on versioning within monorepos.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="1-pin-external-dependencies">1. Pin External Dependencies</h3>
<p>First and foremost - you should always <strong>pin external dependencies</strong> to a specific version. The only case where you shouldn&#x27;t pin a dependency, is when you&#x27;re publishing a package to an external registry (e.g. npm or jsr), and that dependency is a <code>peerDependency</code>.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="2-always-point-to-the-latest-version-of-local-dependencies">2. Always point to the latest version of local dependencies</h3>
<p>I don&#x27;t recommend using versioning for internal dependencies, for example if you have two packages in your repo <code>pkg-a</code> and <code>pkg-b</code>, and <code>a</code> depends on <code>b</code>, you don&#x27;t need to specify a version for <code>b</code> within <code>a</code>&#x27;s <code>package.json</code>. You can instead use <code>workspace:*</code> to depend on any version of the package, which should resolve the &quot;current version&quot; of that dependency within the repo. This would look like the following <code>package.json</code>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">name</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">pkg-a</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">dependencies</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">    &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">pkg-b</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">workspace:*</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>It&#x27;s worth noting however, that just because you always consume the latest version of a local dependency, doesn&#x27;t mean that you can leverage versioning as a way to indicate historical significance to changes to the workspace.</p><p>I&#x27;ve seen teams adopt a healthy versioning and changelog process for monorepo packages in the past that helps to provide context on what changes have happened and why (with more nuance than git commit history).</p></div>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="3-adopt-a-one-version-rule">3. Adopt a one version rule</h3>
<p>This is something I become familiar with while at Wayfair, and have since tried to get others to adopt it as well. The concept comes from a paper by engineers at Google, and boils down to:</p>
<blockquote>
<p>For every dependency in [a] repository, there must be only one version of that dependency to choose.</p>
</blockquote>
<p>(originally from the book <a href="https://www.google.com/books/edition/_/V3TTDwAAQBAJ?hl=en" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Software Engineering at Google</a>)</p>
<p>I&#x27;ve published the <a href="https://github.com/hamlim/one-version" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>one-version</code></a> npm package to help enforce this constraint across monorepos with any package manager.</p>
<p>The gist here is to avoid weird edge cases where some dependencies may resolve to different versions - this has been known to cause issues with popular packages like React.</p>
<p>While this may make it difficult to tackle version upgrades on larger monorepos - the consistency afforded by using a single version for each dependency makes this worthwhile.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->While at Wayfair, we ran into one of these issues, we were seeing inconsistent failures during our CI pipelines, where the associated <code>.d.ts</code> files within a dependency would sometimes be present and sometimes they wouldn&#x27;t. We tracked this down to a race condition when performing builds and also checking types in parallel across workspaces. Enforcing builds + <code>skipLibCheck</code> prevented this bug for us.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/monorepo-tips-and-tricks.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Offload Complexity, Don't Offload Learning]]></title>
            <link>https://matthamlin.me//2024/october/offload-complexity</link>
            <guid>https://matthamlin.me//2024/october/offload-complexity</guid>
            <pubDate>Tue, 01 Oct 2024 11:21:17 GMT</pubDate>
            <description><![CDATA[A rough mental model for how you should be leveraging AI as a tool for your own growth]]></description>
            <content:encoded><![CDATA[<p>A couple of months ago I read <a href="https://stephango.com/understand" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this excellent blog post</a> by <a href="https://stephango.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Steph Ango</a> (better known as <a href="https://x.com/kepano" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Kepano on Twitter</a>), immediately this post struck a chord for me specifically while thinking about leveraging AI as a tool.</p>
<p>The post talks about a parasite and it&#x27;s impact on us over time. Specifically this parasite is the act of delegating understanding, there are many parasites that take on the same format though (e.g. offloading your competitive advantage as a business). Broadly speaking, technology can sometimes be this same parasite masquerading as something beneficial - and that applies to how we leverage AI.</p>
<p>Fundamentally I look at AI as a tool for folks to leverage to help solve their problems, in the same way that most programmers look at frameworks or libraries. However, just as you and I would spend time evaluating the [[right tool for the job]], we should also carefully evaluate how we use AI.</p>
<p>Specifically - we should look to offload complexity to AI, but to not offload learning.</p>
<p>A similar mental model that folks have probably heard of before is maintaining a moat if you are a business. The moat represents your competitive advantage, it is what a business does (or maybe explicitly doesn&#x27;t do), that makes it better than their competitors. It is the <a href="https://en.wikipedia.org/wiki/KFC_Original_Recipe" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">11 herbs and spices</a>, or the <a href="https://en.wikipedia.org/wiki/Coca-Cola_formula#Secret_formula_on_display_at_World_of_Coca-Cola" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">secret recipe</a>.</p>
<p>If a business were to offload that competitive advantage to some other provider, or to another company - they&#x27;d cease to be a competitor within the market and others would soon take over.</p>
<p>In the same way - if you as an individual offload opportunities you have to learn, grow, or excel in your own - you will miss the follow on opportunities for greater achievements. This is why we should look to leveraging AI<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup> as a tool to be used in some scenarios and not in others.</p>
<p><em>Since most of my audience for this blog are developers of some sort - I&#x27;ll try to relate this to development concepts üôÇ.</em></p>
<p>Imagine you&#x27;re trying to learn game development, including the core pieces required to build a game. You probably wouldn&#x27;t immediately jump to using a higher level game framework to make the game, you&#x27;d most likely want to start from the fundamentals and build up your knowledge along the way.</p>
<p>Similarly if you&#x27;re looking to learn about web servers (think HTTP, TCP, routing, etc), you probably won&#x27;t want to start with using a framework like <a href="https://expressjs.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Express</a> or <a href="https://gin-gonic.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Gin</a> and instead you&#x27;ll again want to start from the basics that your programming language of choice supports.</p>
<p>However - if you&#x27;re building a website to sell furniture for example - you&#x27;ll probably won&#x27;t want to dive into the basics of HTTP, TCP, and all the other concepts related to web hosting, and instead you&#x27;ll reach for a framework that abstracts that complexity away from you.</p>
<p>In the same vein - you should look to focus on the desired outcome (your competitive advantage, or your core learning/growth opportunities), and leverage AI to solve the ancillary complexity.</p>
<p>While in some of these examples the decision criteria on when and where to use AI is maybe clear, it won&#x27;t always be like that in practice. Sometimes it&#x27;s hard to tell if a specific task or project will provide learning opportunities for you, or will be secretly hiding your competitive advantage, or if it is just filled with monotonous work that doesn&#x27;t let you grow.</p>
<details class="border border-green-400 rounded-md p-4 bg-green-50 dark:bg-green-900/20"><summary class="font-bold cursor-pointer underline underline-offset-1 decoration-wavy decoration-2 decoration-green-400">TL;DR</summary><div class="py-4">Offload Complexity, Don&#x27;t Offload Learning!</div></details>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->This can be said of technology more broadly as well!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/offload-complexity.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Next.js with Deno v2]]></title>
            <link>https://matthamlin.me//2024/september/nextjs-with-deno-v2</link>
            <guid>https://matthamlin.me//2024/september/nextjs-with-deno-v2</guid>
            <pubDate>Fri, 20 Sep 2024 14:56:52 GMT</pubDate>
            <description><![CDATA[This is a quick post noting that Next.js should now work with Deno v2!]]></description>
            <content:encoded><![CDATA[<p><a href="https://deno.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Deno</a>, an alternative runtime to Node and Bun, is about to release it&#x27;s v2 version (it&#x27;s available <a href="https://deno.com/blog/v2.0-release-candidate" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">now as a release candidate</a>, and you can upgrade to it via <code>deno upgrade rc</code>).</p>
<p>Along with several other changes, this new release should now support various frameworks that previously either didn&#x27;t work at all or only barely worked in some cases. Fortunately this now means that we should be able to use <a href="https://nextjs.org/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Next.js</a> with Deno!</p>
<p>I tried this out earlier today with the latest release candidate for v2, and got it mostly working.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="steps">Steps:</h3>
<ol>
<li>Install Deno if you don&#x27;t have it installed already</li>
</ol>
<p>I&#x27;d recommend following the docs here to install Deno on your system: <a href="https://deno.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://deno.com/</a></p>
<ol start="2">
<li>Upgrade to the <code>rc</code> version</li>
</ol>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">deno</span><span style="color:#B56959;--shiki-dark:#C98A7D"> upgrade</span><span style="color:#B56959;--shiki-dark:#C98A7D"> rc</span></span></code></pre>
<p>Don&#x27;t worry - you should be able to downgrade to the stable release by running <code>deno upgrade</code> (<strong>without</strong> the <code>rc</code> flag) and it will go back to the 1.46.x release.</p>
<ol start="3">
<li>Init a new Next.js app</li>
</ol>
<p>You probably could migrate an existing app - but in this case I just spun up a new one:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">deno</span><span style="color:#B56959;--shiki-dark:#C98A7D"> run</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -A</span><span style="color:#B56959;--shiki-dark:#C98A7D"> npm:create-next-app</span></span></code></pre>
<p>This will run the binary associated with the <code>create-next-app</code> package published to the NPM registry. It&#x27;s similar to <code>npx create-next-app</code> or <code>bunx create-next-app</code>, etc.</p>
<p><strong>Note:</strong> Unfortunately at the time of writing, <code>create-next-app</code> will use <code>npm</code> to install the initial dependencies instead of using <code>deno install</code>. So you&#x27;ll most likely want to do the following:</p>
<ul>
<li>Let the <code>npm install</code> step finish</li>
<li>Remove <code>package-lock.json</code> (e.g. <code>rm package-lock.json</code>)</li>
<li>Run <code>deno install</code> to re-install the packages via Deno instead</li>
</ul>
<ol start="4">
<li>Run the app!</li>
</ol>
<p>You can then run the app using <code>deno run dev</code> like you would with other node script runners (e.g. <code>bun</code>, <code>npm</code>, <code>pnpm</code>, <code>yarn</code>, etc).</p>
<p>To verify that the app is using Deno instead of Node, you can add some code to your <code>layout.tsx</code>  or <code>page.tsx</code> files logging something from the <code>Deno</code> global, e.g.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// should print something like 2.0.0-rc.4</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">console</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">log</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">Deno</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">version</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">deno</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="notes">Notes:</h3>
<p>At the moment I haven&#x27;t been able to get <code>deno check ./app/layout.tsx</code> (or other Next.js files) working correctly, it seems like Deno isn&#x27;t able to properly resolve various Next built in files like <code>next/font</code>, <code>next/headers</code>, <code>next/link</code>, etc.</p>
<p>There seems to be <a href="https://github.com/vercel/next.js/issues/46078" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this issue in the Next.js repo</a> tracking some part of this, but it might not be resolved soon.</p>
<hr/>
<p>Have you tried out Next.js with Deno? What were some of your take aways / notes / rough edges that you&#x27;ve run into?</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/nextjs-with-deno-v2.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[More Thoughts on Dogfooding]]></title>
            <link>https://matthamlin.me//2024/september/more-thoughts-on-dogfooding</link>
            <guid>https://matthamlin.me//2024/september/more-thoughts-on-dogfooding</guid>
            <pubDate>Mon, 09 Sep 2024 10:31:49 GMT</pubDate>
            <description><![CDATA[Even more thoughts on dogfooding!]]></description>
            <content:encoded><![CDATA[<p>After posting about <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/august/dogfooding">Dogfooding</a> the other week (which if you haven&#x27;t read yet I recommend doing so now, it&#x27;s really a short read), one of my <a href="https://runtimerundown.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">favorite development focused podcast shows</a> <a href="https://runtimerundown.com/episodes/dogfooding" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">covered the same exact topic</a> while reviewing another blog post on the topic.</p>
<p>After both listening to the above episode and also talking with <a href="https://scottykaye.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Scott Kaye</a> about the topic, there were a number of interesting takeaways that I had:</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="new-customers">New Customers</h3>
<p>Dogfooding is great at improving the product for existing customers, but what about attracting and improving the conversion for new customers?</p>
<p><a href="https://scottykaye.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Scott</a> got me thinking about this more.</p>
<p>Dogfooding can still be a useful exercise for attracting new users, see for example the note from <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/august/dogfooding">my original post</a> on how <a href="https://graphite.dev" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Graphite</a> forces their employees to go back through the account creation flow every so often by deleting their account on a scheduled basis.</p>
<p>Famously also, I think either Stripe or Shopify have shared that they have new hires build some kind of product using their offering (usually focusing on a specific part of their offering). They then have these new hires feed back in improvements and fixes to make their feature better for others and also improved documentation.</p>
<p>The key insight I think is to make sure to play the role of a new user as part of the dogfooding - often this means having you start fresh without an account, but it could involve other aspects too!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="in-combination-with-user-feedback">In combination with user feedback</h3>
<p>From the episode, they talked about collecting user feedback - while I talked briefly about this in the previous post as well - I wanted to re-iterate that dogfooding alone won&#x27;t magically make your product/feature better across all axes.</p>
<p>One pitfall of only dogfooding and not listening to real customers is that you may end up building a bit of a monoculture or a single solution to a subset of the problems that your customers may have. Sure the resulting product may fit all your needs, but you may also have greatly reduced the percentage of potential users in the process.</p>
<p>I believe that you should do both - dogfood actively but also listen to and act on customer feedback. While sometimes it can be difficult to actually understand what users may want (speech is a lossy medium after all), but none the less it&#x27;s still worth capturing and listening to.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/more-thoughts-on-dogfooding.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Dogfooding]]></title>
            <link>https://matthamlin.me//2024/august/dogfooding</link>
            <guid>https://matthamlin.me//2024/august/dogfooding</guid>
            <pubDate>Wed, 21 Aug 2024 15:34:15 GMT</pubDate>
            <description><![CDATA[The secret to excellent product teams is using your own product, and often!]]></description>
            <content:encoded><![CDATA[<div class="rounded-lg bg-muted px-4 py-0.5"><p>I&#x27;ve written a short follow up to this post! Check it out: <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/september/more-thoughts-on-dogfooding">More Thoughts on Dogfooding</a>.</p></div>
<p>A somewhat common<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup> concept within software development (and maybe more generalizable to any kind of product development) is the concept of &quot;dogfooding&quot;. My definition of dogfooding is;</p>
<blockquote>
<p>Using the product that you&#x27;re building, to improve the overall user experience</p>
</blockquote>
<p>For example - if you work at Google and build their search experience, it would behoove you to use the search experience from time to time to understand the friction that other users may feel using the product.</p>
<p>In many ways, dogfooding is effectively a continuation of <a href="https://www.paulgraham.com/startupideas.html" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">building solutions to your own problems</a>. If you&#x27;re not using your own product frequently, how can you know that it solves the problems that it sets out to?</p>
<p>User research and feedback is second hand feedback, that insight can be valuable, but often it&#x27;s warped by how the user perceives the product, and then how they may share that feedback.</p>
<p>The key to reducing friction points within your product, and by extension building a great product, is to use it as often as possible!</p>
<blockquote>
<p>I strongly believe that teams that prioritize dogfooding end up shipping better products than their competitors.</p>
</blockquote>
<p>Above and beyond just using your product, you can then start to apply things like a <a href="https://graphite.dev/blog/onboarding-roulette" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">chaos monkey to delete your own accounts</a> to help improve the login flow, or throw errors in parts of the application to ensure your error messaging is useful to users, or add additional latency to the experience to help you and your team understand what real users feel!<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->2</span></button></span><sup id="fn-2" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-2" class="text-primary hover:underline focus:underline">[<!-- -->2<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup></p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->At least I had thought that it was a common concept - but a decent number of my colleagues in the past didn&#x27;t know what it was!</p>
<p id="fnref-2" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-2" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I&#x27;ve heard of cases where Facebook I think it was had given their product engineers slow and old Android phones to use Facebook on (maybe this was made up though - if you have a reference for this please share it!)</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/dogfooding.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Git Notes as a Tool for Thought]]></title>
            <link>https://matthamlin.me//2024/august/git-notes-as-a-tool-for-thought</link>
            <guid>https://matthamlin.me//2024/august/git-notes-as-a-tool-for-thought</guid>
            <pubDate>Sat, 10 Aug 2024 09:42:51 GMT</pubDate>
            <description><![CDATA[(Ab)using Git as yet another tool for thought!]]></description>
            <content:encoded><![CDATA[<p>While flying back out to the west coast for a week and a half &quot;workation&quot; - I stumbled across a brief tweet talking about <a href="https://git-scm.com/docs/git-notes" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>git-notes</code></a>. For those that don&#x27;t know (and don&#x27;t care to read through Git docs), <code>git notes</code> is a way to track additional free form content associated with commits, <strong>without</strong> editing/amending the underlying commit. From what I can tell - these are tracked separately from commits, but Git knows how to connect them behind the scenes.</p>
<p>While there&#x27;s been other great blog posts about git notes (<a href="https://tylercipriani.com/blog/2022/11/19/git-notes-gits-coolest-most-unloved-feature/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">like this one</a> that I recommend checking out), I wanted to write a bit about a failed idea to use this little used feature as a way to store a daily journal of sorts.</p>
<p>The rough idea was:</p>
<ul>
<li>Create a single commit for each day (formatted nicely)</li>
<li>Append notes to that commit through out the day (as you see fit)</li>
<li>Each of the appended notes stashes the time at which the note was added, e.g. <code>9:15AM ET</code></li>
</ul>
<p>And that&#x27;s it! Plain and simple!</p>
<p>I was able to stub out a quick and very dirty Bun-flavored JavaScript snippet that could expose a simple CLI to manage these notes:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// bun note.ts &quot;something&quot;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// bun note.ts show</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> readableStreamToText</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">bun</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// git notes append --separator=&quot;\n---\n ### ${timestamp nicely formatted}&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// commit each day</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// check if there is a commit for today or not</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// if not, create a commit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// parse params</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">params</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Bun</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">argv</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">slice</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">2</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">params</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">includes</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">show</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let </span><span style="color:#999999;--shiki-dark:#666666">{</span><span style="color:#B07D48;--shiki-dark:#BD976A">stdout</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Bun</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">spawn</span><span style="color:#999999;--shiki-dark:#666666">([</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">git</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">notes</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">show</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">],);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let </span><span style="color:#B07D48;--shiki-dark:#BD976A">text</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> readableStreamToText</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">stdout</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  console</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">log</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">text</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  process</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">exit</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> params</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">join</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">dayFormatter</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new </span><span style="color:#B07D48;--shiki-dark:#BD976A">Intl</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">DateTimeFormat</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">en-US</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  year</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">numeric</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  month</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">2-digit</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  day</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">2-digit</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}).</span><span style="color:#B07D48;--shiki-dark:#BD976A">format</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">timeFormatter</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new </span><span style="color:#B07D48;--shiki-dark:#BD976A">Intl</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">DateTimeFormat</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">en-US</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  hour</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">2-digit</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  minute</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">2-digit</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}).</span><span style="color:#B07D48;--shiki-dark:#BD976A">format</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">day</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> dayFormatter</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">new </span><span style="color:#59873A;--shiki-dark:#80A665">Date</span><span style="color:#999999;--shiki-dark:#666666">());</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// check if current commit message matches the current date</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">res</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Bun</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">spawnSync</span><span style="color:#999999;--shiki-dark:#666666">([</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">git</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">log</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">-1</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">--pretty=%B</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">commitMessage</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> res</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">stdout</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">toString</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">commitMessage</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !</span><span style="color:#B07D48;--shiki-dark:#BD976A">commitMessage</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">includes</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">day</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  Bun</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">spawn</span><span style="color:#999999;--shiki-dark:#666666">([</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">git</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">commit</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">--allow-empty</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">-m</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> day</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  Bun</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">spawn</span><span style="color:#999999;--shiki-dark:#666666">([</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">git</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">notes</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">add</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span><span style="color:#A65E2B;--shiki-dark:#C99076">\#</span><span style="color:#1E754F;--shiki-dark:#4D9375"> ${</span><span style="color:#B56959;--shiki-dark:#C98A7D">day</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">])</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">Bun</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">spawn</span><span style="color:#999999;--shiki-dark:#666666">([</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">git</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">notes</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">append</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  `</span><span style="color:#B56959;--shiki-dark:#C98A7D">--separator=</span><span style="color:#A65E2B;--shiki-dark:#C99076">\n\n</span><span style="color:#B56959;--shiki-dark:#C98A7D">---</span><span style="color:#A65E2B;--shiki-dark:#C99076">\n\n</span><span style="color:#A65E2B;--shiki-dark:#C99076"> \#\#\#</span><span style="color:#1E754F;--shiki-dark:#4D9375"> ${</span><span style="color:#59873A;--shiki-dark:#80A665">timeFormatter</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">new</span><span style="color:#59873A;--shiki-dark:#80A665"> Date</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">-m</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  JSON</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">stringify</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">),</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">]);</span></span></code></pre>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>I&#x27;ve also pushed this script up to a <a href="https://github.com/hamlim/git-notes-experiment" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">repo here</a> if you want to mess around with the concept more!</p></div>
<p>This is very naive - and probably has a number of issues - but seemed to work <em>alright</em> in some of my testing.</p>
<p>I called this a failed experiment because <code>git notes</code> feels incredibly &quot;underbaked&quot; compared to other git features. Maybe underbaked isn&#x27;t the right phrase, but it&#x27;s seen such low adoption that most tools don&#x27;t support it, and it seems to break in some cases.</p>
<ul>
<li>Notably - GitHub doesn&#x27;t offer a way to see notes associated with commits in the web ui</li>
<li>You need to manually push and fetch these notes (kind of like tags) if you&#x27;re sharing them with others<!-- -->
<ul>
<li>I found <a href="https://gist.github.com/topheman/ec8cde7c54e24a785e52" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this helpful gist</a> with a cheat sheet for working with git notes</li>
</ul>
</li>
<li>(probably a me problem) The version of Git by default on my mac (AppleGit) somehow didn&#x27;t support most of the features - I had to <code>brew install git</code> to get the latest version with support for <code>git notes append</code>!</li>
<li>Amending a commit (even if not editing the message), will blow away all your notes!?</li>
</ul>
<p>Anyway - it was an interesting little adventure to try out, but I think I&#x27;ll be sticking with Obsidian for the time being, plus there have been quite a few useful git-backed note taking solutions out there that would work better.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/git-notes-as-a-tool-for-thought.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Don't Break the Implicit Prop Contract]]></title>
            <link>https://matthamlin.me//2024/august/dont-break-the-implicit-prop-contract</link>
            <guid>https://matthamlin.me//2024/august/dont-break-the-implicit-prop-contract</guid>
            <pubDate>Mon, 05 Aug 2024 17:31:32 GMT</pubDate>
            <description><![CDATA[React components have a fundamental contract that is often unstated in their implementation, and you should know about it!]]></description>
            <content:encoded><![CDATA[<p>There&#x27;s a <em>&quot;secret&quot;</em> implicit prop contract that comes along with all React components, and in fact with most &quot;pure functions&quot; and their arguments! Most React developers may not realize this contract is there, but they often follow it out of convention anyway. In this post I wanted to dig into this implicit prop contract, and specifically spend some time outlining why you shouldn&#x27;t break it!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="what-is-this-about-an-implicit-prop-contract">What is this about an implicit prop contract?!?</h3>
<p>React components<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup> were designed to be pure functions. Many have probably heard or seen the concept of <a href="https://rauchg.com/2015/pure-ui" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>ui = f(state)</code> or &quot;UI as a function of state&quot;</a>, it&#x27;s a great way to conceptualize this expectation that React sets on us as we use it to build our user interfaces. This expectation implies a strict prop contract - specifically:</p>
<blockquote>
<p>Changes to the props passed to a component, should reflect changes to the user <del>interface</del> <strong>experience</strong></p>
</blockquote>
<p>This is the implicit prop contract that I&#x27;m referring to, and it&#x27;s not even specific to React but to any pure function<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->2</span></button></span><sup id="fn-2" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-2" class="text-primary hover:underline focus:underline">[<!-- -->2<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>Let&#x27;s look an example; imagine we had a function called <code>square</code>, maybe we don&#x27;t know the internals or implementation details of the function - it might even look like this:</p>
<div style="position:relative;width:100%;padding-bottom:56.25%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/dont-break-the-implicit-prop-contract/square.png" height="1170" width="2080" loading="lazy" alt="TypeScript code defining a function that returns the square of a number using a while loop with a comment saying that the code works and it shouldn&#x27;t be modified"/></div></div>
<blockquote>
<p><a href="https://x.com/eloffd/status/1819501346829238764" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">source</a></p>
</blockquote>
<p>What we do know however, is that you pass it a single argument that is a type <code>number</code>, and it will give you back a number.</p>
<p>After trying it out a few times, we get back some results that seem to indicate that it will square the number we pass into the function and return the expected result:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">square</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> // === 1</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">square</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">2</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> // === 4</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">square</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">3</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> // === 9</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">square</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">4</span><span style="color:#999999;--shiki-dark:#666666">);</span><span style="color:#A0ADA0;--shiki-dark:#758575DD"> // === 16</span></span></code></pre>
<p>This function is following our implicit <del>prop</del> <em>argument</em> contract we talked about above - if you give it a value it will return the square of that value every single time.</p>
<p>This applies to React components just the same (because they&#x27;re pure functions also [kinda]), imagine we have a <code>Greeting</code> component that will display a greeting for a provided <code>name</code>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> Greeting</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#B07D48;--shiki-dark:#BD976A">name</span><span style="color:#999999;--shiki-dark:#666666">})</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">marquee</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">Hello </span><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">blink</span><span style="color:#999999;--shiki-dark:#666666">&gt;{</span><span style="color:#B07D48;--shiki-dark:#BD976A">name</span><span style="color:#999999;--shiki-dark:#666666">}&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">blink</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">!</span><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">marquee</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>This component will reliably render a greeting for any name that we provide!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="ok-but-what-about-breaking-the-contract">Ok, but what about breaking the contract?</h3>
<p>Going back to our <code>square</code> function, what if we found out that actually for some values it <strong>doesn&#x27;t</strong> return the square of the input value? Imagine we call it with <code>5</code> and instead of giving us back <code>25</code> as we&#x27;d normally expect it returns <code>10</code>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">result</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> square</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">5</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">console</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">log</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">result</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 10</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Wait... what?!?!</span></span></code></pre>
<p>This breaks our mental model that we had formed around the function - we had thought that it would work as expected for every valid argument that we could provide it, only to find out that it doesn&#x27;t.</p>
<p>If we had started to adopt this code within a larger system and found out about this unexpected outcome, we&#x27;d probably be forced to come in and apply a quick fix:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> actualSquare</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">n</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">number</span><span style="color:#999999;--shiki-dark:#666666">):</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> number</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // workaround to fix WTF-1337</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">n</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 5</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 25</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#59873A;--shiki-dark:#80A665"> square</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">n</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>But we need to be clear - we&#x27;re not fixing the underlying issue here, we&#x27;re implementing a workaround to bypass the issue. The <code>square</code> function broke our expected contract and now we need additional complexity within the system to account for that breakage.</p>
<p>What if our <code>Greeting</code> component also had a similar issue, imagine that it only greeted the first name that we rendered with, and any subsequent changes to the name it didn&#x27;t reflect properly?</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Greeting</span><span style="color:#B07D48;--shiki-dark:#BD976A"> name</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Matt</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span></code></pre>
<marquee>Hello <blink>Matt</blink>!</marquee>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// and if we re-render with the following:</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Greeting</span><span style="color:#B07D48;--shiki-dark:#BD976A"> name</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Scott</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span></code></pre>
<marquee>Hello <blink>Matt</blink>!</marquee>
<p>Maybe we&#x27;d opt to implement a workaround similar to our <code>square</code> function as above, with React we may <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2022/january/my-two-favorite-react-tricks">reach for using <code>key</code>s</a>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// First render</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Greeting</span><span style="color:#B07D48;--shiki-dark:#BD976A"> name</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Matt</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Next render</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Greeting</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  name</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Scott</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Fix WTF-420</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  key</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">some-unique-key</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">/&gt;</span></span></code></pre>
<marquee>Hello <blink>Scott</blink>!</marquee>
<p>However, as we noted above - this is yet another workaround and isn&#x27;t fixing the underlying issue!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="how-do-i-avoid-this-issue">How do I avoid this issue?</h3>
<p>In React, this broken contract commonly comes up with the following cases:</p>
<ul>
<li>Derived state not reflecting changes from props</li>
<li>Effects not properly &quot;subscribing to&quot; changing props (props missing from an effect&#x27;s <code>dependencies</code> array)</li>
<li>Caching not properly &quot;subscribing to&quot; changing props (props missing from <code>useCallback</code> or <code>useMemo</code>&#x27;s dependencies arrays)</li>
</ul>
<p>However there&#x27;s a number of other possible footguns as well (e.g. manual escape hatches like <code>useRef</code>). Generally, <a href="https://react.dev/reference/rules/rules-of-hooks" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">following the Rules of Hooks</a> will ensure that you don&#x27;t accidentally break this implicit contract!</p>
<p>While there is nothing explicitly implemented within React itself that will prevent breaking this contract - I&#x27;d argue that a majority of developers working within a React codebase implicitly have this assumption about components. So while you could choose to break this contract, you&#x27;ll eventually find someone that becomes confused as to why the code doesn&#x27;t do what they&#x27;d expect it to do so (even if that individual is you in 6+ months)!</p>
<hr/>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="footnotes">Footnotes:</h4>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Specifically function components, although classes were meant to operate a similar way they just offered more opportunities to break those expectations.</p>
<p id="fnref-2" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-2" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->While some may say that React components technically aren&#x27;t exactly pure functions of state, but for the right perspective of what &quot;state&quot; is, they can be. For example hooks like <code>useState</code> rely on the shared React Dispatcher to store state within - if this is considered part of the &quot;state&quot;, then the component can be considered pure.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/dont-break-the-implicit-prop-contract.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[A Better useSSR Implementation]]></title>
            <link>https://matthamlin.me//2024/july/a-better-useSSR-implementation</link>
            <guid>https://matthamlin.me//2024/july/a-better-useSSR-implementation</guid>
            <pubDate>Tue, 23 Jul 2024 12:27:41 GMT</pubDate>
            <description><![CDATA[Replace that old useState and useEffect combo for a new and better option!]]></description>
            <content:encoded><![CDATA[<p>For teams working within a server side rendered react app (like when using Next.js or Remix), I often see a <code>useSSR</code> (or <code>useClient</code>) hook within the codebase.</p>
<p>These hooks usually return a boolean indicating if we&#x27;re on the client or being server rendered - this can be useful to introduce some functionality when we are on the client and now have access to the <code>window</code> or <code>navigator</code> globals for example, or can be a useful way to render different UI on the server or the client!</p>
<p>Most of these implementations look something like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">useState</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> useEffect</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> useSSR</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">mounted</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setMounted</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#1E754F;--shiki-dark:#4D9375">false</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    setMounted</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#1E754F;--shiki-dark:#4D9375">true</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> [])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> mounted</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>This implementation isn&#x27;t all that bad - it&#x27;s relatively easy to understand what&#x27;s happening!</p>
<p>However, this implementation causes a double render on the client - which can sometimes be less than ideal. The first render is the hydration pass on the server rendered HTML, the second render is after the <code>setState</code> is applied within the <code>useEffect</code>.</p>
<p>There&#x27;s now a better way to implement this within React: <code>useSyncExternalStore</code>!</p>
<p>The name is pretty confusing - it was original built to help external stores (e.g. Redux, Jotai, etc) integrate better with React&#x27;s scheduler. However it is pretty flexible to be used for a few other use cases as well!</p>
<p>Here&#x27;s the new implementation using <code>useSyncExternalStore</code>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">useSyncExternalStore</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#59873A;--shiki-dark:#80A665"> emptySubscribe</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> useSSR</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#59873A;--shiki-dark:#80A665"> useSyncExternalStore</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    emptySubscribe</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // client value:</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // server value:</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#1E754F;--shiki-dark:#4D9375"> false</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>This will return the same values as our old implementation - but skips the need for a re-render after an effect runs. React does the heavy lifting for that now with this new hook!</p>
<p>I first saw this referenced from <a href="https://x.com/TkDodo/status/1741068994981826947" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this tweet</a>:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><p><p lang="en" dir="ltr">ü§™ Am I going crazy or is this a legit way to avoid hydration errors? Basically abusing <code>useSyncExternalStore</code> to safely read server snapshots on the server and on the first client render, and then falling back to the client snapshot.<br/><br/>The good thing is that on client side‚Ä¶ <a href="https://t.co/9qDJjdbYqj">pic.twitter.com/9qDJjdbYqj</a></p>‚Äî Dominik üîÆ (@TkDodo) <a href="https://twitter.com/TkDodo/status/1741068994981826947?ref_src=twsrc%5Etfw">December 30, 2023</a></p></blockquote></div>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/a-better-useSSR-implementation.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[30]]></title>
            <link>https://matthamlin.me//2024/july/30</link>
            <guid>https://matthamlin.me//2024/july/30</guid>
            <pubDate>Sat, 20 Jul 2024 06:00:00 GMT</pubDate>
            <description><![CDATA[A quick recap of my goals from the past year and a few goals looking forward as well.]]></description>
            <content:encoded><![CDATA[<p>It&#x27;s kind of wild that it&#x27;s already been a year since I published <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/july/29">my last birthday post</a>, time has gone by quite quickly over the last year.</p>
<p>In the past year I&#x27;ve:</p>
<ul>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/may/leaving-wayfair">Changed jobs</a></li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/blog">Published a ton of blog posts</a></li>
<li><a href="https://x.com/immatthamlin/status/1790111809791308173" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Created</a> <a href="https://x.com/immatthamlin/status/1793056949434486946" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">quite</a> <a href="https://x.com/immatthamlin/status/1790750021681344951" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">a few</a> <a href="https://x.com/immatthamlin/status/1777091844779683931" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">open source</a> <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/january/building-better-beacon">projects</a></li>
</ul>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="recap">Recap:</h2>
<p>I also want to revisit the goals that I set for myself in my previous birthday post:</p>
<ul>
<li>Get healthier</li>
<li>Improve my wardrobe</li>
<li>Optimize finances</li>
<li>Get serious about my career</li>
</ul>
<p>Overall - I feel like I&#x27;ve made decent progress across all of them!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="get-healthier-">Get Healthier ü´§</h3>
<p>I crunched the numbers on both my step count and my weight (which actually wasn&#x27;t all that bad to do, but I had to merge data I captured in Notion with data I&#x27;ve been capturing in Obsidian <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/july/switching-back-to-obsidian">since migrating</a>), my weight honestly looks pretty bad over the past year, but within the past few months it&#x27;s starting to move in the right direction.</p>
<div style="position:relative;width:100%;padding-bottom:49.57983193277311%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/30/weight-trend.png" height="1180" width="2380" loading="lazy" alt="My weight trend over the last year"/></div></div>
<p>My steps also seem alright - but honestly it&#x27;s pretty biased around when I go on vacation (end of May in Mexico, early July 2024 in Connecticut and California) so I need to keep up my walking habit while away from home.</p>
<div style="position:relative;width:100%;padding-bottom:49.600672551492224%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/30/steps-trend.png" height="1180" width="2379" loading="lazy" alt="My steps trend over the last year"/></div></div>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="improve-my-wardrobe-">Improve my wardrobe ‚úÖ</h3>
<p>There&#x27;s not much data to pull here - but now I&#x27;m cycling in some new black t-shirts, some new long and short sleeve button ups, and also some new shorts and pants.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="optimize-finances-">Optimize finances ‚úÖ</h3>
<p>Again hard to share some hard numbers here (mostly because I&#x27;m not sure I want to share my finances with everyone üòÇ), however I&#x27;ve started using <a href="https://copilot.money/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Copilot</a> (not <a href="https://copilot.github.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">that copilot</a>) and it&#x27;s been really nice to see general trends, get automatic monthly recaps on my expenses and income. I highly recommend it!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="get-serious-about-my-career-">Get serious about my career ‚úÖ</h3>
<p>As I noted above - since last year <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/may/leaving-wayfair">I left Wayfair</a> and <a href="https://fireworks.ai" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">joined Fireworks</a>. It&#x27;s been quite the shift and I hope to spend some time writing up more of my thoughts there so stay tuned.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="goals">Goals:</h2>
<p>Looking forward, I want to set the following goals for the next year:</p>
<p><strong>Get serious about my health</strong></p>
<p>This is partially a carry over from this last year, but I didn&#x27;t really devote much concentrated effort on this. I&#x27;ve been thinking about doing more focused workouts instead of my usual walks (number of steps isn&#x27;t everything)!</p>
<p><strong>Build more</strong></p>
<p>I&#x27;ve been kicking the can down the road on a number of side projects - some of which I really want to get off the ground. I want to launch at least 2 projects that are more than just open source libraries this next year.</p>
<p><strong>[REDACTED]</strong></p>
<p>üôÇ</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/30.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Simple Obsidian Task Management]]></title>
            <link>https://matthamlin.me//2024/july/simple-obsidian-task-management</link>
            <guid>https://matthamlin.me//2024/july/simple-obsidian-task-management</guid>
            <pubDate>Fri, 19 Jul 2024 16:48:39 GMT</pubDate>
            <description><![CDATA[A brief overview of how I manage my tasks in Obsidian]]></description>
            <content:encoded><![CDATA[<div class="rounded-lg bg-muted px-4 py-0.5"><p><strong>Update:</strong> I&#x27;ve outlined an updated workflow within <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/november/my-updated-obsidian-task-management">this blog post</a>, check it out!</p></div>
<p>The other week I <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/july/switching-back-to-obsidian">wrote about switching back to Obsidian</a> and talked briefly about how I manage my tasks within Obsidian as well. This post is aiming to be a bit more of a deep dive on how I got to my current setup, what it is, and what are some of the still present pain points that I&#x27;m thinking about solving going forward.</p>
<p>Before digging in - my task management workflow has changed quite a bit in the past couple of months. There was a short stint where I tried to really lean into the <strong>Reminders</strong> app on my iPhone / mac - but I was missing the nice ability to manage tasks on my work computer and personal computer when they didn&#x27;t share iCloud accounts. I then moved over to Notion using their Notion Projects offering - but that felt a bit like overkill. When I switched back over to Obsidian I decided to give <a href="https://todoist.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Todoist</a> a try - I had used it ages ago and remembered liking it but also remembered hitting their free plan limits pretty fast.</p>
<p>After about a month of using Obsidian daily - I decided to move my tasks back into Obsidian. I liked the ability to easily refer to my tasks within my notes and even create whole notes for individual tasks (even though this part is still kind of clunky I think).</p>
<p>I tweaked my setup a bit - first landing on keeping the source of truth for my tasks localized to the most relevant note that they are related to. For example I have a &quot;root note entry&quot; for each of my side projects - so I was adding project-related tasks inline in those notes. That worked out alright for side projects - but there wasn&#x27;t really a good way to see the big picture for the tasks.</p>
<p>I was able to help out a bit with the <a href="https://publish.obsidian.md/tasks/Introduction" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Task</a> plugin&#x27;s <a href="https://publish.obsidian.md/tasks/Queries/About+Queries" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>queries</code> feature</a> (where you can create nice views using a custom code block syntax to query all tasks in your vault), but it still felt a bit chaotic to me.</p>
<p>Now what I&#x27;ve landed on as my current workflow is to:</p>
<ul>
<li>Manage the source of truth list of tasks within a single note (in my case, <code>Tasks.md</code>)<!-- -->
<ul>
<li>I break this note up into individual sections, one for general catch all tasks like &quot;Frame artwork in the office&quot;, one for work and another for side project specific tasks</li>
</ul>
</li>
<li>I also include collapsed annotations below each section to every so often hide the completed tasks just below each section</li>
<li>In my daily notes - I have a template to show tasks that are due on the current day - or have already come due and haven&#x27;t been completed yet<!-- -->
<ul>
<li>I also have another section for capturing the tasks that I completed that day also - which allows me to easily go back and see what I completed on any given day</li>
</ul>
</li>
<li>I also use a recurring weekly note to capture those tasks which mirrors a bit of what the <code>Tasks.md</code> note looks like but is also using the queries noted above</li>
</ul>
<p>All in all - this system works fairly well!</p>
<p>As for some of the pain points:</p>
<p>I haven&#x27;t exactly ironed out how to best add tasks from my phone (I&#x27;ve been opening up the <code>Tasks.md</code> note and manually adding it), I think in my ideal world I&#x27;d use some kind of quick capture flow to easily add tasks and have them be sorted into the correct section in the note when adding them from my phone.</p>
<p>I haven&#x27;t figured out a good workflow for managing the long term of what happens to a task when its completed? Should it stick around for several months (or longer)? Or should I routinely clean them up?</p>
<p>Block references and even &quot;live block references&quot; (where it renders the block inline) don&#x27;t work all that well after I move the task into the completed tasks collapsed annotation. Ideally I wouldn&#x27;t need to use annotations for that and instead could use a <code>&lt;details&gt;</code> section - maybe there&#x27;s a way to do that better in Obsidian.</p>
<p>Adding reminders doesn&#x27;t seem to work on my phone - I have some extension (not exactly sure which one it is) that lets me type <code>(@</code> and pick a day/time to get a reminder for that block - but this doesn&#x27;t seem to work nicely on my phone.</p>
<p>Generally - editing tasks using the built in task editor flow doesn&#x27;t seem to work for me unless I find the task within a queried view - I have to manually edit the source or track down a view of it that shows the üìù emoji where I can then open the edit task modal.</p>
<hr/>
<p>Is this better than a dedicated task management app? Maybe not, but I like that I get to own the data for the tasks and I don&#x27;t have to pay yet another service to manage syncing those across devices.</p>
<p>Who knows - maybe in a week I&#x27;ll be using yet another task management app and I&#x27;ll be changing my tune!</p>
<p>Do you use Obsidian to manage tasks? If so - how do you do it? I&#x27;d love to learn a bit about how others are tackling the same use case!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/simple-obsidian-task-management.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[My Current Dev Setup]]></title>
            <link>https://matthamlin.me//2024/july/my-current-dev-setup</link>
            <guid>https://matthamlin.me//2024/july/my-current-dev-setup</guid>
            <pubDate>Mon, 08 Jul 2024 19:40:27 GMT</pubDate>
            <description><![CDATA[A quick look at the applications and tools that I (generally) use day to day for web development!]]></description>
            <content:encoded><![CDATA[<p>I think I&#x27;ve written a bit about the tools that I use day-to-day, or some of the cool applications I&#x27;ve discovered to help do web development, but I haven&#x27;t done so in quite some time so I figured I&#x27;d write a more up to date post!</p>
<p>Often I get inspired by seeing other&#x27;s setups to try some new tools, I hope this post serves more as a way to expose anyone reading to something new that they may want to try out. At the end of the day, I think it&#x27;s worth investing time to create your own workflows<!-- -->!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="editor">Editor:</h3>
<p>Currently I&#x27;m using <a href="https://code.visualstudio.com/insiders/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">VSCode Insiders</a> - I had tried out <a href="https://www.cursor.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Cursor</a>, but ran out of their free tier offerings and honestly it wasn&#x27;t too much better than GitHub Copilot (more on that below). If you&#x27;re willing to pay for it - Cursor is pretty good, but if you already pay for GitHub Copilot then it may not be worth also paying for Cursor.</p>
<p>I currently use the <a href="https://vscodethemes.com/e/antfu.theme-vitesse/vitesse-dark-soft?language=javascript" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Vitesse</a> theme, but previously I was using the <a href="https://vscodethemes.com/e/github.github-vscode-theme/github-light-default?language=javascript" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">GitHub Light theme</a>.</p>
<p>I also use a number of extensions, including but not limited to:</p>
<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">GitHub Copilot</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-playwright.playwright" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Playwright Test</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Tailwind CSS IntelliSense</a></li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="terminal">Terminal:</h3>
<p>I&#x27;m currently using <a href="https://warp.dev" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">warp</a> as my go-to terminal, the tabs and panels, and some of the better autosuggest / history features are really good, plus it supports a wide range of custom themes as well so I&#x27;m also using the Vitesse theme for warp.</p>
<p>I don&#x27;t really use the AI features bundled in with the terminal, but sometimes they can be useful.</p>
<p>I&#x27;ve tried out <a href="https://waveterm.dev/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">wave</a> and also using the built in terminal in VSCode but warp just felt like the best tool for my needs.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="misc">Misc:</h3>
<p>I&#x27;ve been using <a href="https://gitbutler.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">GitButler</a> lately and kind of enjoying it - it definitely still has some quirks but honestly feels like the best &quot;open&quot; way to manage a stacked diff like workflow. I had tried <a href="https://graphite.dev/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Graphite</a> before but it was pretty limiting if you didn&#x27;t go all in on it&#x27;s toolchain and now is only targeting teams instead of individual devs I think.</p>
<p>I still feel like there&#x27;s got to be a better stacked diff workflow (CLI and an optional GUI) to be built - but for now GitButler is my go to!</p>
<p>I always highly recommend using <a href="https://www.raycast.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Raycast</a>, I pay for the pro plan to get a few added features, but honestly this is one of the best applications I use day to day, it makes switching between windows/applications a lot easier, and also the clipboard history is so handy!</p>
<p>A few other smaller ones that I use/recommend:</p>
<ul>
<li><a href="https://arc.net" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Arc</a> - It&#x27;s hard for me to use any other browser these days!</li>
<li><a href="https://capture.dropbox.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Dropbox Capture</a> - this is the best screenshot and screen recording tool I&#x27;ve found on mac, quick and easy keyboard shortcuts and it uploads them all to my dropbox for easy sharing too!</li>
<li><a href="https://obsidian.md/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Obsidian</a> - I <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/july/switching-back-to-obsidian">recently switched back from Notion</a> and have been really enjoying using Obsidian for all my note taking needs!</li>
<li><a href="https://openai.com/chatgpt/mac/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">ChatGPT Mac App</a> - I&#x27;ve bound <code>ctrl+space</code> as a shortcut to trigger ChatGPT and it&#x27;s been incredibly useful!</li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/my-current-dev-setup.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Switching back to Obsidian]]></title>
            <link>https://matthamlin.me//2024/july/switching-back-to-obsidian</link>
            <guid>https://matthamlin.me//2024/july/switching-back-to-obsidian</guid>
            <pubDate>Mon, 01 Jul 2024 14:50:37 GMT</pubDate>
            <description><![CDATA[Previously I wrote about switching from Obsidian to Notion, now almost exactly 2 years later, I've opted to give Obsidian another try as my go-to note taking software, here's why!]]></description>
            <content:encoded><![CDATA[<p>My <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2022/may/switching-back-to-notion">previous post on switching to Notion</a> was pretty straight forward at the time, the syncing limitations that I ran into back then are still present but I&#x27;ve mostly changed my workflow around enough that they&#x27;re no longer major issues.</p>
<p>Honestly - the main motivation for me wanting to go back to <a href="https://obsidian.md/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Obsidian</a> is to own and control my own notes more than I could with Notion (effectively the <a href="https://stephanango.com/file-over-app" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">file over app</a> concept).</p>
<p>I&#x27;ve also continued to realize that Notion is really terrible with offline use - which I&#x27;m coming around to valuing more and more.</p>
<p>In fact, the offline support (or really lack thereof) was starting to motivate me to consider building an application that would support offline features better - only to realize that Obsidian has ~90% of the features that I want out of my note taking software needs.</p>
<p>There&#x27;s still some notable gaps with Obsidian (and some plugins workaround this - but maybe not to the fidelity that I&#x27;d like), and I may opt to hack on some plugin ideas in my (limited) free time. However I think I can slightly change my workflow enough to get by just fine with some of the defaults.</p>
<p>I&#x27;ve now been using Obsidian for over a month solid, recreating my daily notes flow from Notion using the <a href="https://help.obsidian.md/Plugins/Daily+notes" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Daily Notes plugin</a> + some templates, and also a pretty effective task management workflow (still kind of manually managed, but the <a href="https://publish.obsidian.md/tasks/Introduction" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">tasks plugin</a> is really useful, maybe I&#x27;ll write up how I approach it in the near future).</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p><strong>Update!</strong> I wrote a bit about how I manage my tasks within obsidian <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/july/simple-obsidian-task-management">here</a></p></div>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/switching-back-to-obsidian.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[There Is No Standard Markdown]]></title>
            <link>https://matthamlin.me//2024/july/there-is-no-standard-markdown</link>
            <guid>https://matthamlin.me//2024/july/there-is-no-standard-markdown</guid>
            <pubDate>Mon, 01 Jul 2024 14:24:41 GMT</pubDate>
            <description><![CDATA[There are a variety of different markdown "standards" out there, and sometimes they're not all that consistent]]></description>
            <content:encoded><![CDATA[<p>Often tools that value <a href="https://stephango.com/file-over-app" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">files over apps</a> brag about supporting markdown - it&#x27;s a very common file format for most text+ applications. However, not all markdowns are created equally.</p>
<p>Technically, the original spec for Markdown was defined here: <a href="https://daringfireball.net/projects/markdown/syntax" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://daringfireball.net/projects/markdown/syntax</a> - however you&#x27;d be surprised to see that there&#x27;s actually a number of features that most markdown supporting apps add-on on top of the basic spec.</p>
<p>These enhancements are great! However it also means that not all features that work in one application will work in another, and sometimes they may have conflicting parsing rules / definitions for what symbols should do what when rendered.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/there-is-no-standard-markdown.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Abstract Your API]]></title>
            <link>https://matthamlin.me//2024/june/abstract-your-api</link>
            <guid>https://matthamlin.me//2024/june/abstract-your-api</guid>
            <pubDate>Sun, 30 Jun 2024 08:48:47 GMT</pubDate>
            <description><![CDATA[Proposing a solution for sharing core "business" logic across services!]]></description>
            <content:encoded><![CDATA[<p>This blog post is meant as a response to this article by <a href="https://macwright.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Tom MacWright</a>: <a href="https://macwright.com/2024/06/21/apis-and-applications" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://macwright.com/2024/06/21/apis-and-applications</a>.</p>
<details class="border border-green-400 rounded-md p-4 bg-green-50 dark:bg-green-900/20"><summary class="font-bold cursor-pointer underline underline-offset-1 decoration-wavy decoration-2 decoration-green-400">TL;DR</summary><div class="py-4"><p>Release a library that handles the business logic, pull into both your api service and application service.</p></div></details>
<p>I haven‚Äôt necessarily needed to solve for this problem directly yet, but the first thought that came to mind is abstraction. Specifically abstracting away the core business logic of your API into a layer that both your API and your Application can share.</p>
<p>While on the surface that may sound or look a bit like using your API within your application, I&#x27;d actually argue for sharing something a bit more primitive.</p>
<p>You build out a set of composable async primitives (hint: functions) that can be composed together to support your API and also support your application. Let‚Äôs dive into a small example to help visualize the concept a bit.</p>
<p>Imagine you‚Äôre supporting a product and API for listing pok√©mon, you could have your <code>/list</code> route in your web app call your <code>/api/v1/listPokemon</code> endpoint, however we can take it to the next layer deeper. Imagine you API endpoint does the following things:</p>
<ul>
<li>validate input (for pagination and/or filtering)</li>
<li>execute some kind of query on your database</li>
<li>format results</li>
</ul>
<p>For both your web app and your API you need to handle all of the same conditions, and as rightly pointed out in the original article you need to do some massaging that‚Äôs different between the two services, on the web side you format the output as HTML (or an intermediary format like an RSC payload) whereas in your API you might opt for responding with JSON.</p>
<p>Imagine if instead you shipped a shared library of async functions, <code>list.validateInput()</code>, <code>list.collect()</code>, and <code>list.format()</code> (or maybe you don&#x27;t even expose <code>list.format()</code>!). Now you have the flexibility to call those wherever you need to within either service, and manage input and output however you‚Äôd like depending on the consuming service (e.g. Server Components for the web app maybe and JSON for the API).</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/abstract-your-api.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Tip: Request and Response Headers]]></title>
            <link>https://matthamlin.me//2024/june/tip-request-and-response-headers</link>
            <guid>https://matthamlin.me//2024/june/tip-request-and-response-headers</guid>
            <pubDate>Mon, 10 Jun 2024 10:37:04 GMT</pubDate>
            <description><![CDATA[There's a common gotcha when creating Web Request and Response instances with Headers!]]></description>
            <content:encoded><![CDATA[<p>The other day I was working on some unit tests for a minimal Cloudflare Worker that would redirect the incoming request while forwarding along some of the original request headers. I setup a test to call the worker&#x27;s <code>fetch</code> handler with a <code>new Request</code> that had some headers provided:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">request</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new </span><span style="color:#59873A;--shiki-dark:#80A665">Request</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">https://something.com</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  headers</span><span style="color:#999999;--shiki-dark:#666666">: {</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">x-foo</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">bar</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">x-baz</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">qux</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">});</span></span></code></pre>
<p>I then called the worker&#x27;s <code>fetch</code> handler with this request:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">response</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#B07D48;--shiki-dark:#BD976A"> worker</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">fetch</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">request</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p>However, the headers weren&#x27;t propagating into the request that my worker&#x27;s <code>fetch</code> handler was seeing - since I was calling the method directly I figured it had to be something with the runtime that I was writing the tests within (in this case, Bun).</p>
<p>I did some sleuthing online and found <a href="https://github.com/oven-sh/bun/issues/6288" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this issue</a>. The creator of the issue noted something about this being baked into the spec for <code>new Request</code> and <code>new Response</code> objects, and that they don&#x27;t &quot;hydrate&quot; from a <code>HeadersInit</code> object.</p>
<p>To instead make it work, I had to write my test like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">request</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new </span><span style="color:#59873A;--shiki-dark:#80A665">Request</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">https://something.com</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">request</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">headers</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">set</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">x-foo</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">bar</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">request</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">headers</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">set</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">x-baz</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">qux</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">response</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#B07D48;--shiki-dark:#BD976A"> worker</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">fetch</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">request</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/tip-request-and-response-headers.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Using Feature Toggles to De-risk Refactors]]></title>
            <link>https://matthamlin.me//2024/may/using-feature-toggles-to-de-risk-refactors</link>
            <guid>https://matthamlin.me//2024/may/using-feature-toggles-to-de-risk-refactors</guid>
            <pubDate>Tue, 28 May 2024 09:04:24 GMT</pubDate>
            <description><![CDATA[Feature toggles are often underused by most software development teams, and yet offer so much value during not only feature development but also refactors]]></description>
            <content:encoded><![CDATA[<p>There‚Äôs countless resources available online praising feature toggles<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>, yet I still think it‚Äôs extremely underused tool that most teams should start using far more often in development, specifically it really shines when tackling a refactor of an existing feature or even a whole service/application.</p>
<p>A couple of months ago, I lead the frontend platform team at Wayfair as we tackled migrating our Next.js experiences from the Pages Router to the App Router. We relied upon feature toggles to iterate quickly and effectively, our integration allowed us to ship two versions (the existing Pages Router experience alongside the new App Router experience) into production at once, and choose which one to show based on the evaluated feature toggle (or a different override).</p>
<p>Without these toggles in place, we would have to attempt to validate the new experience (either via our automated tests or manual testing, or a mix of both), and then deploy the change and cross our fingers that we didn‚Äôt break anything. With feature toggles, we were able to send a small amount of traffic to the new experience, ensure healthy business metrics, as well as performance metrics on both the server and the client, all increasing our confidence that the refactor worked as expected. In fact, we had to resolve a couple of bugs that came up from that refactor, without toggles we would have had to rollback the changes, perform more tests internally, and maybe repeat the process several times.</p>
<p>I hinted at this above, however there‚Äôs some additional aspects of a good feature toggle setup that I recommend others to consider adopting if possible:</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="support-overrides-on-a-per-request-basis">Support overrides on a per-request basis</h3>
<p>Allowing folks to opt into a different experience by overriding a toggle allows for developers to test their changes in production, as well as other internal stakeholders</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="keep-toggles-in-sync-between-release-environments">Keep toggles in sync between release environments</h3>
<p>You should still allow for short term drift between environments (e.g. development and production), e.g. someone should be able to override a toggle in one environment and not in another at the same time. However, generally speaking you want to keep all release environments consistent as possible.</p>
<p>In our refactor, we used Unleash to manage the toggles, but built some custom logic within our custom express server around the Next.js application to resolve the toggles as well as cookie-based overrides allowing users to &quot;pin&quot; their override via a cookie.</p>
<hr/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I refer to feature toggles in this article, but some folks call them feature flags or experiment flags. They‚Äôre mostly the same concept - a dynamic flag injected into the code that can be changed without necessarily needing to rebuild the code.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/using-feature-toggles-to-de-risk-refactors.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Leaving Wayfair]]></title>
            <link>https://matthamlin.me//2024/may/leaving-wayfair</link>
            <guid>https://matthamlin.me//2024/may/leaving-wayfair</guid>
            <pubDate>Wed, 15 May 2024 12:39:44 GMT</pubDate>
            <description><![CDATA[The other week was my last week at Wayfair, rounding out almost 8 years at the company. I wanted to reflect a bit on my time there!]]></description>
            <content:encoded><![CDATA[<p>Last week (May 10th, 2024) was my last day at Wayfair. For those that don&#x27;t know - I had been working at Wayfair since I graduated college in 2016! I often remark to others that I originally planned to only work there for like 2 years and then move back to the west coast and join a &quot;real&quot; tech company. But I ended up staying for 8 years! I think that&#x27;s a testament to the great people I worked with and the interesting problems I got to work on.</p>
<p>I&#x27;ll post an update about where I&#x27;m going next soon, so stay tuned!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="a-brief-history-of-my-time-at-wayfair">A brief history of my time at Wayfair</h2>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="2016---early-2017">2016 - Early 2017</h3>
<p>I originally joined Wayfair as an L1 software engineer, I still vividly remember my first day because I accidentally joined the rest of the new employees that were going through what Wayfair called it&#x27;s Labs program which was essentially a short bootcamp to onboard new hires to PHP and frontend web development at Wayfair. My new manager had to track me down and let me know that I didn&#x27;t need to go through the program and instead could join the team for a lunch outside the office!</p>
<p>I started on (at the time) the PDP/Checkout/My Account frontend team. Wayfair at that time mostly split teams into a backend group and a frontend group, so I was on the frontend team. We were mostly using sass, mustache templates, and just a bit of PHP.</p>
<p>We didn&#x27;t have a Git web UI at the time (at least not that I can remember), so we submitted diffs for code review using <a href="https://www.reviewboard.org/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Reviewboard</a>! Our deployments required manually pulling down an branch (we called them deploy trains), merging your changes into the branch, and pushing up to remote - hoping to beat everyone else trying to push their changes at the same exact time!</p>
<p>I bounced around for the first year to a few other teams also, joining the Wayfair Registry team to build out some of the initial web features for the registry product. I then moved over to the Wayfair Professional team to work on various B2B features across the site.</p>
<p>Around this time Wayfair had just started to adopt React, and I was able to start adopting it for a few Professional features on the site. Through that work I started contributing more to our internal component library at the time (I remembered contributing to it before we adopted React as well - when we were using mustache templates, and a home grown JS framework build on Backbone called <a href="https://github.com/wayfair-archive/tungstenjs" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Tungsten.js</a>).</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="early-2017---2021">Early 2017 - 2021</h3>
<p>I eventually lucked out and was able to move over to the component library team - which at that point in time was called the Front End Design Systems (huge shout-out to Eric for brokering the deal that let me change teams)! At the time - it was just 3 of us on the team (Eric, Rogin, and myself), all working to build and maintain a new React-based component library for everyone internally at Wayfair.</p>
<p>I&#x27;m so grateful to both Eric and Rogin for the opportunity to work with them on the design systems team. Together we all scaled the team to 11 engineers, and a partner design crew of 7 or so at it&#x27;s height I think.</p>
<p>We built a ton of cool things on the team, not only 3 complete libraries of components (one for each of our internal organizations) - each with about 60+ components, but also got to tinker a ton with our internal documentation site and associated tooling around component libraries.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="2021---2024">2021 - 2024</h3>
<p>After a couple of years, I wanted to something a bit new and so I moved over to the Frontend Platform team. When I joined, the platform team was actually two different teams - one focused on core tooling and services for any team within Wayfair, and the other which I joined directly was focused more on Storefront (our e-commerce features and teams).</p>
<p>Over the time, the teams changed a bit after a few internal re-organizations and ultimately merged into a single team. While on the platform team I helped drive our adoption of Next.js, building and launching our first page on the e-commerce sites using Next.js.</p>
<p>Eventually also I was able to help drive the team to adopt the App Router features of Next.js, and completed that migration from Pages Router to App Router for the 10+ pages that we had migrated from our legacy tech stack over to Next.js.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="looking-back">Looking Back</h2>
<p>I&#x27;m so grateful for the time I spent at Wayfair. I got to work with some amazing people, and I got to work on some really interesting problems. I still remember that when I joined Wayfair - I barely knew any JavaScript at all (literally was writing synchronous XHR for data fetching, using some bit of jQuery in my side projects at the time), hell I barely knew CSS also! Thankfully - over the years I was able to learn a ton (not just about CSS and JavaScript), but also general software development practices, many of which I&#x27;ve tried to distill as blog posts here.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/leaving-wayfair.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Hohoro]]></title>
            <link>https://matthamlin.me//2024/may/hohoro</link>
            <guid>https://matthamlin.me//2024/may/hohoro</guid>
            <pubDate>Mon, 13 May 2024 16:13:30 GMT</pubDate>
            <description><![CDATA[A quick introduction to my new side project, hohoro. An incremental JS/TS library build tool!]]></description>
            <content:encoded><![CDATA[<div class="rounded-lg bg-muted px-4 py-0.5"><p>I originally posted this article as a series of tweets <a href="https://twitter.com/immatthamlin/status/1790111809791308173" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">here</a>.</p></div>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="introducing-hohoro">Introducing hohoro</h2>
<p><code>hohoro</code> is an incremental build tool for JS/TS libraries, leveraging SWC and TSC under the hood!</p>
<p>Check out the project here: <a href="https://hohoro.vercel.app/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://hohoro.vercel.app/</a>.</p>
<hr/>
<p>Most build tools for libraries impose additional restrictions on the configuration that is exposed to you - often wrapping some core tools that you end up needing to use for other things (like configuring tests for example).</p>
<p>hohoro approaches things a bit differently...</p>
<hr/>
<p>It doesn&#x27;t directly wrap those core tools, and instead lets you configure them as needed.</p>
<p>On top of that, it adds a light weight incremental build cache - like
<a target="_blank" rel="noopener noreferrer" href="https://twitter.com/turborepo" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-4 h-4 inline-block mr-1" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>@<!-- -->turborepo</a> - but on a per-file basis instead of all or nothing for each workspace.</p>
<hr/>
<p>We started to adopt this pattern at Wayfair to help with incremental compile times for larger libraries and saw big wins for local development!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/hohoro.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Funport: True Dynamic Imports in webpack]]></title>
            <link>https://matthamlin.me//2024/april/funport</link>
            <guid>https://matthamlin.me//2024/april/funport</guid>
            <pubDate>Fri, 12 Apr 2024 20:00:33 GMT</pubDate>
            <description><![CDATA[webpack, and tools built on it like Next.js, don't support true dynamic imports, but I found a way to trick the system!]]></description>
            <content:encoded><![CDATA[<p>If you&#x27;ve ever wanted to leverage <code>import()</code> from the browser (or node process) within an application that uses webpack - you have probably realized that webpack &quot;hijacks&quot; the <code>import()</code> function and replaces it with its own implementation. This is great for static imports, but what if you want to dynamically import a module that webpack doesn&#x27;t know about at build time?</p>
<p>I was running into this limitation the other day, and couldn&#x27;t really find any good resources out there that helped me to workaround the limitation.</p>
<p>To note - the limitation is there because webpack defaults to attempting to statically analyze your code and build a dependency graph. This is great for performance and tree shaking, but not so great when you want to dynamically import a module in your application at runtime!</p>
<p>The solution that I found was to use <code>new Function</code> (an often overlooked but incredible utility) to build our own <code>import()</code> method that webpack doesn&#x27;t know about.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Where the fun begins</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> funport</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> Function</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">url</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">return import(url)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p>Now you can use <code>funport</code> to dynamically import modules in your application!</p>
<p>Here&#x27;s a quick example:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">createElement</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> funport</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">https://esm.sh/react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> App</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#59873A;--shiki-dark:#80A665"> createElement</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">h1</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Hello, World!</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/funport.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[My Current AI Stack]]></title>
            <link>https://matthamlin.me//2024/april/my-current-ai-stack</link>
            <guid>https://matthamlin.me//2024/april/my-current-ai-stack</guid>
            <pubDate>Fri, 05 Apr 2024 16:46:50 GMT</pubDate>
            <description><![CDATA[I've been using a variety of AI tools as of late, I figured I'd document the ones I'm primarily using!]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve been using a variety of AI tools for a bit now, and figured that I&#x27;d at least start to document what I&#x27;m using and why. This is a work in progress, and I&#x27;ll update it as I change my stack!</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>If I haven&#x27;t updated this recently, feel free to pester me about it on Twitter: <a target="_blank" rel="noopener noreferrer" href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-4 h-4 inline-block mr-1" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>@<!-- -->immatthamlin</a>!</p></div>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="my-current-stack">My Current Stack</h2>
<ul>
<li><strong><a href="https://chat.openai.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">ChatGPT</a></strong>: This is usually my go-to for in-depth conversations and iterative thinking. I&#x27;ve been paying for the pro plan for a couple of months now.</li>
<li><strong><a href="https://github.com/features/copilot/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">GitHub Copilot</a></strong>: I&#x27;ve really enjoyed using GitHub Copilot for my development needs. It&#x27;s not always the best but has improved a lot of the monotonous parts of my workflow.</li>
<li><strong><a href="https://www.perplexity.ai/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Perplexity.ai</a></strong>: Thanks to Arc, this has now been my go-to search engine for anything. I still de-opt back to Google for some things, but this has been a great tool for me.</li>
<li><strong><a href="https://claude.ai/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Anthropic Claude</a></strong>: This is a recent addition to my stack, I&#x27;ve used it intermittently in place of ChatGPT for some things. It&#x27;s been a great tool for me so far.</li>
<li><strong><a href="https://www.raycast.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Raycast AI</a></strong>: I&#x27;ve been using Raycast for a while now, and the AI features have been a great addition to my workflow.</li>
<li><strong><a href="https://www.notion.so/help/guides/using-notion-ai" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Notion AI</a></strong>: I haven&#x27;t honestly been using Notion&#x27;s AI offering too much, but I&#x27;ve been attempting to use Notion more and more. I feel like there&#x27;s more opportunity here.</li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/my-current-ai-stack.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Configuring Cloudflare Domains with Vercel]]></title>
            <link>https://matthamlin.me//2024/april/configuring-cloudflare-domains-with-vercel</link>
            <guid>https://matthamlin.me//2024/april/configuring-cloudflare-domains-with-vercel</guid>
            <pubDate>Fri, 05 Apr 2024 08:39:10 GMT</pubDate>
            <description><![CDATA[I've started to use Cloudflare to manage my domains for several side projects, have had to jump through the same hooks multiple times that I figured I should document them here!]]></description>
            <content:encoded><![CDATA[<p>I&#x27;ve been using Cloudflare to register new domain names a few times in the past few weeks. I&#x27;ve also been using Vercel to host my projects. I&#x27;ve found that the process of configuring a domain name registered with Cloudflare to work with Vercel is a bit tricky. Here&#x27;s how I did it.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="step-1-register-the-domain-with-cloudflare">Step 1: Register the domain with Cloudflare</h2>
<p>Visit the Cloudflare <a href="https://dash.cloudflare.com/c9bcc2abba841ea49f5f6e1d79f58450/domains/register" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">domain registration</a> website to buy your new domain.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="step-2-add-the-domain-to-vercel">Step 2: Add the domain to Vercel</h2>
<p>If you don&#x27;t already have a project setup on Vercel, do that first by visiting <a href="https://vercel.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">vercel.com</a> and starting a new project. Once you have a project setup, visit the project settings and add the domain to the project.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="step-3-configure-the-domain-on-cloudflare">Step 3: Configure the domain on Cloudflare</h2>
<p>This part is fairly straight forward, the domain settings page for your project on Vercel will outline the records you will need to add to Cloudflare. Add the records to Cloudflare and wait for them to propagate (in my experience this has been effectively within a minute or two).</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="step-4-configure-ssltls-on-cloudflare">Step 4: Configure SSL/TLS on Cloudflare</h2>
<p>This is the part that I found a bit tricky. You need to set the SSL/TLS encryption mode to &quot;Full&quot; or &quot;Full (strict)&quot; in the SSL/TLS settings page on Cloudflare. This is because Vercel uses a wildcard certificate for all of its projects, and Cloudflare will not be able to verify the certificate if you don&#x27;t set this.</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p><strong>Tip!</strong> If you skip this step, you may end up seeing an <code>err_too_many_redirects</code> in your browser when attempting to visit your new domain.</p><p>You need to configure the above SSL/TLS setting to at least &quot;Full&quot; in order for this to work!</p><p>See these <a href="https://vercel.com/guides/resolve-err-too-many-redirects-when-using-cloudflare-proxy-with-vercel" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">docs</a> for more information.</p></div>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="step-5-launch">Step 5: Launch</h2>
<p>At this point your domain and project should all be set up and ready to go. You can now visit your new domain and see your project live!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/configuring-cloudflare-domains-with-vercel.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[React Error Boundaries: Revisited]]></title>
            <link>https://matthamlin.me//2024/march/react-error-boundaries-revisited</link>
            <guid>https://matthamlin.me//2024/march/react-error-boundaries-revisited</guid>
            <pubDate>Fri, 29 Mar 2024 17:00:24 GMT</pubDate>
            <description><![CDATA[Revising my previous blog post on React Error Boundaries and my preferred go-to implementation!]]></description>
            <content:encoded><![CDATA[<p>First off - if you haven&#x27;t already I recommend giving my old <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2019/january/react-error-boundaries">React Error Boundaries blog post</a> a read through, that post covers the basics of error boundaries. Once you&#x27;ve read it, jump back here to learn more!</p>
<p>Since I last published that blog post, there have been quite a few advancements in and around React, including but not limited to React Server Components!</p>
<p>Sadly however, we still need to use class components for error boundaries at the time of writing. Who knows, maybe in another 5 years this will have finally changed?!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="my-go-to-implementation">My Go To Implementation</h2>
<p>In most of my projects I reach for the following Error Boundary implementation, it offers a decent amount of flexibility where I want it, but also isn&#x27;t too over the top.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">use client</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">Component</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#1E754F;--shiki-dark:#4D9375"> type</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">ComponentType</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ReactNode</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Props</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  children</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">ReactNode</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  fallback</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">ComponentType</span><span style="color:#999999;--shiki-dark:#666666">&lt;{</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    reset</span><span style="color:#999999;--shiki-dark:#666666">(): </span><span style="color:#2E8F82;--shiki-dark:#5DA994">void</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    error</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">Error</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }&gt;;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">type</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> State</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  error</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">Error</span><span style="color:#999999;--shiki-dark:#666666"> | </span><span style="color:#AB5959;--shiki-dark:#CB7676">null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ErrorBoundary</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#59873A;--shiki-dark:#80A665"> Component</span><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">Props</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> State</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  state</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">State</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    error</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  static</span><span style="color:#59873A;--shiki-dark:#80A665"> getDerivedStateFromError</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">error</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">Error</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">error</span><span style="color:#999999;--shiki-dark:#666666">};</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  reset</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">    this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">setState</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#998418;--shiki-dark:#B8A965">error</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">});</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  render</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">error</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">children</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fallback</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Fallback</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">error</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Fallback</span><span style="color:#B07D48;--shiki-dark:#BD976A"> reset</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">reset</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B07D48;--shiki-dark:#BD976A"> error</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">error</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> children</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>This implementation is pretty simple, it uses the <code>getDerivedStateFromError</code> lifecycle method to catch any errors thrown from its children. If an error is caught, it will render the <code>fallback</code> component, passing in the error and a <code>reset</code> function.</p>
<p>This <code>reset</code> function can be used to reset the error state, allowing the user to retry whatever action caused the error in the first place.</p>
<p>Here&#x27;s an example implementation:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">ErrorBoundary</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./ErrorBoundary</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> ErrorFallback</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#B07D48;--shiki-dark:#BD976A">reset</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> error</span><span style="color:#999999;--shiki-dark:#666666">})</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">p</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">Oh no, an error has occurred</span><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">p</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span><span style="color:#B07D48;--shiki-dark:#BD976A"> onClick</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">reset</span><span style="color:#999999;--shiki-dark:#666666">}&gt;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">Retry</span><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> MyComponent</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">ErrorBoundary</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fallback</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">ErrorFallback</span><span style="color:#999999;--shiki-dark:#666666">}&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">ComponentThatMayThrow</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">ErrorBoundary</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/react-error-boundaries-revisited.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Exporting Custom Slack Emoji]]></title>
            <link>https://matthamlin.me//2024/march/exporting-custom-slack-emoji</link>
            <guid>https://matthamlin.me//2024/march/exporting-custom-slack-emoji</guid>
            <pubDate>Mon, 25 Mar 2024 11:45:33 GMT</pubDate>
            <description><![CDATA[How to easily mass-export your custom slack emoji without API access!]]></description>
            <content:encoded><![CDATA[<div class="rounded-lg bg-muted px-4 py-0.5"><p>This workflow has been proven to work at the end of March 2024, it may break in the future!</p></div>
<p>At work we recently bypassed over 60k custom slack emoji in our workspace, and I&#x27;d been meaning to download them locally so I could reference them in other discussions outside of slack with past and present coworkers.</p>
<p>I did some scavenging on Google (actually Perplexity) and found a fairly active <a href="https://gist.github.com/lmarkus/8722f56baf8c47045621" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Gist</a> that seems to have captured a few different routes to accomplish the use case, but some of the API has changed since then.</p>
<p>So I figured I&#x27;d document what I did to accomplish this in case others are looking for a similar solution!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="steps">Steps:</h2>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="download-emoji-metadata">Download emoji metadata:</h3>
<ol>
<li>Visit your <code>/customize/emoji</code> page in a browser of your choosing
a. This should look roughly like: <code>https://&lt;organization&gt;.slack.com/customize/emoji</code></li>
<li>Open the network panel and look for a request to the <code>emoji.adminList</code> endpoint</li>
<li>Copy that request as <code>fetch</code> (right click the request, copy as -&gt; <code>fetch</code> in Chrome/Arc)</li>
<li>Copy the below snippet and paste it into the console
a. This snippet only defines a few helper functions, it won&#x27;t do anything malicious, but validate it for yourself if you&#x27;d like!</li>
</ol>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Function to fetch a page of emoji</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> fetchPage</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">pageNum</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let </span><span style="color:#B07D48;--shiki-dark:#BD976A">res</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> TODO</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let </span><span style="color:#B07D48;--shiki-dark:#BD976A">json</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#B07D48;--shiki-dark:#BD976A"> res</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">json</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> json</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// function to download a JSON file automatically from the console in devtools</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> downloadFile</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">content</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fileName</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> contentType</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let </span><span style="color:#B07D48;--shiki-dark:#BD976A">anchor</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> document</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">createElement</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">a</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  document</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">body</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">appendChild</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">anchor</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let </span><span style="color:#B07D48;--shiki-dark:#BD976A">file</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new </span><span style="color:#59873A;--shiki-dark:#80A665">Blob</span><span style="color:#999999;--shiki-dark:#666666">([</span><span style="color:#B07D48;--shiki-dark:#BD976A">content</span><span style="color:#999999;--shiki-dark:#666666">],</span><span style="color:#999999;--shiki-dark:#666666"> { </span><span style="color:#998418;--shiki-dark:#B8A965">type</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B07D48;--shiki-dark:#BD976A">contentType</span><span style="color:#999999;--shiki-dark:#666666"> });</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  anchor</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">href</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> URL</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">createObjectURL</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">file</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  anchor</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">download</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fileName</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  anchor</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">click</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Function to batch download emoji</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> downloadAllEmoji</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">start</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> stop</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">pageNum</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> start</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> pageNum</span><span style="color:#999999;--shiki-dark:#666666"> &lt;=</span><span style="color:#B07D48;--shiki-dark:#BD976A"> stop</span><span style="color:#999999;--shiki-dark:#666666">;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> pageNum</span><span style="color:#AB5959;--shiki-dark:#CB7676">++</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let </span><span style="color:#B07D48;--shiki-dark:#BD976A">json</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> fetchPage</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">pageNum</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let </span><span style="color:#B07D48;--shiki-dark:#BD976A">content</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> JSON</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">stringify</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">json</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    downloadFile</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">content</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span><span style="color:#B56959;--shiki-dark:#C98A7D">page-</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">pageNum</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">application/json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<ol start="5">
<li>Replace the <code>TODO</code> within <code>fetchPage</code> with the copied <code>fetch</code> request from the network panel</li>
<li><strong>Important!</strong> Look in the request body of the <code>fetch</code> you copied for a <code>page: 1</code> entry, and replace the <code>1</code> with <code>${pageNum}</code> - you&#x27;ll also need to change the body to a template string!</li>
<li>Run <code>downloadAllEmoji</code> with a start value &gt;= 1 and a stop value &lt;= the max number of pages (you can look at the <code>emoji.adminList</code> request for page 1 to see the maximum number of pages)</li>
</ol>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="download-images">Download images:</h3>
<p>To download the actual images, you&#x27;ll want to:</p>
<ol>
<li>Move the downloaded metadata files into a shared directory</li>
<li>Initialize a new <a href="https://bun.sh/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Bun</a> project within that directory by running <code>bun init</code></li>
<li>Paste in the following snippet into <code>index.ts</code>:</li>
</ol>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> fg</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">fast-glob</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> loadAllEmoji</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const </span><span style="color:#B07D48;--shiki-dark:#BD976A">files</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> fg</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">page-*.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const </span><span style="color:#B07D48;--shiki-dark:#BD976A">emojis</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> [];</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">const </span><span style="color:#B07D48;--shiki-dark:#BD976A">file</span><span style="color:#AB5959;--shiki-dark:#CB7676"> of</span><span style="color:#B07D48;--shiki-dark:#BD976A"> files</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    const </span><span style="color:#B07D48;--shiki-dark:#BD976A">json</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Bun</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">file</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">file</span><span style="color:#999999;--shiki-dark:#666666">).</span><span style="color:#59873A;--shiki-dark:#80A665">json</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">json</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">emoji</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      throw</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> Error</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">        &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Emoji not found in </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          file</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">          &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">, did the response get rate limited? Check the file and re-download if needed!</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    emojis</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">push</span><span style="color:#999999;--shiki-dark:#666666">(...</span><span style="color:#B07D48;--shiki-dark:#BD976A">json</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">emoji</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> emojis</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> downloadEmoji</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">emojiList</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  for</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">emoji</span><span style="color:#AB5959;--shiki-dark:#CB7676"> of</span><span style="color:#B07D48;--shiki-dark:#BD976A"> emojiList</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let </span><span style="color:#B07D48;--shiki-dark:#BD976A">res</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> fetch</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">emoji</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">url</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    console</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">log</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Downloading: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B07D48;--shiki-dark:#BD976A"> emoji</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">name</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D"> (</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B07D48;--shiki-dark:#BD976A"> idx</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">of </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B07D48;--shiki-dark:#BD976A"> emojiList</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">length</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    await</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Bun</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">write</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./emojis/</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B07D48;--shiki-dark:#BD976A"> emoji</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">name</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">.</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#B07D48;--shiki-dark:#BD976A"> emoji</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">url</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">split</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">.</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">).</span><span style="color:#59873A;--shiki-dark:#80A665">at</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">),</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      res</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let </span><span style="color:#B07D48;--shiki-dark:#BD976A">emoji</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> loadAllEmoji</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">await</span><span style="color:#59873A;--shiki-dark:#80A665"> downloadEmoji</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">emoji</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<ol start="4">
<li>Install <code>fast-glob</code> via <code>bun add fast-glob</code></li>
<li>Run the above script via <code>bun ./index.ts</code></li>
</ol>
<p><strong>Note!</strong> If you have a lot of emoji, this will take a while! It downloads the images synchronously to avoid being rate limited.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="recommendations">Recommendations:</h2>
<p>I recommend not trying to run through all pages at once when fetching the emoji metadata, as sometimes Slack may not be able to handle the requests.</p>
<p>In my case, since we had ~600 pages to go through, I started with chunks of 25 then went up to 100 pages at a time.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/exporting-custom-slack-emoji.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Custom Favicon Recipes]]></title>
            <link>https://matthamlin.me//2024/march/custom-favicon-recipes</link>
            <guid>https://matthamlin.me//2024/march/custom-favicon-recipes</guid>
            <pubDate>Fri, 22 Mar 2024 22:48:30 GMT</pubDate>
            <description><![CDATA[Two neat tricks for enhancing your site's favicon!]]></description>
            <content:encoded><![CDATA[<p>The other day I was reminded of two neat tricks related to customizing your favicon to bring some delight to your website visitors and also to improve your development flow - all thanks to <a target="_blank" rel="noopener noreferrer" href="https://twitter.com/scottykaye" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-4 h-4 inline-block mr-1" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>@<!-- -->scottykaye</a>!</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>If you want to skip right to the code, checkout both recipes in my <a href="https://github.com/hamlim/custom-favicons-recipes" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">hamlim/custom-favicon-recipes</a> repo!</p></div>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="customizing-favicons-for-light-and-dark-mode">Customizing Favicons for Light and Dark Mode</h2>
<p>The first recipe is a neat way to change the favicon of your site based on the preferred color scheme of the visitor. You can use the <code>&lt;link /&gt;</code> tag&#x27;s <code>media</code> attribute
to have the browser &quot;choose&quot; the preferred icon based on light or dark mode.</p>
<p>If you&#x27;re writing plain old html (or using some framework that gives you control over the html), you can use the below snippet to accomplish this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">head</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">link</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rel</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">icon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> href</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./light-mode-favicon.ico</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> media</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">(prefers-color-scheme: light)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">link</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rel</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">icon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> href</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./dark-mode-favicon.ico</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> media</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">(prefers-color-scheme: dark)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">head</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span></code></pre>
<p>If you&#x27;re using <a href="https://nextjs.org/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Next.js</a> and it&#x27;s <code>metadata</code> or <code>generateMetadata</code> exports, you can do the following:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const </span><span style="color:#B07D48;--shiki-dark:#BD976A">metadata</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">Metadata</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  title</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Custom light/dark mode favicons</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  description</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Generated by create next app</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  icons</span><span style="color:#999999;--shiki-dark:#666666">: [</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      rel</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">icon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      url</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./sun-favicon.ico</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      media</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">(prefers-color-scheme: light)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      rel</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">icon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      url</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./moon-favicon.ico</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      media</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">(prefers-color-scheme: dark)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  ],</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>You can see this recipe in action on <a href="https://github.com/hamlim/custom-favicons-recipes/blob/main/apps/light-dark-favicons/app/layout.tsx" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this Next app</a>!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="customizing-favicons-for-development-and-production">Customizing Favicons for Development and Production</h2>
<p>This is a pretty neat trick that makes it just a bit easier to determine if you&#x27;re looking at the development version of your site or the production one.</p>
<p>We&#x27;ve all been there, we&#x27;re about 45 minutes into trying to debug an issue, you keep making more basic and basic changes to the code, refreshing the page
in the browser and still can&#x27;t see your changes. Only to then realize that you&#x27;ve been madly refreshing the production site expecting to find your
local changes.</p>
<p>With a custom icon for development, you&#x27;ll no longer get stuck in that situation again!</p>
<p>If you&#x27;re using <a href="https://nextjs.org/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Next.js</a> and it&#x27;s <code>metadata</code> or <code>generateMetadata</code> exports, you can do the following:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const </span><span style="color:#B07D48;--shiki-dark:#BD976A">metadata</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">Metadata</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  title</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Custom favicon per environment</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  description</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Generated by create next app</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  icons</span><span style="color:#999999;--shiki-dark:#666666">: [</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      rel</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">icon</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      url</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#B07D48;--shiki-dark:#BD976A">process</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">env</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">NODE_ENV</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">production</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        ?</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./env-favicon.ico</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">        :</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./env-favicon-dev.ico</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  ],</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>You can see this recipe in action on <a href="https://github.com/hamlim/custom-favicons-recipes/blob/main/apps/environment-favicons/app/layout.tsx" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this other Next app</a>!</p>
<hr/>
<p>Let me know if you know of other tips and tricks with customizing your site&#x27;s favicon!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/custom-favicon-recipes.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Corporate Sponsored OSS]]></title>
            <link>https://matthamlin.me//2024/march/corporate-sponsored-oss</link>
            <guid>https://matthamlin.me//2024/march/corporate-sponsored-oss</guid>
            <pubDate>Sun, 10 Mar 2024 15:03:29 GMT</pubDate>
            <description><![CDATA[The various risks and pitfalls of open source software run by corporations.]]></description>
            <content:encoded><![CDATA[<p>This tweet garnered a decent amount of attention (at least within OSS circles on Twitter) at the end of last year:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><p>What a joke of Open Source project is aws-amplify...</p><br/><br/><p>Feb 2021, I open a PR to aws-amplify/amplify-js, which I will never use, to fix a misusage of the History API that breaks any app relying on history state. It&#x27;s a ONE line fix.</p><br/><br/><p>8 months later, 1st reply from one of the‚Ä¶
‚Äî Eduardo.ùöüùöûùöé (@posva) <a href="https://twitter.com/posva/status/1738894999087981011?ref_src=twsrc%5Etfw">December 24, 2023</a></p></blockquote></div>
<p>It called out something that I&#x27;ve thought about a decent amount of the past few months, open source software projects owned and run by companies are ironically <strong>less sturdy</strong> than individual or collective run open source software projects.</p>
<p>To fully understand, we need to get a better overall view of the dynamics of a company open sourcing a project. Often there are a variety of internal pressures (developers wanting to open source to showcase a solution, teams wanting to prioritize feature work over open source maintenance, leadership looking for popularity), these all mix together to result in what feels like a worse overall product.</p>
<p>Unfortunately, what I&#x27;ve seen first hand, is that the team / company ends up out weighing the wants of the individuals to stop maintaining the open source software. This pushes some individuals to give up on supporting the project, or some to put in extra hours to support it outside of work also.</p>
<p>Additionally, when the champions of the project internally move on (either leaving the team to another one, or leaving the company entirely), the project will slowly rot away. Sometimes others will chip in and support the project, but usually it will just collect dust.</p>
<p>Often also, the only reason that leadership at these companies wants to pursue open source software development is for the public relations / image benefits that come with it. Mostly this is done to convince people to apply and work at the company.</p>
<p>With all of this however, at best open source software from companies really just means &quot;shared source software&quot;, rarely (if ever) will external contributions be supported or even acknowledged.</p>
<p>Ideally, corporate backed open source software feels like the best balance, provide a way to open source a project while backing it with real funding. However in practice it often never reaches that ideal state.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/corporate-sponsored-oss.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The Library-Docs Monorepo Template]]></title>
            <link>https://matthamlin.me//2024/february/library-docs-monorepo-template</link>
            <guid>https://matthamlin.me//2024/february/library-docs-monorepo-template</guid>
            <pubDate>Thu, 15 Feb 2024 17:30:53 GMT</pubDate>
            <description><![CDATA[A monorepo template for managing a library and documentation together.]]></description>
            <content:encoded><![CDATA[<p>I was talking with <a target="_blank" rel="noopener noreferrer" href="https://twitter.com/scottykaye" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-4 h-4 inline-block mr-1" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>@<!-- -->scottykaye</a> the other day
since he was starting to scaffold out a small frontend app to demo and document
one of his open source libraries, and brought up using a monorepo to support
both the library (which can be published to NPM) and a documentation site (and
more).</p>
<p>He wanted to learn a bit more about the setup and recommended that I write a
brief blog post about the structure that I usually reach for in these cases,
which I&#x27;ve iterated on quite a bit since some of my very early open source
endeavors.</p>
<p>If you just want to get started with the template and don&#x27;t care too much about
how to set it up yourself, you can start from this
<a href="https://github.com/hamlim/template-monorepo" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">template monorepo</a>.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="recommended-tooling">Recommended Tooling:</h2>
<p>These days I mostly use <a href="https://bun.sh" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Bun</a> as my package manager for my
projects, so I&#x27;ll be using it in this blog post, but the same setup should work
perfectly fine with <code>yarn</code> and <code>pnpm</code> (and probably <code>npm</code> as well - but I
haven&#x27;t used it personally).</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="setup">Setup:</h2>
<p>Setup a repo with a root <code>package.json</code> that includes a <code>workspaces</code> key that
includes two entries: <code>[&quot;docs&quot;, &quot;packages/*&quot;]</code>.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">private</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">workspaces</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">docs</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">packages/*</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  ]</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Then create the <code>docs</code> and <code>packages</code> directories.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">mkdir</span><span style="color:#B56959;--shiki-dark:#C98A7D"> docs</span><span style="color:#B56959;--shiki-dark:#C98A7D"> packages</span></span></code></pre>
<p>Within the <code>docs</code> dir, you can create a documentation site using your favorite
tools (personally I use Next at the moment):</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#998418;--shiki-dark:#B8A965">cd</span><span style="color:#B56959;--shiki-dark:#C98A7D"> docs</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">bunx</span><span style="color:#B56959;--shiki-dark:#C98A7D"> create-next-app</span><span style="color:#B56959;--shiki-dark:#C98A7D"> .</span></span></code></pre>
<p>and within the <code>packages</code> dir, you can create another directory named the same
as your package:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#998418;--shiki-dark:#B8A965">cd</span><span style="color:#B56959;--shiki-dark:#C98A7D"> packages</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">mkdir</span><span style="color:#B56959;--shiki-dark:#C98A7D"> my-package</span></span></code></pre>
<p>Inside your package directory, you&#x27;ll want to setup a new package like you
normally might (either using something like <code>bun init</code> or manually creating your
<code>package.json</code> and other config).</p>
<p>To use your package within your docs site, you can add it to the dependencies
within your <code>docs/package.json</code> file:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">name</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">docs</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">dependencies</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">    &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">my-package</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">workspace:*</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>Tip: The <code>workspace:*&quot;</code> specifier is a common pattern supported by modern
package managers that let&#x27;s you declare a local workspace dependency, at any
version!</p></div>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="additional-ideas">Additional Ideas</h2>
<p>The great part about this setup - is that you can continue to add on workspaces
from the repo as you need them.</p>
<ul>
<li>Do you need a workspace to add end-to-end tests for your package, create an
<code>e2e</code> workspace by adding it to the <code>workspaces</code> array in the root
<code>package.json</code> and create a directory for it!</li>
<li>Do you want a kitchen-sink like demo application that isn&#x27;t necessarily the
same as your docs site? Create a <code>kitchen-sink</code> directory and workspace!</li>
<li>Have some additional tools / packages you&#x27;d like to split off, you can easily
spin up additional workspaces within your <code>packages/</code> directory!</li>
</ul>
<p>The capabilities are endless!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="summary">Summary</h2>
<p>While this isn&#x27;t really that new of a concept - folks have been using monorepos
for a while within the frontend development space, I feel like it&#x27;s often
overlooked for single-package repositories when it still has some nice benefits.
It&#x27;s made me wonder if we even need single-workspace repos at all!</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/library-docs-monorepo-template.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Building Better Beacon]]></title>
            <link>https://matthamlin.me//2024/january/building-better-beacon</link>
            <guid>https://matthamlin.me//2024/january/building-better-beacon</guid>
            <pubDate>Tue, 16 Jan 2024 07:04:58 GMT</pubDate>
            <description><![CDATA[How we solved an almost show-stopping production bug, and how you can avoid it in your own projects.]]></description>
            <content:encoded><![CDATA[<p>Over the past year or so we&#x27;ve been rebuilding a core library that supports
tracking business KPI and metrics across our various web and native app
experiences.</p>
<p>This involved quite a bit of work from a variety of teams, I acted as one of the
lead architects in designing the web integration for the new system, and worked
with my team to build it out and get the first iteration in production.</p>
<p>It had been smooth sailing for several months across the first few experiences
that adopted the new version of the core library, at least until the other week
where we identified a show stopping bug.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="background">Background</h2>
<p>The library leverages
<a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>navigator.sendBeacon</code></a>
to post event payloads to one of our internal processing gateways, we use this
data to get an overall sense of how users are browsing and interacting with our
sites, and it powers key business metrics like our visits, add to cart rate and
our overall conversion.</p>
<p>We chose sendBeacon because of it&#x27;s slightly stronger guarantee that the browser
won&#x27;t drop the requests when a page is unloaded or navigated away from. This
gave us confidence that we could send richer content (via JSON payloads) than
our previous system, and also allow us to track key interactions before they
resulted in the customer navigating to another page.</p>
<p>Our previous iteration of this system, which was about 6 years old or so,
heavily relied upon cookies and sending data via image requests (which greatly
inhibited the size and fidelity of the data we could collect).</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="the-bug">The Bug</h2>
<p>We&#x27;ve been adopting this new core library on several experiences as of late, and
on one of them we noticed that we were queuing up a large number of these events
via <code>sendBeacon</code>, so many in fact that the browser would effectively stall and
no longer send the requests.</p>
<p>In the DevTools Network panel they&#x27;d all show up as <code>(pending)</code> without any
clear indicator on why they weren&#x27;t being flushed.</p>
<p>At first, we thought it could be due to some limit on the total number of
connections being made, but there seemed to be no other network requests that
would similarly get stuck.</p>
<p>We did some research and found out a painful little caveat with <code>sendBeacon</code>
(and one that also applies to <code>fetch</code> <code>keepalive</code> which we considered as an
alternative also):</p>
<ol>
<li>The payload to be sent must be smaller that 64kb (for Chrome, seems other
browsers also use a similar limit)
<a href="https://www.w3.org/TR/beacon/#return-value" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">source</a></li>
<li>The total size of the queued payloads to be sent must be smaller than 64kb</li>
</ol>
<p>We checked our pending requests and none of them got close to the 64kb limit, we
then tallied up our total requested payload size and got a bit worried.</p>
<p>Our first read through of the second limitation was that it was 64kb in total
for the lifetime of a page. In that case it&#x27;d only take about a hundred or so
requests (with an average size of ~500b) before we hit that cap.</p>
<p>Honestly, we were pretty concerned that we&#x27;d need to go back to the drawing
board and consider alternative ways to send these payloads.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="good-fortune">Good Fortune</h2>
<p>Fortunately however, some of my teammates re-read the limitations of sendBeacon,
and found further evidence that the second limitation only applied to <em>queued</em>
requests, not <em>completed</em> requests. So we would only hit this <code>pending</code> state
for requests if there are other requests in-flight and the size of their payload
in total is over that 64kb limit.</p>
<p>This is where the teammates had a bright idea, we could retry these requests a
little bit later if they get stuck in the pending state. Fortunately again, the
<code>navigator.sendBeacon</code> api returns a boolean indicating if the browser can send
the request, if it is <code>false</code> then that means we have hit either size
limitation.</p>
<p>So if we encounter any such request, we can wait a little bit (via <code>setTimeout</code>,
<code>requestAnimationFrame</code>, etc), and then retry it.</p>
<p>We opted for a queue, so we can enqueue any pending requests, and otherwise pop
them from the queue if they can be sent.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="resolution">Resolution</h2>
<p>In the end, we opted for an implementation that seemed to work quite well.</p>
<p>I&#x27;ve taken the patterns we worked on internally and implemented them within this
public NPM package so others don&#x27;t run into the same issue as we did:
<a href="https://www.npmjs.com/package/better-beacon" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>better-beacon</code></a>. The code for the
library is available <a href="https://github.com/hamlim/better-beacon" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">on my GitHub</a> as
well.</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/building-better-beacon.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Project Deep Dive: Tails]]></title>
            <link>https://matthamlin.me//2023/december/project-deep-dive-tails</link>
            <guid>https://matthamlin.me//2023/december/project-deep-dive-tails</guid>
            <pubDate>Sat, 30 Dec 2023 11:05:29 GMT</pubDate>
            <description><![CDATA[A(nother) deep dive into one of my recent side projects; tails - a plain and simple cocktail recipe app.]]></description>
            <content:encoded><![CDATA[<p>I took about a week and a half off of work starting just before Christmas and
ending right after New Years, I usually use this time to dig into a meaty
project (sometimes related to this blog) and this year was no exception!</p>
<p>I had a few other projects in mind coming into this break but didn&#x27;t feel too
motivated to work on them. Instead I took the break slow, mainly focusing on my
own working process (revamping my Notion setup) and also getting some
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/bookshelf">reading</a> in.</p>
<p>However, about halfway into my time off, I found an itch that I just had to
scratch.</p>
<p>My dad and I share new cocktail recipes back and forth fairly
often<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>, usually in the form of TikTok clips. We&#x27;ve also been
selecting usually a single (or a couple) specific cocktails that we want to make
for the holidays.</p>
<p>However, we always ask the same questions:</p>
<blockquote>
<p>What ingredients do we need for that one cocktail you wanted to make?</p>
</blockquote>
<blockquote>
<p>What was the recipe for that special cocktail again?</p>
</blockquote>
<p>This year also, we made one of our favorites from last year
(<a href="https://tails-theta.vercel.app/recipe/1" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">The Polar Empress</a>) for my
grandparents as well, and the next day my Grandma wanted to get the recipe for
the drink.</p>
<p>Since she had asked about it, and since both of the above questions are common
enough, I felt like it&#x27;d be interesting to build a quick and dirty web app to
store cocktail recipes that we can then refer to later<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->2</span></button></span><sup id="fn-2" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-2" class="text-primary hover:underline focus:underline">[<!-- -->2<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>And so, I started hacking on <a href="https://tails-theta.vercel.app/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Tails</a>.</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>üöß <em>Be warned, there&#x27;s still a ton of things I need to get properly
setup with this version of the service, but feel free to mess around and report
any bugs <a href="https://github.com/hamlim/tails" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">here</a></em>. üöß</p></div>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="what-is-tails">What is Tails?</h2>
<p><a href="https://tails-theta.vercel.app/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Tails</a> is a very basic
<button data-state="closed" data-slot="tooltip-trigger"><abbr title="Create Read Update Delete">CRUD</abbr></button><span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->3</span></button></span><sup id="fn-3" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-3" class="text-primary hover:underline focus:underline">[<!-- -->3<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup> web
app for saving and sharing cocktail recipes. That&#x27;s it at the moment, no social
features, no fancy whiz-bang features, just saving recipes!</p>
<p>It has a very basic version of auth/user accounts at the moment, allows you to
add a recipe (with a title, description, steps, and ingredients), and also
supports sharing those recipes with universal links (viewable to those without
an account on Tails).</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="how-does-it-work">How does it work?</h2>
<p>Similar to <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/november/project-deep-dive-microfibre">microfibre</a>, Tails is
built with two primary layers:</p>
<ul>
<li>API</li>
<li>Frontend Web Client</li>
</ul>
<p>The API is built on Cloudflare Workers (using Cloudflare D1 as the storage
solution, <a href="https://hono.dev/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">honojs</a> to handle routing, and
<a href="https://v3.lucia-auth.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">lucia</a> for auth), and the frontend web client is
built with Next.js and deployed to Vercel.</p>
<p>The client interactions are all for the most part plain old forms using React
Server Components and Server Actions. The Next.js server then interacts with the
API hosted on Cloudflare.</p>
<p>The code is fully open source and available here:
<a href="https://github.com/hamlim/tails" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">hamlim/tails</a>, feel free to peruse the source
and open issues for questions/comments/contributions.</p>
<p>If you
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/november/project-deep-dive-microfibre">read my microfibre deep dive</a>,
this tech stack probably sounds pretty familiar! I&#x27;ve been really enjoying
Cloudflare&#x27;s platform offerings, and I&#x27;m particularly interested in exploring
Cloudflare R2 storage soon as well!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="the-future">The Future</h2>
<p>There&#x27;s still a ton of things I want to build into the service, the first of
which might be building up user profiles a bit more (so you can see who shared
what cocktails) - however I don&#x27;t think there&#x27;s that much future for a social
aspect built into the site!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Ok ok, it&#x27;s usually me sending him cocktail recipes, but
still</p>
<p id="fnref-2" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-2" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Now I know you&#x27;re saying &quot;but matt, there&#x27;s a dozen such
services out there for this use case, why build yet another one?&quot; and to that I
say - because I wanted to!</p>
<p id="fnref-3" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-3" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->At the moment, it doesn&#x27;t even support updating or deleting
recipes! I&#x27;ll have to add that in the future!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/project-deep-dive-tails.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Churn Anxiety]]></title>
            <link>https://matthamlin.me//2023/december/churn-anxiety</link>
            <guid>https://matthamlin.me//2023/december/churn-anxiety</guid>
            <pubDate>Thu, 28 Dec 2023 19:37:13 GMT</pubDate>
            <description><![CDATA[When did semver major changes become so scary?]]></description>
            <content:encoded><![CDATA[<p>I recently ready this really good post titled
<a href="https://dubroy.com/blog/cold-blooded-software/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Cold-blooded Software</a>, and it
got me thinking about the two primary reasons that I tend to avoid adopting new
software:</p>
<ul>
<li>There&#x27;s a semver major change coming soon</li>
<li>The software has become abandoned</li>
</ul>
<p>The second feels reasonable, why invest in something that is no longer
maintained, no longer gets bug fixes or new features, or nowadays more
importantly keeps up to date with the other libraries and frameworks that it
gets adopted alongside. A recent example of this was that I wanted to look at
adopting <a href="https://contentlayer.dev/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Contentlayer</a> for my personal blog, however
I checked a few open issues and noticed that the core maintainer of the library
hasn‚Äôt been active for a number of months at the time.</p>
<p>My immediate reaction was that I didn‚Äôt want to adopt it because it might not
keep up to date with other features or libraries that I used in my personal
blog.</p>
<p>However, this isn&#x27;t the point of the post, instead the first reason above I
haven‚Äôt really seen much content be produced about, but it honestly keeps me
away from libraries and frameworks far more often than the abandonware case, and
it seems like it impacts others just the same:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><p><p lang="en" dir="ltr">Coming from frontend land, seeing htmx 2.0 is on the horizon (not released yet), I assumed htmx 2.0 shipped with tons of breaking or at least some ground breaking change that will force me to rewrite my app and.. nope.<br/>Feels like a parallel universe or something üòÇ</p>‚Äî flavio (@flaviocopes) <a href="https://twitter.com/flaviocopes/status/1740431831210848733?ref_src=twsrc%5Etfw">December 28, 2023</a></p></blockquote></div>
<p>Spending time and effort to invest into a library or a framework (or a language
for that matter), only to have that be turned on it&#x27;s head following a semver
major release is disheartening.</p>
<p>You feel like you&#x27;re making progress, beginning to understand the system, it&#x27;s
API, the extents of the system, even it&#x27;s trade offs, and then you need to throw
that all out the window and start over.</p>
<p>Even for libraries that pride themselves on making minimal breaking changes get
burnt by those that don&#x27;t. Someone gets burnt by the Common JS to ES Module
migration on NPM, and now they feel like the semver major release of Next.js
from 13.x to 14 is going to impossible to work through<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>I&#x27;m not sure what the solution is here, maybe myself (and others) can get more
comfortable software changing. Or, just maybe, we can start to harden our
software, make it more slow moving and slow updating, and also maybe vendoring
in more things instead of depending upon as many libraries as we do.</p>
<hr/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Although I didn&#x27;t find that upgrade all that painful, even
though some of their semver minor releases have been painful in the
past.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/churn-anxiety.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Service Monitors and Observability]]></title>
            <link>https://matthamlin.me//2023/december/service-monitors-and-observability</link>
            <guid>https://matthamlin.me//2023/december/service-monitors-and-observability</guid>
            <pubDate>Wed, 27 Dec 2023 15:18:53 GMT</pubDate>
            <description><![CDATA[Leveraging service monitors properly to improve service observability.]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Thanks to <a href="https://www.scottykaye.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Scott Kaye</a> for reviewing an early
draft of this post</p>
</blockquote>
<p>Awhile back I <del>tweeted</del> <em>made this post on X</em> about being intentional when
creating service monitors:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><p><p lang="en" dir="ltr">This became my go-to question when we were defining additional monitors for our services over the past month or so:<br/><br/>‚ÄúIf you get paged by this at 2am, do you know what it means/what to do?‚Äù<br/><br/>It‚Äôs a really solid litmus test to ensure monitors are clear, concise, and actionable <a href="https://t.co/YpFhbCW34G"><a href="https://t.co/YpFhbCW34G" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://t.co/YpFhbCW34G</a></a></p>‚Äî Matt Hamlin (@immatthamlin) <a href="https://twitter.com/immatthamlin/status/1685272797512392705?ref_src=twsrc%5Etfw">July 29, 2023</a></p></blockquote></div>
<p>I figured I would expand a bit on it within a blog post since I have thought a
decent amount about it since I posted it.</p>
<p>For those that don&#x27;t know, service monitors are automatic &quot;tests&quot; that can be
used to determine the health of a system in production. They can be configured
for just about anything, latency and up-time are generally the most popular
monitors.</p>
<p>Traditionally, monitors are configured to automatically raise an incident, which
usually pages someone that is currently on-call for the service.</p>
<p>However, as uncle Ben says -
<a href="https://i.imgur.com/lIAMtJt.mp4" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">with great power comes great responsibility</a>.</p>
<p>It can be nerveracking to be on-call for large and complex services, especially
if you&#x27;re new to the team that owns such a service. Now compound that with being
paged due to a monitor that is missing context about what&#x27;s actually wrong with
the service and what to do to resolve it.</p>
<p>This is what I was speaking to in the above post on Twitter/X, at work we
rapidly spun up a ton of new monitors for our core service after a particularly
interesting series of incidents (maybe I&#x27;ll write about those in the near
future). However, at the start we weren&#x27;t necessarily thinking about them from
the framing of the original post and instead we were mainly thinking about
adding more observability to the systems and service as a whole to help cover
some of the gaps identified in the previous incidents.</p>
<p>Fortunately, wiser minds on the team prevailed, and we started to become more
critical about the monitors we were creating. We started to add more context to
the monitors, outlining what it means for a particular monitor to be tripped,
and what one should do to help resolve the issue if it is happening.</p>
<p>We even started to cull back some of the many monitors we created for the
service, this may seem a bit counterintuitive but another risk of creating
monitors is adding noise to the engineers on-call. We found that we&#x27;d be paged
for issues that would auto-resolve in a short amount of time, or even those that
we couldn&#x27;t even do anything about during the time of the incident.</p>
<p>All of these patterns made it more difficult to support our services rather than
making it easier.</p>
<p>As with everything, there&#x27;s nuance. Service monitors offer a lot of benefits and
help improve overall service and system observability. However they must be
applied appropriately. Try to remember - what can this monitor tell me when I
get paged at 2 or 3 in the morning?</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/service-monitors-and-observability.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Type Safe process.env]]></title>
            <link>https://matthamlin.me//2023/december/type-safe-process-env</link>
            <guid>https://matthamlin.me//2023/december/type-safe-process-env</guid>
            <pubDate>Tue, 26 Dec 2023 14:34:43 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve found myself copy and pasting the same TypeScript snippet to add
type-safety for <code>process.env.&lt;X&gt;</code> references in my various projects. I figured I
should just write a brief blog post to help myself with this in the future.</p>
<p>Use this snippet to override <code>process.env</code> types:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">declare</span><span style="color:#B07D48;--shiki-dark:#BD976A"> global</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  namespace</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> NodeJS</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    interface</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ProcessEnv</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // Replace `KEY` with your env variables!</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      KEY</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">string</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#999999;--shiki-dark:#666666"> {};</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="recipe">Recipe:</h3>
<ul>
<li>Create a <code>types.d.ts</code> file at the root of the project</li>
<li>Insert the above snippet<!-- -->
<ul>
<li>Make sure to replace <code>KEY</code> with your env variables!</li>
</ul>
</li>
<li>Add <code>./types.d.ts</code> to the <code>includes</code> array in <code>tsconfig.json</code></li>
</ul>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/type-safe-process-env.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Consistent Local Ports with Wrangler]]></title>
            <link>https://matthamlin.me//2023/december/consistent-local-ports-with-wrangler</link>
            <guid>https://matthamlin.me//2023/december/consistent-local-ports-with-wrangler</guid>
            <pubDate>Tue, 26 Dec 2023 14:01:31 GMT</pubDate>
            <content:encoded><![CDATA[<p>For the life of me I couldn&#x27;t find any documentation on Cloudflare&#x27;s
<a href="https://developers.cloudflare.com/workers/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Worker Docs</a> nor the Wrangler CLI
<a href="https://github.com/cloudflare/workers-sdk" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">GitHub Repo</a> about this, so I
figured I should write a quick blog post to help out others (or mainly myself if
I ever forget this)!</p>
<details class="border border-green-400 rounded-md p-4 bg-green-50 dark:bg-green-900/20"><summary class="font-bold cursor-pointer underline underline-offset-1 decoration-wavy decoration-2 decoration-green-400">TL;DR</summary><div class="py-4"><p>Pass the <code>--port &lt;num&gt;</code> argument when running <code>wrangler dev</code>!</p></div></details>
<p>You can provide a <code>--port</code> CLI argument to the <code>wrangler dev</code> command to
configure the port that the service starts on locally.</p>
<p>This can be useful for testing the service locally (either manually or via some
sort of automation) to ensure that it&#x27;s always started on the same port instead
of a new one each time the service is started.</p>
<hr/>
<p><em>Edit!</em> I finally found it documented, but took a while to track it down in
their
<a href="https://developers.cloudflare.com/workers/wrangler/commands/#dev" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">docs here</a>.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/consistent-local-ports-with-wrangler.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On Adopting CSS-in-JS]]></title>
            <link>https://matthamlin.me//2023/december/on-adopting-css-in-js</link>
            <guid>https://matthamlin.me//2023/december/on-adopting-css-in-js</guid>
            <pubDate>Wed, 20 Dec 2023 05:29:30 GMT</pubDate>
            <description><![CDATA[A brief recap of how Wayfair changed it's CSS approach not once but twice in the span of 5 years!]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>As an aside, this blog post originally started fairly focused on the story of
our adoption of Styled Components, including going into some of the pain
points we wanted to solve with that adoption, however the recent shift to drop
Styled Components caused me to re-write a significant amount of the post.</p>
</blockquote>
<p>At Wayfair we&#x27;ve recently started to shift how we approach authoring CSS for our
web applications, and like most technology shifts across large companies, it&#x27;s
been an interesting journey.</p>
<p>I&#x27;ve been meaning to get around to this blog post for quite some time, I think
my first earliest drafts for this were created around January in 2021. Since
then I&#x27;ve shifted teams and mostly moved away from having a direct impact on the
direction for our CSS approach, however I&#x27;m still relatively close enough to the
work to hopefully have an interesting perspective on the topic.</p>
<p>To better set the stage I want to rewind a bit to around mid-2018 (yes, about 5
years ago at the time of publishing this post) the design systems team at
Wayfair was essentially maintaining three separate component libraries. We
supported a library meant for supporting our storefront experiences (those that
you normally interact with when visiting one of our websites), another library
for our suite of internal tools that mostly employees of the company used to do
their jobs, and one other library to support the supplier side of things that
suppliers selling their products on Wayfair directly interact with to manage
their offerings on our e-commerce platform.</p>
<p>Additionally, at that time we were a team of 4-5 software engineers maintaining
these three libraries, each library consisting of roughly 70 unique components!</p>
<p>However, the libraries supporting the internal and supplier experiences were
essentially copies of one another besides the theming, the internal system used
some different colors and a different font face than the supplier library but
they otherwise would receive the same updates.</p>
<p>My teammate <a target="_blank" rel="noopener noreferrer" href="https://twitter.com/@roginfarrer" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-4 h-4 inline-block mr-1" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>@<!-- -->@roginfarrer</a> was mostly focused on
supporting both of these component libraries, and lobbied the rest of the team
and our stakeholders to refactor and combine both of these libraries into a
single library that could leverage dynamic theming to achieve the stylistic
differences.</p>
<blockquote>
<p>Prior to this we were leveraging SCSS with a relatively custom build setup,
including a custom runtime bundler written in PHP paired with a custom
transpiler that wrapped babel and node-sass.</p>
</blockquote>
<p>We did some investigations into supporting a single library to be shared between
both the internal and supplier use cases leveraging SCSS in a similar setup that
we leveraged for our multiple brands across the storefront features, but we
couldn&#x27;t come up with a scalable approach that would integrate within our build
tooling at the time.</p>
<p>Instead, we looked at the available tooling for styling at the time and the
leaders in the space were Styled Components and Emotion. We ran some rough
benchmarks, right around the time of the Styled Components v5 release, which was
backed by React hooks and an overall performance improvement over what Emotion
was capable of at the time. One of the main criteria that we evaluated during
this investigation was support for dynamic theming, CSS Variables at the time
weren&#x27;t supported in all the browsers that we had to support unfortunately, so
we opted to look at JS solutions.</p>
<p>We opted to invest in Styled Components, feeling comfortable on the performance
aspects due to both how the current internal and supplier component libraries
were used as well as the API similarities between Styled Components and
Emotion - making a possible shift to the other framework in the future
relatively easy.</p>
<p>The re-write from two component libraries to a single shared one took a while,
partially because we were relatively short staffed at the time, but also we had
many competing priorities and effectively had to re-write while still supporting
the existing features and functionality.</p>
<p>I want to pause here and say that while many software re-write stories are
horrific and usually result in failures, I&#x27;m still amazed at the work that Rogin
and the rest of the team did to successfully implement this re-write all while
continuing to support the existing code, and being able to roll out the changes
with effectively no visible impact to the teams using the component libraries!</p>
<p>Around the time we wrapped up this large migration, the organizations internally
that we were supporting were starting to shift towards having very similar
needs. There were teams that had been asking for features from the storefront,
e-commerce focused library, within their supplier facing application, and
sometimes the other way around as well!</p>
<p>The timing was also pretty convenient since the org supporting our supplier
features opted to do a fairly large re-design and as part of that landed on a
pretty similar design language that our customer facing features had evolved to.</p>
<p>The design systems team decided to undertake the work to build support for the
internal and supplier facing themes within a new library that was created as an
evolution from our storefront library.</p>
<p>This work mostly kicked off at the beginning of 2021, building off of the
successful adoption of Styled Components across what we called our Enterprise
component library since mid-2018, we were eager to also begin to adopt it within
our storefront component library. The timelines coincidentally aligned, so as
part of supporting this new component library that we called the Core library,
we began to adopt Styled Components across the new single library.</p>
<p>However, this is where we began to run into hiccups with the adoption. Our
storefront experiences are rightfully held to a high bar for client side
performance, including speed index and web vitals. As applications began to
adopt new versions of the Core library, they reported concerning spikes in
several of these metrics.</p>
<p>We had spent quite a bit of time working with application owners as well as our
central performance team and ultimately settled on the main issue just being the
additional runtime overhead that Styled Components added to our components.</p>
<p>We had always known about this performance issue, even since before we adopted
the library for our Enterprise components, however we were optimistic that the
impact wouldn&#x27;t be as bad as we thought. Partially we were swayed into this
optimistic thinking based on the various other large sites that had also adopted
runtime CSS-in-JS solutions like Target, Nike, and the New York Times.</p>
<p>So our adoption of Styled Components was put on pause while we continued to
follow up in some investigations, as a team it felt like there was no light at
the end of the tunnel for our migration.</p>
<p>It wasn&#x27;t until late 2021 and early 2022 that we finally felt like we identified
a solid path forward for the component library and in general for our feature
teams.</p>
<p>The key shift that we made was identifying a suitable compile-time CSS-in-JS
library that offered the correct trade offs between developer experience while
still optimizing for the end user experience of our website.</p>
<p>We looked at a few options, including a few runtime options, and even some fully
static options, however we finally identified Vanilla Extract as the most
suitable replacement for our needs.</p>
<p>There were many different aspects that we used to weigh our available options,
but I&#x27;ll say one of the main motivators for us at the time was us as a
technology org deprecating support for IE entirely and moving to support only
the main modern browser engines. This allowed us to more seriously consider CSS
custom properties, which Vanilla Extract uses under the hood to support theming.</p>
<p>While we&#x27;re still early in our adoption of Vanilla Extract, having only used it
for about 2 years, I&#x27;m optimistic that it has set us on a path that still
heavily optimizes both the end user experience without hampering the developer
experience (and the same for the reverse as well)!</p>
<p>Along with some of this work we&#x27;ve also become eager to adopt newer features of
React (Streaming, Server Side Suspense, and even Server Components), all of
which would be effectively blocked or de-optimized if we doubled down on a
runtime CSS-in-JS solution.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/on-adopting-css-in-js.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Being Unopinionated]]></title>
            <link>https://matthamlin.me//2023/december/being-unopinionated</link>
            <guid>https://matthamlin.me//2023/december/being-unopinionated</guid>
            <pubDate>Mon, 18 Dec 2023 07:43:38 GMT</pubDate>
            <description><![CDATA[It's fine for a library to express some opinions about how it should be adopted and how the overall workflow/application in which it is adopted should function. However, it's false advertising to say that it is unopinionated.]]></description>
            <content:encoded><![CDATA[<p>A quick
<a href="https://github.com/search?q=unopinionated&amp;type=repositories" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">GitHub search</a>
will reveal that there&#x27;s a lot of libraries and packages out there that brag
about being unopinionated. I think that is a misnomer and instead all these
libraries and packages are just <em>differently</em>-opinionated from the
libraries/packages that they are alternatives for.</p>
<p>While it doesn&#x27;t say so on their site, I feel like the original premise of
<a href="https://turbo.build/repo" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>turborepo</code></a> was that it was an unopinionated
monorepo manager. In reality, it just held different opinions about how tasks
should be managed than tools like <code>nx</code> or <code>lerna</code>.</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>If you&#x27;re looking at adopting some library or package (or even an SaaS application) and one of the main selling points is about it being unopinionated, don&#x27;t fall for it!</p></div>
<p>It&#x27;s fine for a library to express some opinions about how it should be adopted
and how the overall workflow/application in which it is adopted should function.
However, it&#x27;s false advertising to say that it is unopinionated.</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/being-unopinionated.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Stop Snacking]]></title>
            <link>https://matthamlin.me//2023/december/stop-snacking</link>
            <guid>https://matthamlin.me//2023/december/stop-snacking</guid>
            <pubDate>Fri, 15 Dec 2023 08:25:45 GMT</pubDate>
            <description><![CDATA[No I don't mean those Milano cookies you keep taking from the office snack wall either (although you should probably stop snacking on those as often as well).]]></description>
            <content:encoded><![CDATA[<p><strong>Stop Snacking!</strong></p>
<marquee class="mt-4"></marquee>
<p>No I don&#x27;t mean those Milano cookies you keep taking from the office snack wall
either (although you should probably stop snacking on those as often as well).</p>
<marquee class="mt-4"></marquee>
<p>Instead I&#x27;m referring to
<a href="https://hunterwalk.com/2016/06/18/the-best-startups-resists-snacks-im-not-talking-about-food/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">low effort and low impact work</a>.</p>
<p>Once you get stuck in the snacking zone, it&#x27;s incredibly hard to break out and
work on the things that actually matter. You might be able to convince yourself
(and maybe your manager) that all that snacking is actually valuable - but it
isn&#x27;t.</p>
<p>If you&#x27;re not working on something both high effort <strong>and</strong> high impact, than
you are wasting your time, and your teams time.</p>
<p>I&#x27;ll re-iterate to help make it stick - <strong>stop snacking</strong>!</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>Brought to you by someone stuck in the snacking loop (both with Milano cookies and without)!</p></div>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/stop-snacking.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[No Process is Invisible Process]]></title>
            <link>https://matthamlin.me//2023/december/no-process-is-invisible-process</link>
            <guid>https://matthamlin.me//2023/december/no-process-is-invisible-process</guid>
            <pubDate>Wed, 13 Dec 2023 19:17:32 GMT</pubDate>
            <description><![CDATA[Low/no process workflow wasn't actually no process, it was only an "invisible" process. An implicit contract with everyone on the team to do that async workflow on their own time.]]></description>
            <content:encoded><![CDATA[<p>I was talking to someone the other day about our team process, talking and
talking about how our low-process workflow for managing our work and backlog was
really great. We don&#x27;t waste hours and hours in meetings on planning, preparing,
estimating, etc, and instead everyone on the team creates tickets, plans out
epics, and combs through our backlog also.</p>
<blockquote>
<p>However, I realized that this low/no process workflow wasn&#x27;t actually no
process, it was only an &quot;invisible&quot; process. An implicit contract with
everyone on the team to do that async workflow on their own time.</p>
</blockquote>
<p>This works when there&#x27;s high trust across the team, the team has jelled, and
they have all internalized this invisible process.</p>
<p>You&#x27;re probably better off building a bit of &quot;real&quot; process instead, if only to
set the expectation that the work needs to happen.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/no-process-is-invisible-process.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Fixing Zed's language server]]></title>
            <link>https://matthamlin.me//2023/december/fixing-zeds-language-server</link>
            <guid>https://matthamlin.me//2023/december/fixing-zeds-language-server</guid>
            <pubDate>Fri, 08 Dec 2023 08:32:09 GMT</pubDate>
            <description><![CDATA[Zed language server quick tip; fixing Zed's language server]]></description>
            <content:encoded><![CDATA[<p>I was recently trying out the <a href="https://zed.dev/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Zed</a> editor instead of VSCode,
however for a while I was struggling with getting the language server to work
for a project. I wasn&#x27;t seeing any inlay hints, nor any hover tooltips for any
JavaScript or TypeScript code, it was getting pretty frustrating.</p>
<p>I was about to give up on it and go back to VSCode, but I figured I&#x27;d give it
one last go.</p>
<p>After some debugging, I found out a few things that felt decently buried in
their support forums so I figured I&#x27;d blog them here in case others run into the
same issue and are looking for the solution.</p>
<details class="border border-green-400 rounded-md p-4 bg-green-50 dark:bg-green-900/20"><summary class="font-bold cursor-pointer underline underline-offset-1 decoration-wavy decoration-2 decoration-green-400">TL;DR</summary><div class="py-4"><p>If you aren&#x27;t getting any type hints / hover tooltips etc for JavaScript or
TypeScript and you&#x27;re not sure why, check for <code>package.json</code> or <code>node_modules</code>
in your root directory (<code>~/</code>). If those files/folders exist, delete them and
close and re-open Zed!</p></div></details>
<p>Apparently Zed installs language servers (or at least the
<code>typescript-language-server</code>) from npm, however it usually does this within some
subdirectory where it caches a few other things, something like
<code>~/Library/Application Support/Zed/</code>.</p>
<p>However, that logic that Zed uses to install the language server maybe shortcuts
/ runs into an issue if you have a top level <code>package.json</code> within your root
directory, e.g. <code>~/</code>. In that case, it installs the language server at the root
instead of within the application&#x27;s folder.</p>
<p>This will wreck some havoc when Zed tries to launch the language server when it
starts up. Another pro tip is that you can check the logs from Zed in the
following log file: <code>~/Library/Logs/Zed/Zed.log</code>.</p>
<p>I found this solution from
<a href="https://github.com/zed-industries/community/issues/1756#issuecomment-1786866119" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this GitHub comment</a>!</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/fixing-zeds-language-server.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Project Deep Dive: Microfibre]]></title>
            <link>https://matthamlin.me//2023/november/project-deep-dive-microfibre</link>
            <guid>https://matthamlin.me//2023/november/project-deep-dive-microfibre</guid>
            <pubDate>Mon, 27 Nov 2023 19:15:00 GMT</pubDate>
            <description><![CDATA[A deep dive into one of my recent side projects; microfibre - a minimal text posting application]]></description>
            <content:encoded><![CDATA[<p>I recently started building out a new side project that I am calling <em>microfibre
üß∂</em>, it was started partially to scratch an itch to replace Twitter/X with
something a bit more personal. Additionally, I wanted to build a quick and easy
way to share short updates with my grandparents.</p>
<p>Of note - microfibre is more of a personal product rather than a public social
network. It&#x27;s a neighborhood cafe rather than an industrial chain restaurant!
I&#x27;ve built it intentionally to only be used by myself, but that doesn&#x27;t prevent
others from creating similar versions of the same product!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="what-is-microfibre">What is microfibre?</h2>
<p>microfibre is essentially a bulletin board, it allows me to post short-form (but
not limited in length) text updates<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>, which then get
displayed on my personal site under the <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/feed">feed view</a>.</p>
<p>It&#x27;s currently built using Cloudflare wrangler to power the API, Cloudflare D1
as the datastore, and a Next.js app as the posting client (as well as this
Next.js app powering my blog for rendering the feed). There&#x27;s nothing magical
about the project - it&#x27;s a fairly basic
<button data-state="closed" data-slot="tooltip-trigger"><abbr title="Acronym standing for Create Read Update Delete, often used to describe basic REST APIs">CRUD</abbr></button>
API.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="whered-it-start">Where&#x27;d it start?</h2>
<p>I started the project the first week of November (2023), and primarily wanted to
use it to learn Go lang. I&#x27;ve been
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/september/learning-go">messing around with Go</a> for a few months now so I
wanted to use it in a real side project. Additionally I wanted to give deploying
to <a href="https://fly.io" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Fly</a> a try, I&#x27;ve used it here and there before but never
really tried it for a full project.</p>
<p>I built the first version of the application in about 2 total hours, I was
mainly building the application using <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/november/ai-driven-development">AI via ChatGPT</a>.</p>
<p>After messing around with it for a day or two, I started to realize that the
cold starts on Fly were pretty rough. It got to the point that I would need to
re-submit my client form to actually get the post saved in a SQLite DB within
the Fly instance. I&#x27;m sure there&#x27;s something I&#x27;m overlooking here - but it just
felt pretty rough so I started to consider some other options.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="take-2-on-the-edge">Take 2: On the Edge</h2>
<p>I didn&#x27;t have much time to work on the project until Thanksgiving, but during
the Thanksgiving weekend I found enough time to rewrite the project. I opted to
give Cloudflare Worker a go, and decided to use their D1 SQLite DB offering as
well.</p>
<p>This combination of Worker and D1 is unstoppable - it&#x27;s a really nice developer
experience, using a local database during development and then using the D1
binding when deployed.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="the-future">The Future</h2>
<p>There are a few things I definitely want to look at adding eventually:</p>
<ul>
<li>Features:<!-- -->
<ul>
<li>Support for media when posting content</li>
</ul>
</li>
<li>Technical Changes:<!-- -->
<ul>
<li>Adopting a router for the Worker (I&#x27;ve heard really good things about Hono!)</li>
<li>Implementing proper auth (e.g. only letting the client app post content to
the API)</li>
</ul>
</li>
</ul>
<hr/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Although I plan to support images and videos <del>soon</del>
<em>eventually</em>!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/project-deep-dive-microfibre.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Pair Programming]]></title>
            <link>https://matthamlin.me//2023/november/pair-programming</link>
            <guid>https://matthamlin.me//2023/november/pair-programming</guid>
            <pubDate>Sun, 26 Nov 2023 15:45:01 GMT</pubDate>
            <description><![CDATA[Pair programming can be good sometimes - but not all the time]]></description>
            <content:encoded><![CDATA[<p>I found this tweet earlier today that really accurately describes some of my
thinking about pair programming as of late:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><p lang="en" dir="ltr"><p>I did pair programming exclusively for years at Pivotal.</p><br/><br/><p>It‚Äôs an incredible tool.</p><br/><br/><p>It‚Äôs also a fabulous way to never ship anything: 8 engineers (4 pairs) on a team have a really hard time gaining any consensus or direction when everything is essentially decided by committee.</p><a href="https://t.co/Nmxk1bMzfS"><p><a href="https://t.co/Nmxk1bMzfS" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://t.co/Nmxk1bMzfS</a></p></a></p><p>‚Äî John McBride (@johncodezzz) <a href="https://twitter.com/johncodezzz/status/1728502218775531686?ref_src=twsrc%5Etfw">November 25, 2023</a></p></blockquote></div>
<p>However, I used to think a bit differently about pair programming so I figured
it&#x27;d be worth talking about why my opinion changed on the topic.</p>
<p>Before digging in though, I realized that this isn&#x27;t the first time I went to
write about pair programming, I even have a stub of an article
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2021/november/pair-programming-stub">here</a> (just over 2 years old at this
point!), and also a semi-popular post on
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2020/december/pair-code-reviews">pair code reviews</a> (which is almost 3 years
old now!).</p>
<p>I used to really enjoy pair programming, we heavily utilized it on my current
team about 2 years back. At the time - it felt really useful and it seemed like
we were able to iterate through our work at a rapid pace. However, I feel like
that&#x27;s no longer the case.</p>
<p>Now when our team is pairing, it feels like we&#x27;re spending 2-3 maybe even 4x the
time to accomplish a task that someone individually can accomplish directly.</p>
<p>I don&#x27;t think this is the default with pair programming however - I think it
just means we&#x27;re over-using it rather than using it only when we need to.</p>
<blockquote>
<p>As with everything, it&#x27;s about trade offs</p>
<ul>
<li>Some senior engineer, somewhere</li>
</ul>
</blockquote>
<p>Using pair programming to:</p>
<ul>
<li>Onboard a new engineer to the team,</li>
<li>Tackle a gnarly bug, or</li>
<li>Explore a solution to a vague problem</li>
</ul>
<p>can be really useful.</p>
<p>I no longer recommend pair programming as the default for well-jelled teams
however. Instead, each individual should be able to accomplish any task on their
own.</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/pair-programming.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[AI Driven Development]]></title>
            <link>https://matthamlin.me//2023/november/ai-driven-development</link>
            <guid>https://matthamlin.me//2023/november/ai-driven-development</guid>
            <pubDate>Sun, 19 Nov 2023 14:55:09 GMT</pubDate>
            <content:encoded><![CDATA[<p>Over the past week or so I‚Äôve taken some time off work (for a friends wedding)
and found myself with a bit of free time - so I figured I‚Äôd work on a side
project. The idea of project was still pretty fresh, and I figured that I‚Äôd try
to lean into using ChatGPT to help me build it out.</p>
<p>Before digging in, I have been thinking more and more about AI as of late, I‚Äôm
still really new to whats available and how it all works, but I‚Äôve been trying
to use the available integrations where I can. I pay for the upgraded version of
Notion to use their AI integration (which I honestly haven‚Äôt really used all
that much yet), I also pay for the upgraded version of Raycast with their AI
version (which I‚Äôve so far found to be really direct and straight to the point -
I‚Äôll talk a bit more about this later on in the post), and mainly I‚Äôve been
using ChatGPT.</p>
<p>I‚Äôve formed some rough thoughts that I wanted to try and put them all into a
post on this blog - I may revisit some of these in the future, but we‚Äôll see!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="thoughts-on-ai-in-general">Thoughts on AI in general:</h2>
<p>It‚Äôs pretty decent, but I feel like I haven‚Äôt found a really solid fit for how
it can wedge into my workflow. I don‚Äôt often need to write creative prose pieces
which feels like where it really excels at the moment. However I do want to
continue to give it a lot of thought and experimentation. There have definitely
been many times where I‚Äôve thought that different workflows that I do for work
could be made more efficient, but it feels like no one is exploring them yet (at
least not publicly).</p>
<p>A core example that comes to mind, and is also top of mind for me at the moment
is an AI backlog assistant.</p>
<p>I want something that crawls our backlog, triages inbound requests, helps us to
answer why we approached a problem in a specific way when looking back on it,
and also helps us to better understand how we can tackle work.</p>
<p>I feel like this would greatly benefit from being integrated into not only our
project tracker, but also Slack and GitHub where we have most conversations and
where most of our work happens.</p>
<p>I‚Äôm sure I‚Äôll have some more thoughts about AI use cases in general, but for now
I want to dig into the focus of this post, which is how it works for web
development.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="thoughts-on-ai-for-web-development">Thoughts on AI for web development:</h2>
<p>I‚Äôve tried GitHub Copilot in the past for about a month or so (basically the
free month that you can get from GitHub), and at the time I felt like it didn‚Äôt
really fit into my workflow all that nicely. It felt like a slower version of
the features/benefits that I got out of the TypeScript Language Server in
VSCode<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>This past week or so however I dug into a new project using Go lang and SQLite
leveraging only ChatGPT (v3.5, I haven‚Äôt purchased the 4.0 variant yet).
Overall, I enjoyed the setup quite a bit - it was nice to be able to talk to
<del>someone</del> <em>something</em> about the problem that I wanted to solve, and have it
work with me to write the code and implement changes.</p>
<p>There was definitely some friction - at best it felt like pairing with a junior
engineer, but not a great pairing session in that. I often needed to ask the
question two or three times for it to actually do what I wanted. Only about 4 or
5 times during the work of the project did I feel like I hit a wall and I just
needed to implement the changes that I wanted to do manually.</p>
<p>Another point of friction for me was needing to go back and forth between my
editor and my ChatGPT tab, including several times of pasting in the error /
code I had to keep it up to date on what the code looked like after I made some
changes. I think that GitHub Copilot now offers a chat like feature that knows
about the state of the codebase, so i think that would improve the iteration
cycles a bit more also.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="in-summary">In Summary</h2>
<p>Overall, the experience was pretty neat - I definitely want to lean on ChatGPT
more for working on more greenfield projects. I think the place where it really
excelled was that I was fresh to the project as well - so I could discover the
problem space and the eventual solutions as well while working with it. I feel
like it would be relatively complex to dive into an existing large project and
have it up and running and providing valuable feedback along the way. Maybe when
it has a deeper integration into the codebase and the history of the project
then it would be able to be a reliable assistant.</p>
<hr/>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I do wonder if that opinion would have changed had I start using it in a language that I don‚Äôt know as well, such as Go lang.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/ai-driven-development.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Teams and Caterpillar Tracks]]></title>
            <link>https://matthamlin.me//2023/november/teams-and-caterpillar-tracks</link>
            <guid>https://matthamlin.me//2023/november/teams-and-caterpillar-tracks</guid>
            <pubDate>Tue, 07 Nov 2023 16:38:42 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;m really terrible at somehow always thinking of the absolute worst metaphores
for situations and concepts I encounter at work. The latest one that came to
mind is about how teams should operate a bit like caterpillar tracks (you know,
those things that tanks or backhoes drive on!)</p>
<p>For background context, the hot topic that our team has been battling as of late
is context switching, also known as the most challenging problem that most
software engineering teams have to deal with.</p>
<p>As a team, we want to be able to triage inbounds when it makes sense to do so,
but in general we should still strive to move forward on our plans and roadmap.</p>
<p>As individuals on the team, it helps to also have stints of working on the same
problem to enter into the focus zone and build up momentum.</p>
<p>You might be wondering where the connection to caterpillar tracks comes in - and
I don&#x27;t blame you, this is a really abstract metaphor. The connection my brain
made was that the individual tracks within a set of caterpillar tracks can be
imagined as an individual of the team.</p>
<p>When they hit the ground they stick there while the team (the vehicle) moves
forward, meaning they shouldn&#x27;t be pulled from their work unless the vehicle
needs to change direction. Often also the team members can stay working on what
they&#x27;re doing for the most part and not be impacted when the team changes
direction.</p>
<p>Then when they&#x27;ve finished their work, they can pick up the next most important
task - whether thats continuing on with the existing work, or helping to turn
(even slightly) the team as a whole to solving a critical inbound request.</p>
<p>Maybe this metaphor doesn&#x27;t really make sense, but really at the end of the day
I strongly believe that the team should strive to avoid context switching at all
costs. Continuously switching tasks is a bit like turning 45 degrees every
minute in opposite directions and hoping that you make progress but all you
really end up doing is driving in a long zig-zag.</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/teams-and-caterpillar-tracks.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Go To Git Utils]]></title>
            <link>https://matthamlin.me//2023/october/go-to-git-utils</link>
            <guid>https://matthamlin.me//2023/october/go-to-git-utils</guid>
            <pubDate>Tue, 10 Oct 2023 11:14:01 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve been starting to pick up a few additional utilities that I use alongside
<code>git</code> within my development setups, I figured I&#x27;d try to collect them here in
this post in case I need to set them up on another computer in the future, or
(maybe more likely) I can share this to friends when they ask me &quot;what was that
command you just ran?!?&quot;.</p>
<p>If there&#x27;s other utilities I should be aware of, reach out to share them!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="gh---link">gh - <a href="https://cli.github.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">link</a></h3>
<p>I probably don&#x27;t need to say much about this, but I consider this a musthave if
most of your work is on GitHub (either public or enterprise). Where it really
shines for my use case is opening PRs, I use <code>gh</code> every single time!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="git-branchless---link">Git Branchless - <a href="https://github.com/arxanas/git-branchless" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">link</a></h3>
<p>This is really many utilities wrapped up in a trenchcoat! It comes with
<code>git smartlog</code> (a nicer output on <code>git log</code>), and also a <code>git undo</code> command
which I strongly believe that <code>git</code> should offer by default!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="git-pile---link">Git Pile - <a href="https://github.com/keith/git-pile" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">link</a></h3>
<p>This has become my go-to tool for supporting a stacked diff like workflow with
git and GitHub. I tried out <a href="https://github.com/ejoffe/spr" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>spr</code></a> before but it
enforced that you merge PRs from the command line instead of using the UI (which
also meant it didn&#x27;t work for me at work where git permissions are intentionally
more restrictive).</p>
<p><code>git-pile</code> &quot;just works&quot;‚Ñ¢, using <code>gh</code> under the hood (the GitHub CLI) for opening
PRs/interacting with PRs, which means I can use all the same options as I used
to use with the GitHub CLI!</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/go-to-git-utils.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Jabs and Fluff: On CTO Office Hours]]></title>
            <link>https://matthamlin.me//2023/september/on-cto-office-hours</link>
            <guid>https://matthamlin.me//2023/september/on-cto-office-hours</guid>
            <pubDate>Mon, 25 Sep 2023 10:58:14 GMT</pubDate>
            <content:encoded><![CDATA[<p>If your technology organization is anything like ours (and it might not be),
you&#x27;ll find that the recurring CTO Office Hours meet is usually a waste of time.</p>
<p>The questions submitted (either live or ahead of time) are a mix of jabs and
fluff.</p>
<p>The jabs are usually pointed questions, that <em>never</em> get a sufficient answer
during the meeting and the asker usually is asked to follow up directly via DMs
that they usually never actually do.</p>
<p>The fluff are the questions like &quot;When will we get better coffee in the
office?&quot;, they somehow become the questions that get the most direct and to the
point answers.</p>
<p>TL;DR: Just skip the meets!</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/on-cto-office-hours.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Using Marquee with React and TypeScript]]></title>
            <link>https://matthamlin.me//2023/september/using-marquee-with-react-and-typescript</link>
            <guid>https://matthamlin.me//2023/september/using-marquee-with-react-and-typescript</guid>
            <pubDate>Sat, 23 Sep 2023 11:32:42 GMT</pubDate>
            <content:encoded><![CDATA[<p>I really enjoy using the <code>&lt;marquee&gt;</code> HTML element, the fact that it still works
in browsers today even thought its been deprecated (and its sibling <code>&lt;blink&gt;</code>
has been removed) makes it all the better.</p>
<p>Its always so cool seeing a webpage show up after some work configuring tools,
or bootstrapping a new app and having the &quot;hello world&quot; message scroll by
automatically because of the marquee element.</p>
<p>Unfortunately, TypeScript and React&#x27;s types have really leaned into the whole
&quot;deprecated&quot; thing, so you get these red underlines and also sometimes build
fails<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>Fortunately, there&#x27;s a fix to resolve this pain, unfortunately it&#x27;s a bit
archaic so I figured I&#x27;d put up this blog post to make it easier to find in the
future!</p>
<p>The gist is that you override <code>JSX.IntrinsicElements</code> to add the marquee
element.</p>
<p>To fix the issue, create a new <code>types.d.ts</code> file in your project, and paste in
the following content:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#AB5959;--shiki-dark:#CB7676"> *</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">declare</span><span style="color:#B07D48;--shiki-dark:#BD976A"> global</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  namespace</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> JSX</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    interface</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> IntrinsicElements</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      marquee</span><span style="color:#999999;--shiki-dark:#666666">: </span><span style="color:#2E8F82;--shiki-dark:#5DA994">React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#2E8F82;--shiki-dark:#5DA994">DetailedHTMLProps</span><span style="color:#999999;--shiki-dark:#666666">&lt;</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">        React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#2E8F82;--shiki-dark:#5DA994">HTMLAttributes</span><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#2E8F82;--shiki-dark:#5DA994">HTMLElement</span><span style="color:#999999;--shiki-dark:#666666">&gt;,</span></span>
<span class="line"><span style="color:#2E8F82;--shiki-dark:#5DA994">        HTMLElement</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &gt;;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Then in your <code>tsconfig.json</code> file, add the following:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">compilerOptions</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">    &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">types</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./types.d.ts</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">]</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Then you may need to restart your editor, but it should resolve the missing
types for the marquee element!</p>
<p>The beauty of this is that you can do the same for any element you may want to
use!</p>
<hr/>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I can&#x27;t count the number of times that a build has failed when
I went to deploy a site because of this issue.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/using-marquee-with-react-and-typescript.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Finding React Artifacts]]></title>
            <link>https://matthamlin.me//2023/september/finding-react-artifacts</link>
            <guid>https://matthamlin.me//2023/september/finding-react-artifacts</guid>
            <pubDate>Mon, 18 Sep 2023 21:48:47 GMT</pubDate>
            <content:encoded><![CDATA[<p>A while back I wanted to experiment with a more recent version of React in a few
projects. Specifically I wanted to enable some of the feature flags that the
React team uses to gate specific experiemnts. These flags are compile-time
evaluated, meaning I can&#x27;t simply change them at runtime and have any version of
React installed reflect the changes. Instead, I needed to clone the repo, change
the flags, and then run a build locally.</p>
<p>Now, the React repo may have changed since I last tried this (which was maybe 4
years ago now), but back then you needed to have Java setup locally (or at least
JDK setup) in order to complete the builds. At the time this was a decent hurdle
to overcome, since I was mostly used to more common build toolchains like
Babel/Webpack/etc.</p>
<p>Since then, I&#x27;ve discovered this amazing resource that someone made that hosts
build assets for different PRs, commits, or versions of the packages generated
from the repo. This is the <a href="https://react-builds.vercel.app/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">react-builds</a>
site.</p>
<p>The really neat thing about this site is that you can download any build
artifact for any commit within the repo (as far as I understand it, I&#x27;m sure you
probably can&#x27;t go all the way back to the first commit and download those
builds).</p>
<p>In addition, you can also use this to download and vendor packages that haven&#x27;t
been published yet (üëÄ looking at you <code>react-server-dom-esm</code> üëÄ).</p>
<p>I was trying to find this resource the other day so I figured I&#x27;d blog a bit
about it as a form of long term memory üòÇ.</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/finding-react-artifacts.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Learning Go]]></title>
            <link>https://matthamlin.me//2023/september/learning-go</link>
            <guid>https://matthamlin.me//2023/september/learning-go</guid>
            <pubDate>Fri, 01 Sep 2023 09:50:35 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve recently started to really dig into learning the <a href="https://go.dev/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Go</a>
programming language in my free time. Mostly I wanted to learn another language
that would pull me a bit further out of the &quot;Rut of Frontend Development&quot;, so I
was mainly looking at either Go or Rust. I opted to start with Go since it
seemed pretty similar to JavaScript/TypeScript which I&#x27;m most comfortable with
at this point in time, and I&#x27;ve heard some really good things about it as well.</p>
<p>I&#x27;ve also contributed to another service at work that was written in Go, so it&#x27;s
been fun having that be my main exposure to the language and all it&#x27;s features.</p>
<p>To help keep track of my learning, I started to use a centralized Notion page
all about the language, it contains a set of resources I&#x27;ve found for learning
about Go (along with references and documentation on libraries). I&#x27;ve also added
a &quot;Learning Log&quot;, essentially a day-by-day bulleted list of things that I&#x27;ve
learned / interesting code snippets I&#x27;ve found along the way.</p>
<p>Most of my learning has been in the form of both:</p>
<ul>
<li>Following along on <a href="https://gobyexample.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">gobyexample.com</a>, <em>and</em></li>
<li>Completing the learning exercises for Go on Exercism after a friend
recommended it to me</li>
</ul>
<p>The Exercism exercises have been really useful because they allow you to learn
parts of the language through realistic examples</p>
<p>What other resources should I look at for learning Go? Reach out on Twitter with
recommendations!</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/learning-go.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Speedbumps]]></title>
            <link>https://matthamlin.me//2023/august/speedbumps</link>
            <guid>https://matthamlin.me//2023/august/speedbumps</guid>
            <pubDate>Fri, 18 Aug 2023 17:47:33 GMT</pubDate>
            <content:encoded><![CDATA[<p>You know that one person at your company that every interaction you have with
them just feels like rubbing against sandpaper? Where as hard as you try, it
seems like you both never see exactly eye-to-eye?</p>
<p>I&#x27;m sure there&#x27;s someone like this that everyone knows at their current or
previous workplaces.</p>
<p>I was talking with one of my former managers about one such person that we both
had the pleasure to work with, and the analogy that we both discovered was that
companies are a bit like roads. The smaller the company, the smaller the road -
think of a small back country one lane road. The bigger the company, it&#x27;s a bit
more like a 5-lane super highway.</p>
<p>That one person that you find difficult to work with is a bit like a speedbump
on the road that is the company. You hate it each time you need to drive over
it.</p>
<p>The smaller the company, the more likely that you&#x27;ll encounter that gosh darn
speedbump, but the bigger the company the more likely that you&#x27;ll be able to
avoid the speedbump by changing lanes!</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/speedbumps.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Idea: Distributable Web Apps]]></title>
            <link>https://matthamlin.me//2023/july/distributable-web-apps</link>
            <guid>https://matthamlin.me//2023/july/distributable-web-apps</guid>
            <pubDate>Sat, 29 Jul 2023 05:24:59 GMT</pubDate>
            <content:encoded><![CDATA[<p>I was recently reading this Twitter (X?) thread:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><p>Would anyone like to partner on creating an Electron alternative that builds on top of React Server Components?
It would take the good parts of Electron, Tauri, and React Native. The IPC would be replaced with the server components (React Flight)
‚Äî Tom Sherman (@tomus_sherman) <a href="https://twitter.com/tomus_sherman/status/1684522055696351234?ref_src=twsrc%5Etfw">July 27, 2023</a></p></blockquote></div>
<p>specifically this part:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><p>Try building the React parts on top of Electron first, and then replace Electron once you‚Äôve got the abstractions in the right spot ‚Äî and you‚Äôre sure Electron is the problem
‚Äî Jake (@jitl) <a href="https://twitter.com/jitl/status/1684546326871019521?ref_src=twsrc%5Etfw">July 27, 2023</a></p></blockquote></div>
<p>and I got to thinking - what if you could distribute your application as a web
server + a bundled web app?</p>
<p>One major benefit - you don&#x27;t need to rebuild some web view framework (or
leverage the existing ones that seem to be fairly heavy and hated also), and it
also offers some flexibility to the user for how they want to load the
application.</p>
<blockquote>
<p>But Matt, how would this work??!?!?</p>
</blockquote>
<p>You&#x27;d need to do the following:</p>
<ul>
<li>Build your frontend web application (and server if you have one)</li>
<li>Package it up into a folder if you want (zip or what not)</li>
<li>Offer an entrypoint script (really only something to start up the web server -
maybe some shenanigans for domains [see caveats below])</li>
<li>Share the &quot;app&quot; as a directory download for the user</li>
</ul>
<p>Users would then download the folder of assets + web server and start script,
run the start script, and load up your application in their favorite web
browser!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="caveats">Caveats:</h3>
<p>AKA open questions!</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="what-url-would-you-host-the-app-on">What url would you host the app on?</h4>
<p><code>localhost:3000</code> or similar is a bit funky - doesn&#x27;t tell the user what is
running there. If possible, would be nice to register something like
<code>local.&lt;your-app-name&gt;.app</code> and tell the OS (via <code>hosts</code> file maybe) that the
url should be resolved against <code>localhost:&lt;your-port&gt;</code>.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="what-does-the-start-script-look-like">What does the start script look like?</h4>
<p>Initially I was thinking that it would be a shell script, but I realized that it
could also be a Deno script thats compiled to run as a binary - then it could
package up the web server all in one file too!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="summary">Summary:</h2>
<p>That&#x27;s it - that&#x27;s the whole idea! Has anyone tried this before? Anyone have
success? I could see a simple native app that handles the host issue for folks,
and then web apps &quot;register&quot; with the native app somehow...</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/distributable-web-apps.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[29]]></title>
            <link>https://matthamlin.me//2023/july/29</link>
            <guid>https://matthamlin.me//2023/july/29</guid>
            <pubDate>Wed, 19 Jul 2023 18:36:58 GMT</pubDate>
            <content:encoded><![CDATA[<p>Tomorrow (assuming I push this post out tonight) is my 29th birthday. I usually
don&#x27;t celebrate too big, this year I&#x27;m spending two weeks back on the west coast
with family.</p>
<p>I wanted to use this post to help solidify some of my goals over the next year
(as a form of public commitment). I don&#x27;t normally post year long goals on my
birthday, usually I do that around new years, but I figured why not share it on
my birthday. After all, this next year will lead to me turning 30, which kind of
feels like a big thing!</p>
<p>I don&#x27;t have many goals yet, but I wanted to highlight a few that came to mind
as we were driving back from Vancouver this afternoon.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="1-get-healthier">1. Get healthier</h2>
<p>I&#x27;ve fallen back into ordering a lot of delivery <del>fast</del> <strong>junk</strong> food as of
late - I&#x27;d like to instead get better at making my own food, and working on a
healthier diet.</p>
<p>On top of that - I really need to stretch out my exercise, at the moment it
consists only of walking but I need to involve more activities to help burn more
calories.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="2-improve-my-wardrobe">2. Improve my wardrobe</h2>
<p>My current wardrobe is pretty plain and consists of essentially 4 things:</p>
<ul>
<li>Black Eddie Bauer polos</li>
<li>Shorts from Target</li>
<li>Pants from Public Rec</li>
<li>Jeans</li>
</ul>
<p>At a bare minimum I&#x27;d like to stretch my shirt collection a bit, and add in more
variety.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="3-optimize-finances">3. Optimize finances</h2>
<p>I don&#x27;t necessarily want to start planning for retirement, but I do also want to
better control my finances. To start, I want to get a lot better at
understanding where/how/why I spend my money.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="4-get-serious-about-my-career">4. Get serious about my career</h2>
<p>This to me also means getting serious with my side projects, there&#x27;s a few I&#x27;m
working on at the moment that I&#x27;d like to see out in the wild - even if I&#x27;m the
only one using them!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="meta">Meta:</h2>
<p>A few meta notes on goals:</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="check-in-frequently">Check-in Frequently</h3>
<p>I really should check-in on the above frequently, and adjust often also to
optimize for change. I&#x27;m thinking of checking in weekly to start, but might
adjust back to monthly if that&#x27;s too aggressive</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="continuously-collect-data">Continuously collect data</h3>
<p>I&#x27;d like to have a solid database of attributes to check in on during the above
check-ins to help inform if I&#x27;m actually accomplishing those goals. I really
like projects like: <a href="https://howisfelix.today/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">howisfelix.today</a> and
<a href="https://julian.digital/2020/02/23/my-quantified-self-setup/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Julian&#x27;s Quantified Self</a>,
and I&#x27;d like to build an experience on my personal site that does something
similar if possible!</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/29.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Principles for Automated Testing]]></title>
            <link>https://matthamlin.me//2023/july/principles-for-automated-testing</link>
            <guid>https://matthamlin.me//2023/july/principles-for-automated-testing</guid>
            <pubDate>Fri, 07 Jul 2023 09:12:13 GMT</pubDate>
            <content:encoded><![CDATA[<p>This post is meant to be a living reference for common patterns and principles
that I personally find important when working within an automated test suite.</p>
<p>Some of these may only apply to specific scenarios, some you may disagree with,
but so far they&#x27;ve all proven in my own experience to be incredibly valuable to
maintaining a large automated test suite for a long time and with a lot of
contributors.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="creating-a-test-should-be-incredibly-easy">Creating a test should be incredibly easy</h2>
<p>If you want to encourage that tests get written and that your code is generally
well covered then it should be dead easy for any contributor to create a (well
structured) test.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="test-output-should-be-clean">Test output should be &quot;clean&quot;</h2>
<p>Specifically this means that logs to stdout (e.g. <code>console.log</code>) should either:</p>
<ul>
<li>Fail the test</li>
<li>Be mocked during the test</li>
</ul>
<p>The test output should be incredibly easy to debug failures, if there are
several logs unrelated to the failure then it will be more difficult to
understand how the test failed and what needs to be done to fix it.</p>
<blockquote>
<p>More coming soon!</p>
</blockquote>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/principles-for-automated-testing.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Deno]]></title>
            <link>https://matthamlin.me//2023/july/deno</link>
            <guid>https://matthamlin.me//2023/july/deno</guid>
            <pubDate>Thu, 06 Jul 2023 19:54:21 GMT</pubDate>
            <content:encoded><![CDATA[<p>This might not be that long of a blog post but I wanted to briefly write about
some exploration that I&#x27;ve been doing with <a href="https://deno.land/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Deno</a> as of
late.</p>
<p>I was pretty interested in Deno a few years ago, but last time I looked at it
there didn&#x27;t seem to be too much there besides being a slightly better, but less
compatible version of Node.</p>
<p>Since then however, a ton of things have changed! There&#x27;s now:</p>
<ul>
<li>Compatibility with the <code>npm</code> ecosystem via the <code>npm:</code> scheme on imports</li>
<li>A ton of built-in tools like <code>lint</code>, <code>test</code>, <code>fmt</code>, <code>check</code>, etc</li>
<li>The docs are amazing!</li>
</ul>
<p>A quick aside on the <a href="https://deno.land/manual@v1.35.0/introduction" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">docs</a>, I&#x27;ve
been digging into some of the Node.js docs recently and jumping back to the Deno
manual has been a breath of fresh air. The Node.js docs are pretty dry and
minimal, whereas the Deno docs are pretty easy to dig into and have a lot of
examples for different features/needs!</p>
<p>I&#x27;m starting work on (yet another) side project, and trying to use Deno as much
as possible, it&#x27;s been really nice being able to ditch the variety of tools I
was using before:</p>
<ul>
<li>Babel</li>
<li>Jest</li>
<li>Prettier</li>
</ul>
<p>And drop in Deno for each of them!</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/deno.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Fractal Refactoring]]></title>
            <link>https://matthamlin.me//2023/june/fractal-refactoring</link>
            <guid>https://matthamlin.me//2023/june/fractal-refactoring</guid>
            <pubDate>Fri, 09 Jun 2023 19:24:40 GMT</pubDate>
            <content:encoded><![CDATA[<p>At work we‚Äôve recently started our fourth large refactor since I joined the
company. So far I‚Äôve noticed that each refactor comes sooner than the previous
one, and usually happens before the layers of refactors have been finished.</p>
<p>I‚Äôve realized that refactoring usually looks like a fractal - as you zoom in and
out on the work, think zooming in from initiatives to epics, down to stories and
then tasks and then even just one line changes at each level there‚Äôs a bit of
refactoring happening.</p>
<p>In many ways this feels a bit like
<a href="https://en.wikipedia.org/wiki/Zeno%27s_paradoxes" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Zeno‚Äôs Paradox</a>, you get
closer and closer to the finish line and feel like there are still many more
things to do before the work is ‚Äúdone‚Äù.</p>
<p>I think I‚Äôve come to accept this general state of things, in many ways it feels
reasonable to work within an environment that is constantly changing and
tackling new and different problems.</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/fractal-refactoring.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[10x Engineers]]></title>
            <link>https://matthamlin.me//2023/june/10x</link>
            <guid>https://matthamlin.me//2023/june/10x</guid>
            <pubDate>Thu, 01 Jun 2023 20:33:57 GMT</pubDate>
            <content:encoded><![CDATA[<p>There‚Äôs often a lot of chatter about ‚Äú10x engineers‚Äù online and in real life. It
never really dawned on me until the other day but generally it seems like
there‚Äôs two primary scales by which an engineer can scale themselves to deliver
more value. Thinking about scaling and 10x engineers, my mind jumped to
Kubernetes where there two primary ways in which one can scale an application:
vertically and horizontally. For those that know me personally, I‚Äôm always
trying to think of some metaphor for whatever I‚Äôm thinking about, so kubernetes
scaling just feels right to me.</p>
<p>Within kubernetes, you can scale either horizontally or vertically. Scaling
vertically usually means throwing more resources at a single pod (for example
adding more CPU or available memory). Scaling yourself vertically as an engineer
then likewise involves working longer hours, taking on more projects and work
for yourself, attempting to do the work of 2 engineers as one. I can say for
certain, after having tried to do the same for several years - it never ends
well. You‚Äôll end up hating the work, hating yourself, and feeling like you can
never get enough work done at the end of the day. Ultimately, as you begin to
hate the work more and more you begin to slide into burnout.</p>
<p>On the opposite side of the spectrum you have horizontal scaling, where you
spread our your application into more individual pods. Scaling yourself
horizontally involves building up the engineers around you to accomplish more
than you could ever hope to accomplish. Arguably from my experience,
horizontally scaling yourself is the better path that leads to a more fulfilling
time and career.</p>
<p>Certainly while some applications may perform better via vertical scaling,
humans are not the same. You may be able to do short bursts (6 to 18 months
possibly) vertically scaling yourself, you‚Äôll end up regretting it on some
level.</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/10x.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Avoid Distractions]]></title>
            <link>https://matthamlin.me//2023/april/avoid-distractions</link>
            <guid>https://matthamlin.me//2023/april/avoid-distractions</guid>
            <pubDate>Sat, 15 Apr 2023 12:20:51 GMT</pubDate>
            <content:encoded><![CDATA[<p>I probably don&#x27;t need to write much more than the title of this post, but this
is more of a reminder to myself that I should not waste as much time as I do on
Twitter or playing video games.</p>
<p>Instead I should just get back to doing fulfilling activities (whether thats
working on side projects, reading a book, hanging out with people, or just being
outside).</p>
<details class="border border-green-400 rounded-md p-4 bg-green-50 dark:bg-green-900/20"><summary class="font-bold cursor-pointer underline underline-offset-1 decoration-wavy decoration-2 decoration-green-400">TL;DR</summary><div class="py-4">Avoid Distractions</div></details>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/avoid-distractions.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[My Thoughts on Tailwind]]></title>
            <link>https://matthamlin.me//2023/april/thoughts-on-tailwind</link>
            <guid>https://matthamlin.me//2023/april/thoughts-on-tailwind</guid>
            <pubDate>Mon, 10 Apr 2023 20:51:35 GMT</pubDate>
            <content:encoded><![CDATA[<p>For a while now I&#x27;ve been pretty dismissive of
<a href="https://tailwindcss.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">TailwindCSS</a>, usually brushing it off as yet another
BootstrapCSS alternative. However, I&#x27;ve started using it in several of my side
projects and I think I&#x27;ve changed some of my opinions on it as a tool.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="background">Background:</h2>
<p>Before using Tailwind, I was using Vanilla Extract, and before that was using
Styled Components. I pivoted from each tool to the next one because of other
technical limitations. In the case of the change from Styled Components to
Vanilla Extract it was because I wanted to move away from runtime styling
solutions (partially to prepare for React Server Components).</p>
<p>The shift from Vanilla Extract to Tailwind was similar, but more of a developer
experience reason rather than for user experience. The short gist is that using
Vanilla Extract with a Next.js application is incredibly difficult to setup
&quot;correctly&quot;. Yes there is a Next.js &quot;plugin&quot;, but that doesn&#x27;t work at all with
React Server Components within Next.js<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>. For Tailwind
however, all I need to get it working is a <code>tailwind.config.js</code> file and Next
does all the hard work for me!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="refined-thoughts">Refined Thoughts:</h2>
<p>After using Tailwind for a few weeks (both on my personal site here, as well as
a few other side projects), I&#x27;ve been really enjoying it!</p>
<p>It&#x27;s been nice not needing to worry about creating a separate file to maintain
styles (e.g. a <code>.css.ts</code> file), or even maintain yet another build process
during development as well!</p>
<p>There are stil some quirks with using Tailwind in my experience that I&#x27;d love to
polish up a bit more:</p>
<ul>
<li>Figuring out what class I need</li>
<li>Handling overrides / style composition</li>
</ul>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="figuring-out-what-class-i-need">Figuring out what class I need</h4>
<p>This might just be the initial learning curve of using Tailwind, but I feel like
99 times out of 100 I usually use the wrong <code>align-items: center</code> classname, and
this happens with a number of other things also (e.g. colors, font-weight, etc).</p>
<p>Some things that have helped with this:</p>
<ul>
<li>VS Code Tailwind extension</li>
<li>Search Tailwind Raycast extension</li>
<li>ChatGPT üôÉ</li>
</ul>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="handling-overrides--style-composition">Handling overrides / style composition</h4>
<p>This one is a bit gnarly, and is really two issues:</p>
<ul>
<li>Working with a component library that has already defined a classname that I
want to override</li>
<li>Complex selectors (e.g. the
<a href="https://alistapart.com/article/axiomatic-css-and-lobotomized-owls/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">&quot;lobotomized owl selector&quot;</a>)</li>
</ul>
<p>I haven&#x27;t found great solutions for either of these cases, for the second one
I&#x27;ve been reaching for adding a custom class in my <code>globals.css</code> file and using
<code>@apply</code> from Tailwind.</p>
<hr/>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->See
<a href="https://github.com/vanilla-extract-css/vanilla-extract/issues/929" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this long running issue</a>
trying to get it working within Next.js</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/thoughts-on-tailwind.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Setting up Next.js with Tailwind]]></title>
            <link>https://matthamlin.me//2023/april/nextjs-with-tailwind</link>
            <guid>https://matthamlin.me//2023/april/nextjs-with-tailwind</guid>
            <pubDate>Thu, 06 Apr 2023 08:50:54 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve started to use <a href="https://tailwindcss.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Tailwind</a> with my personal
projects as a replacement for <a href="https://vanilla-extract.style/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Vanilla Extract</a>,
and I&#x27;ve found myself copying my tailwind settings/setup across a few different
projects as I&#x27;m refreshing their setups.</p>
<p>Since I often need to jump back into the Tailwind docs and find their Next.js
setup instructions I figured I&#x27;d share my settings here (some of which might be
opinionated), which should make it easier to run this process in different
projects.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="1-install-dependencies">1. Install Dependencies:</h3>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">yarn</span><span style="color:#B56959;--shiki-dark:#C98A7D"> add</span><span style="color:#B56959;--shiki-dark:#C98A7D"> tailwindcss</span><span style="color:#B56959;--shiki-dark:#C98A7D"> postcss</span><span style="color:#B56959;--shiki-dark:#C98A7D"> autoprefixer</span><span style="color:#B56959;--shiki-dark:#C98A7D"> daisyui</span><span style="color:#B56959;--shiki-dark:#C98A7D"> @ds-pack/daisyui</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="2-setup-tailwind-config">2. Setup Tailwind Config:</h3>
<p>Create the following <code>tailwind.config.js</code> file:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> path</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> require</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">path</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">module</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">exports</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  content</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./app/**/*.tsx</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./lib/**/*.tsx</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">    &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./ui/**/*.tsx</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    path</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">join</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      path</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">dirname</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">require</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">resolve</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">@ds-pack/daisyui</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)),</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">/**/*.js</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ),</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  ],</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  plugins</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#59873A;--shiki-dark:#80A665">require</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">@tailwindcss/typography</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">),</span><span style="color:#59873A;--shiki-dark:#80A665"> require</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">daisyui</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)],</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  daisyui</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    logs</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> false</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="3-run-the-tailwind-setup-script">3. Run the Tailwind Setup Script:</h3>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">yarn</span><span style="color:#B56959;--shiki-dark:#C98A7D"> dlx</span><span style="color:#B56959;--shiki-dark:#C98A7D"> tailwindcss</span><span style="color:#B56959;--shiki-dark:#C98A7D"> init</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -p</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="4-configre-base-styles">4. Configre Base Styles</h3>
<p>Create a new <code>globals.css</code> file within the <code>styles/</code> directory with the below
content:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">@</span><span style="color:#1E754F;--shiki-dark:#4D9375">tailwind</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> base</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">@</span><span style="color:#1E754F;--shiki-dark:#4D9375">tailwind</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> components</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">@</span><span style="color:#1E754F;--shiki-dark:#4D9375">tailwind</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> utilities</span><span style="color:#999999;--shiki-dark:#666666">;</span></span></code></pre>
<p>and then import that in your root <code>layout.tsx</code> file:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">@styles/globals.css</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="all-done">All Done!</h3>
<p>With the above, the application should be setup with Tailwind,
<a href="https://daisyui.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Daisyui</a>, and
<a href="https://github.com/ds-pack/components/tree/main/packages/daisyui" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>@ds-pack/daisyui</code></a>.
I&#x27;ll update my opinionated Next.js setup blog post with these details soon also!</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/nextjs-with-tailwind.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Write it down]]></title>
            <link>https://matthamlin.me//2023/march/write-it-down</link>
            <guid>https://matthamlin.me//2023/march/write-it-down</guid>
            <pubDate>Fri, 31 Mar 2023 09:00:01 GMT</pubDate>
            <content:encoded><![CDATA[<p>I was talking with my manager the other day about validating my own thinking,
and he shared a remarkably simple note that felt really crucial:</p>
<blockquote>
<p>Just write it down</p>
</blockquote>
<p>A good old Google Doc (or Notion page) is such an incredible tool for validating
a line of thinking. It allows you to clarify all the nitty gritty details that
are locked away in your head, and also begin to highlight the areas that you
haven&#x27;t started to think about yet as well!</p>
<p>This is something that I&#x27;ve been generally doing for a while (I&#x27;ve written quite
a bit about my own note taking systems), but it&#x27;s something I overlook quite
often also. Usually it feels like I don&#x27;t have time to get my thinking down on
(digital) paper. Maybe that&#x27;s the key point here though, slow down the thinking
enough to clearly write down my thoughts and validate them as I&#x27;m doing that.</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/write-it-down.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Setting up Shiki on Next.js]]></title>
            <link>https://matthamlin.me//2023/march/shiki-on-next-js</link>
            <guid>https://matthamlin.me//2023/march/shiki-on-next-js</guid>
            <pubDate>Sun, 26 Mar 2023 17:07:39 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently updated how I handle syntax highlighting within code blocks on my
personal site here. After my recent refactor a few months ago, I had adopted
<code>highlight.js</code> originally but then only recently realized that it still doesn&#x27;t
support JSX/TSX syntax highlighting.</p>
<p>I did some googling around, almost went down the path of using Prism.js as well,
and then remembered that <a href="https://shiki.matsu.io/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>shiki</code></a> exists and decided
to give it a try.</p>
<p>Originally, I thought it was going to be pretty easy, or at least it was easy to
implement for local development within my React Server Component setup for my
blog. It was only when I went to deploy it that it started to break.</p>
<p>I ran into the following error and was a bit confused on what it meant:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">Error: ENOENT: no such file or directory, open </span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">/var/task/node_modules/shiki/languages/typescript.tmLanguage.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  errno:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -2,</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  code:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">ENOENT</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">,</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  syscall:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">open</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">,</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  path:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">/var/task/node_modules/shiki/languages/typescript.tmLanguage.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span></code></pre>
<p>It turns out that by default, Next.js doesn&#x27;t bundle in <code>shiki</code>, which means
there&#x27;s a raw <code>require</code> or dynamic import for the text grammars and the themes.</p>
<p>After stumbling across a few different issues, each with different ways to
resolve the problem I was running into, I found the following solution:</p>
<ol>
<li>Import the themes and grammars that are needed manually</li>
<li>Pass them directly into the <code>highlight</code> call</li>
</ol>
<p>Here&#x27;s a complete example of my current CodeBlock component:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> shiki</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Manually import themes and grammars</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cssGrammar</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki/languages/css.tmLanguage.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> diffGrammar</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki/languages/diff.tmLanguage.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> jsonGrammar</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki/languages/json.tmLanguage.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> mdGrammar</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki/languages/markdown.tmLanguage.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bashGrammar</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki/languages/shellscript.tmLanguage.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> tsxGrammar</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki/languages/tsx.tmLanguage.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> githubDarkDimmed</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki/themes/github-dark-dimmed.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> githubLight</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">shiki/themes/github-light.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> CodeBlock</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#B07D48;--shiki-dark:#BD976A"> children</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> className</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666"> })</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lang</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> className</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ?</span><span style="color:#B07D48;--shiki-dark:#BD976A"> className</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">split</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">-</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> :</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">typescript</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">lang</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">tsx</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lang</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">jsx</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lang</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">js</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    lang</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">typescript</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> else</span><span style="color:#1E754F;--shiki-dark:#4D9375"> if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">lang</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">sh</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    lang</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">bash</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> codeToHighlight</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> children</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> highlighter</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#B07D48;--shiki-dark:#BD976A"> shiki</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">getHighlighter</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // Pass in manually imported themes and grammars</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    themes</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">githubDarkDimmed</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> githubLight</span><span style="color:#999999;--shiki-dark:#666666">],</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    langs</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {</span><span style="color:#998418;--shiki-dark:#B8A965"> id</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">tsx</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> scopeName</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">source.tsx</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> grammar</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> tsxGrammar</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {</span><span style="color:#998418;--shiki-dark:#B8A965"> id</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">typescript</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> scopeName</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">source.tsx</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> grammar</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> tsxGrammar</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {</span><span style="color:#998418;--shiki-dark:#B8A965"> id</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">md</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> scopeName</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">text.html.markdown</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> grammar</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> mdGrammar</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {</span><span style="color:#998418;--shiki-dark:#B8A965"> id</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">css</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> scopeName</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">source.css</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> grammar</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cssGrammar</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {</span><span style="color:#998418;--shiki-dark:#B8A965"> id</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">diff</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> scopeName</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">source.diff</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> grammar</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> diffGrammar</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {</span><span style="color:#998418;--shiki-dark:#B8A965"> id</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">bash</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> scopeName</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">source.shell</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> grammar</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bashGrammar</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {</span><span style="color:#998418;--shiki-dark:#B8A965"> id</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> scopeName</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">source.json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> grammar</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> jsonGrammar</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ],</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> html</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> highlighter</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">codeToHtml</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">codeToHighlight</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lang</span><span style="color:#999999;--shiki-dark:#666666"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Box</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      is</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">code</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      dangerouslySetInnerHTML</span><span style="color:#999999;--shiki-dark:#666666">={{</span><span style="color:#998418;--shiki-dark:#B8A965"> __html</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> html</span><span style="color:#999999;--shiki-dark:#666666"> }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {...</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      className</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">className</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ?</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">className</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> ${</span><span style="color:#B56959;--shiki-dark:#C98A7D">code</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#AB5959;--shiki-dark:#CB7676"> :</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">code</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>For some reason, shiki&#x27;s TypeScript types don&#x27;t seem to like me passing in the
themes or the grammars manually, so I opted to ts-ignore those errors for the
time being üôÇ.</p>
<p>Hopefully this helps others that might run into the same issue!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/shiki-on-next-js.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Dollar: Devlog 2]]></title>
            <link>https://matthamlin.me//2023/march/dollar-devlog-2</link>
            <guid>https://matthamlin.me//2023/march/dollar-devlog-2</guid>
            <pubDate>Sun, 26 Mar 2023 10:47:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>This post is a continuation of my first Dollar Devlog
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/january/dollar-devlog-1">here</a>.</p>
<p>It&#x27;s been a bit since the last devlog, life has generally got in the way (work
more-so than anything else), however this weekend I was able to spend quite a
bit of time working on Dollar again.</p>
<p>I&#x27;ve made some changes since the last devlog, but still nothing publically
available to showcase just yet!</p>
<p>Primarily, this Saturday I started off by forking my component library
(<code>@ds-pack/components</code>) into a new package that completely swaps out Vanilla
Extract for TailwindCSS (using <a href="https://daisyui.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>daisyui</code></a>). For those of
you that know me, you might be a bit surprised that I decided to try out
tailwind, I&#x27;ve frequently referred to it as &quot;bootstrapcss for the modern age&quot;,
yet ironically - that&#x27;s exactly what I&#x27;ve been looking for as of late.</p>
<p>I don&#x27;t intend to fully dig into that transition in this post (I might blog
about it in another post however), but the main reason that I opted to switch
was that I wanted to tear down how my css build pipeline works in most of my
modern Next.js applications. I&#x27;ve written about that in my
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2022/december/updated-opinionated-nextjs-setup">opinionated Next.js app setup</a>
blog post, but the gist is that having two process running at once to compile
styles and run the app was a pain and let to a ton of issues when iteratively
updating styles.</p>
<p>Daisyui seemed like a good option, and really all I wanted was a React version
of it - which I felt like <code>@ds-pack/components</code> was a good bare bones React
component library to fit that need. I&#x27;ve published a very early version of the
library as <code>@ds-pack/daisyui</code>, feel free to check it out if you want to
experiment with the library in your own side project! (I do plan to refactor my
personal site with this version of my components, but that might take a while to
fully implement)</p>
<p>Alright, back to my work on Dollar, I haven&#x27;t made much progress because of the
effort required to build the new UI library (although completeing it in the span
of an afternoon was pretty sweet).</p>
<p>Outside of the new coat of paint, I&#x27;ve been able to:</p>
<ul>
<li>Fully integrate React Server Components</li>
<li>Experiment with Server Actions (more on this below)</li>
<li>Begin to wire up supabase as the DB for the project</li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="server-actions">Server Actions</h3>
<p>Alright, I know server actions are still super early, but they&#x27;re kind of
promising. Being able to do remote procedure calls within React is pretty dope!</p>
<p>For those that don&#x27;t know, that roughly looks like the following:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// some client code, like a form!</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">use client</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> login</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./actions</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> Form</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">form</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">input</span><span style="color:#B07D48;--shiki-dark:#BD976A"> name</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">email</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> type</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">text</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        type</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">button</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        onClick</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#AB5959;--shiki-dark:#CB7676">async</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">          let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> userToken</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> await</span><span style="color:#59873A;--shiki-dark:#80A665"> login</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">            email</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> document</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">getElementsByName</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">email</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#999999;--shiki-dark:#666666">].</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">          });</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">          // do what you want with userToken here!</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        Login!</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">form</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>You might be thinking, that doesn&#x27;t seem too cool, we&#x27;ve been doing that for
years, <code>login</code> from <code>./actions</code> could just be a wrapper around a <code>fetch()</code> call!</p>
<p>Here&#x27;s the cool thing, it is, but I don&#x27;t have to do all the complext work of
wiring up that <code>fetch</code> call, here&#x27;s the full code of <code>./actions</code>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// new directive!</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">use server</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> async</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> login</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#B07D48;--shiki-dark:#BD976A"> email</span><span style="color:#999999;--shiki-dark:#666666"> })</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // do something to login the user</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> userToken</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>The really neat thing here is that React / Next are doing the heavy lifting for
me to do the <code>fetch</code> call in the background!</p>
<p>There are some limitations however, e.g. for logging in a user I&#x27;d probably want
to store a JWT as a cookie, unfortunately I don&#x27;t have access to the raw
<code>Request</code> and also I&#x27;m not able to send a raw <code>Response</code> back to the client - so
I&#x27;d probably still want to reach for Next.js <code>routes</code> to support some of those
use cases.</p>
<p>None the less, this is still a pretty neat pattern that I plan on exploring more
as I get deeper into the project!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/dollar-devlog-2.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Navigating Monorepos with Ease]]></title>
            <link>https://matthamlin.me//2023/january/navigating-monorepos-with-ease</link>
            <guid>https://matthamlin.me//2023/january/navigating-monorepos-with-ease</guid>
            <pubDate>Mon, 30 Jan 2023 16:57:50 GMT</pubDate>
            <content:encoded><![CDATA[<p>A few years back now I wrote <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2021/february/yw">a short blog post</a> sharing a
shell function that made it easier to navigate Yarn v1 monorepos. I realized
today that I haven&#x27;t updated that post with a new function that works for Yarn
berry (v2 and v3) releases.</p>
<p>Similar to that original snippet (which I&#x27;ve since re-named to <code>ywOld</code>) you&#x27;ll
need to install <code>fzf</code> and <code>jq</code> via homebrew (<code>brew</code>), but once you&#x27;ve done that
you should be able to quickly run any script from any package without typing out
the whole workspace name or without changing into the directory for the
workspace.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">yw</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  yarn</span><span style="color:#B56959;--shiki-dark:#C98A7D"> workspace</span><span style="color:#999999;--shiki-dark:#666666"> $(</span><span style="color:#59873A;--shiki-dark:#80A665">yarn</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --json</span><span style="color:#B56959;--shiki-dark:#C98A7D"> workspaces</span><span style="color:#B56959;--shiki-dark:#C98A7D"> list</span><span style="color:#AB5959;--shiki-dark:#CB7676"> |</span><span style="color:#59873A;--shiki-dark:#80A665"> jq</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">.</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -r</span><span style="color:#AB5959;--shiki-dark:#CB7676"> |</span><span style="color:#59873A;--shiki-dark:#80A665"> jq</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">.name</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -r</span><span style="color:#AB5959;--shiki-dark:#CB7676"> |</span><span style="color:#59873A;--shiki-dark:#80A665"> fzf</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$@</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>To &quot;install&quot; this, you can copy and paste the above snippet into your <code>.bashrc</code>
or <code>.zshrc</code> file (or whatever config file you use for your shell), and then
<code>source</code> that config (e.g. <code>source ~/.zshrc</code>) in your terminal and you should be
able to use it!</p>
<p>Example usage:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># You can use it to run any package.json script within the workspace of</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># your choice via:</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">yw</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &lt;</span><span style="color:#B56959;--shiki-dark:#C98A7D">script-nam</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">e</span><span style="color:#AB5959;--shiki-dark:#CB7676">&gt;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># For example, if you want to run the `test` script on a specific</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># workspace, you can run:</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">yw</span><span style="color:#B56959;--shiki-dark:#C98A7D"> test</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># passing args should &quot;just work&quot;:</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">yw</span><span style="color:#B56959;--shiki-dark:#C98A7D"> test</span><span style="color:#B56959;--shiki-dark:#C98A7D"> some-file-name</span></span></code></pre>
<p>Notably, this doesn&#x27;t let you select multiple workspaces to run a command
within, I may eventually package this up into a helpful package that you can
install directly in your monorepo, akin to one of my older projects
<a href="https://github.com/hamlim/projects/blob/master/packages/zaps/README.md" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Zaps</a>
ü§î.</p>
<p>Also - if you still have some projects using yarn classic, I ended up renaming
my old <code>yw</code> script to <code>ywold</code> üòÇ.</p>
<hr/>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/navigating-monorepos-with-ease.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Dollar: Devlog 1]]></title>
            <link>https://matthamlin.me//2023/january/dollar-devlog-1</link>
            <guid>https://matthamlin.me//2023/january/dollar-devlog-1</guid>
            <pubDate>Sat, 28 Jan 2023 14:57:06 GMT</pubDate>
            <content:encoded><![CDATA[<p>About 7 years ago at the time of writing (January 2023), I started a little side
project while I was in college that I called Dollar. It was meant to be a
financial tracking web application (very original, I know!) that I could
hopefully use to get a better understanding of how much money I was spending and
how I could hopefully become better at budgeting that money as well.</p>
<p>I had kept up development of the application and had something that I was
actually pretty proud of also! Unfortunately over the years I wasn&#x27;t able to
keep up development and use of it, and it fell into disrepair.</p>
<p>The original version was built using synchronous XHR, jQuery, and some hand
crafted HTML! I had attempted an incremental rewrite into React around 2017 at
some point, but by then the codebase was such a mess that I gave up on the
effort.</p>
<p>I&#x27;ve tried several other rewrites of the same application (with different
designs) since then, but haven&#x27;t really had the energy to ship any of them and
make them part of my daily workflow.</p>
<hr/>
<p>This afternoon however, I was sitting on the couch and looking for some
motivation to get back into some coding, so I figured I&#x27;d dive back in on
rewriting Dollar. I found an iteration from last year or maybe even 2021 that
was looking pretty good so I figure I&#x27;ll use this as a baseline and work from
there.</p>
<p>A quick recap of the current codebase:</p>
<ul>
<li>Using <a href="https://nextjs.org/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Next.js</a> (using version 10!)</li>
<li>Using <a href="https://supabase.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Supabase</a> to manage the database (the original
application used either Fieldbook [now shut down], and then maybe Airtable I
think)</li>
<li>Using my component library <a href="https://github.com/ds-pack/components" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">DS Pack</a> (a
really outdated version)</li>
</ul>
<p>I&#x27;m going to start with updating the codebase to some more recent package
versions and seeing how it works out, hopefully it&#x27;s possible to do so without
breaking everything üòÇ.</p>
<p>I&#x27;ll also aim to use this blog post as sort of a running log of my notes and
work at least for today, and who know&#x27;s maybe tomorrow I&#x27;ll have a second Devlog
for this work!</p>
<hr/>
<p>An interesting edge case that I haven&#x27;t accounted for yet within my component
library is a selection UI (e.g. a Dropdown or <code>&lt;select&gt;</code> element). I got around
this with the previous iteration of the application by using selectable chips
which I&#x27;ve since stopped supporting within my library. Hmm, will need to think
about the right way to support this feature.</p>
<p>Another interesting hiccup that I&#x27;ll need to look into is how I want to
integrate Vanilla Extract into the application. The VE Next.js plugin at the
time of writing is still not supported with React Server Components in Next.js
13 sadly. I worked around this with a really rough process of having two build
flows setup for my personal site and another site as well, maybe I opt for that
in this case again as well.</p>
<hr/>
<p>I ended up taking a longer break than I expected and wasn&#x27;t able to get back to
the project on Sunday, however I had a few ideas over the rest of the weekend
that I would like to explore eventually.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/dollar-devlog-1.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[My Updated Next.js Setup]]></title>
            <link>https://matthamlin.me//2022/december/updated-opinionated-nextjs-setup</link>
            <guid>https://matthamlin.me//2022/december/updated-opinionated-nextjs-setup</guid>
            <pubDate>Mon, 26 Dec 2022 06:59:55 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>This is an update to one of my previous blog posts published in January of 2022 <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2022/january/my-opinionated-nextjs-setup">here</a></em></p>
<p>I&#x27;ve been tinkering with the Layouts features and functionality within Next for quite some time now, and even had the time to refactor this personal site to use the new features. With all that tinkering I figured I would share some of the things that I&#x27;m generally doing with my Next.js apps.</p>
<p>Some of this is still a bit rough around the edges, and I‚Äôm sure I‚Äôll be re-thinking some of these ideas in the future as well, but I‚Äôll aim to post updates as I make them.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="on-directories">On Directories:</h2>
<p>I used to really like the <code>src/</code> directory functionality within Next, it let me colocate all my things into a single place, making the codebase a bit easier to look at. However since originally the app directory functionality within Next (aka Layouts) didn‚Äôt support the same setup, I‚Äôve decided to drop that paradigm.</p>
<p>I‚Äôve now centered around the following directories (roughly):</p>
<ul>
<li><code>app/</code> - for pages and layouts</li>
<li><code>lib/</code> - for shared functionality like hooks or other logic</li>
<li><code>styles/</code> - for styles, see <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#on-styles">On Styles</a> below for more details</li>
<li><code>ui/</code> - for shared components within the application</li>
<li><code>scripts/</code> - for shared project scripts, these are usually <code>.mjs</code> files</li>
</ul>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="on-styles">On Styles:</h2>
<p>I still use and really enjoy <a href="%5Bhttps://vanilla-extract.style/%5D(https://vanilla-extract.style/)" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">vanilla-extract</a>, and I used to use their default Next.js integration, however it (at the time of writing) still does not work with Layouts in Next.js. So instead what I‚Äôve opted to do is adopt a parallel build step where I‚Äôll compile out <code>.css.ts</code> files <strong>before</strong> Next.js builds the application.</p>
<p>My current preferred setup is to leverage their <a href="%5Bhttps://vanilla-extract.style/documentation/integrations/rollup/%5D(https://vanilla-extract.style/documentation/integrations/rollup/)" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">rollup</a> integration, which will take any project <code>.css.ts</code> files and compile them to a similar directory structure within the <code>styles/</code> directory.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="path-aliases">Path Aliases:</h2>
<p>With all these separate directories, I‚Äôve also adopted TypeScript path aliases, allowing me to import code from any of the above directories via <code>@[directory name]</code>, for example:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A">cx</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">@lib/classnames</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span></code></pre>
<p>This can be accomplished by adding the following to your <code>tsconfig.json</code> file:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">compilerOptions</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">    &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">baseUrl</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">.</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">    &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">paths</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">      &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">@ui/*</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./ui/*</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">],</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">      &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">@lib/*</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./lib/*</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">],</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">      &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">@styles/*</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./styles/*</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">]</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="server-components">Server Components:</h2>
<p>I‚Äôm pretty bullish on using a server to power my sites, so I may generally <strong>opt-out</strong> of the static optimizations that Next.js does and instead force pages to operate as runtime server components + server side rendering. The main way I‚Äôve found that lets me do that is to add the following to any of the pages:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> revalidate</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> dynamic</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">force-dynamic</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="summary">Summary:</h2>
<p>Those are the high level patterns I‚Äôve been following since adopting Layouts, but I‚Äôm curious what you have found to be useful! If you have alternative patterns, or additive ones please share them!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/updated-opinionated-nextjs-setup.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Yarn Berry Gitignore Settings]]></title>
            <link>https://matthamlin.me//2022/july/yarn-berry-gitignore</link>
            <guid>https://matthamlin.me//2022/july/yarn-berry-gitignore</guid>
            <pubDate>Thu, 21 Jul 2022 07:47:36 GMT</pubDate>
            <content:encoded><![CDATA[<p>I often google something like <code>yarn berry gitignore settings</code> and I usually end
up on the same old stack overflow post that then has an answer that links to a
random place on the Yarn website, where I usually need to jump through another
link or two until I find the <a href="https://next.yarnpkg.com/getting-started/qa#which-files-should-be-gitignored" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">right documentation here</a>.</p>
<p>So I figured I‚Äôd speed up my own time to find this information and publish it
for others to quickly find also!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="zero-installs">Zero Installs:</h2>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">.yarn/*</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/cache</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/patches</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/plugins</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/releases</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/sdks</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/versions</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="without-zero-installs">Without Zero Installs:</h2>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">.pnp.*</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">.yarn/*</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/patches</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/plugins</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/releases</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/sdks</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#59873A;--shiki-dark:#80A665">.yarn/versions</span></span></code></pre>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/yarn-berry-gitignore.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On Note Taking]]></title>
            <link>https://matthamlin.me//2022/june/on-note-taking</link>
            <guid>https://matthamlin.me//2022/june/on-note-taking</guid>
            <pubDate>Tue, 28 Jun 2022 09:06:24 GMT</pubDate>
            <content:encoded><![CDATA[<p>This blog post might seem fairly different from most of my other posts, mostly
because my other posts are usually pretty concrete about specific things (e.g.
web development methodologies, or about a trip to central Oregon). This post
will instead be a bit more broad and open ended, I hope that it is still
valuable for at least a few of the people that may stumble upon it in the
future.</p>
<hr/>
<p>I‚Äôm pretty bullish on the possibilities of enhancing our methods of note taking
as a way to improve the way that we think as humans. I‚Äôve definitely come around
to this train of thought thanks to the note taking renaissance that we find
ourselves in at the moment. It seems like every month there is a new app that
tries to solve the note taking problem space in a unique way.</p>
<p>I think there are a lot of unique areas of exploration that we (or at least I)
have fully dived into yet, and so I wanted to catalog them here and hopefully
return to some of these ideas and publish more content on them!</p>
<ul>
<li>Collective note taking<!-- -->
<ul>
<li>Collaborating with others on note databases in the hopes to create both
intentional and coincidental linkages between concepts</li>
</ul>
</li>
<li>Iterative note taking</li>
<li>Computer aided notes<!-- -->
<ul>
<li><a target="_blank" rel="noopener noreferrer" href="https://twitter.com/gordonbrander" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-4 h-4 inline-block mr-1" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>@<!-- -->gordonbrander</a> I think has been working on a
similar concept within <a href="https://subconscious.substack.com/">Subconscious</a></li>
</ul>
</li>
</ul>
<p>This list is not exhaustive, I expect that I‚Äôll want to add more concepts here
over time!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/on-note-taking.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On Writing Tests]]></title>
            <link>https://matthamlin.me//2022/june/on-writing-tests</link>
            <guid>https://matthamlin.me//2022/june/on-writing-tests</guid>
            <pubDate>Sun, 26 Jun 2022 20:39:21 GMT</pubDate>
            <content:encoded><![CDATA[<p>Frequently I see developers writing unit tests using a lot of <a href="https://en.wikipedia.org/wiki/Metaprogramming#:~:text=Metaprogramming%20is%20a%20programming%20technique,even%20modify%20itself%20while%20running." class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">metaprogramming</a>
patterns, for example packaging up shared functionality across multiple tests
into it‚Äôs own helper utility function. However I personally believe this pattern
actively contributes to more difficult to maintain test suites.</p>
<p>I think this trend partially gains momentum because developers tend to follow
the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">DRY programming principle</a>,
so whenever they see the same code used in two places they immediately reach for
an abstraction that can be used in both places.</p>
<p>Eventually these abstractions grow to become unmaintainable, it usually starts
with adding one more unit test that needs to change the argument of a function
or a prop on a component, which seems easy enough to add it as an argument to
the abstraction. This soon snowballs as more and more edge cases need to be
added to the abstraction. Finally, a different engineer is looking at a failing
test 2 years from now and scratching their head on what is happening within the
unit test, they need to jump through complex abstractions layered on the unit
under test until they‚Äôre forced to give up and disable the test.</p>
<p>Instead, I recommend that developers usually keep tests as isolated as possible,
what you do in one test shouldn‚Äôt impact your other tests! This mindset can be
really difficult to feel comfortable with, but I‚Äôve found it starts to come
naturally over time. Plus it builds on two crucial tools to most engineers
toolbox: <code>copy</code> and <code>paste</code> üòÇ¬†!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/on-writing-tests.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Switching back to Notion]]></title>
            <link>https://matthamlin.me//2022/may/switching-back-to-notion</link>
            <guid>https://matthamlin.me//2022/may/switching-back-to-notion</guid>
            <pubDate>Sun, 29 May 2022 17:51:16 GMT</pubDate>
            <content:encoded><![CDATA[<div class="rounded-lg bg-muted px-4 py-0.5"><p><strong>Update - July 2024</strong>: I&#x27;ve now written a follow up to this post, <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2024/july/switching-back-to-obsidian">Switching back to Obsidian</a>!</p></div>
<p>I‚Äôve probably written blog posts like this in the past, as I tend to switch
between note taking platforms, I also don‚Äôt expect this to be my last one
either!</p>
<p>I‚Äôve recently switched back to Notion from Obsidian as my primary note taking
solution.</p>
<p>The main motivation for this shift was my need for accessing and editing my
notes across all my main devices, which today includes my personal MacBook, my
work MacBook, and my iPhone.</p>
<p>I had <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2021/august/obsidian-sync">written about a setup</a> for syncing my
Obsidian vault across devices before, however that approach only worked for
android devices (leveraging Dropbox to sync my vault). For the past 5 or so
months at the time of writing I have been getting by with using a hybrid of
Obsidian and Apple Notes across my devices and it‚Äôs been rough, I‚Äôve wanted to
capture some thoughts in my vault but would be out and about with only my
iPhone!</p>
<p>I have used Notion for quite a bit before, but had stopped around mid-2020 and
instead shifted over to a custom note taking solution and then Roam and then
Obsidian. One of the motivators for shifting off of Notion last time was that
the performance of the applications (native on MacOS and at the time Android)
was pretty poor. I‚Äôm hoping that they‚Äôve improved the performance over the past
two years!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/switching-back-to-notion.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Moving to PNPM]]></title>
            <link>https://matthamlin.me//2022/may/moving-to-pnpm</link>
            <guid>https://matthamlin.me//2022/may/moving-to-pnpm</guid>
            <pubDate>Sat, 21 May 2022 13:01:16 GMT</pubDate>
            <content:encoded><![CDATA[<p>Over the past week or so I start to finally experiment with Yarn v3, a few years
back I tried out Yarn v2 and ran into a ton of issues (anyone else remember that
Yarn needed to patch a ton of tooling to just work?!). I figured they had ironed
out some of those issues by v3 and that maybe it was time to replace my yarn v1
installation and try it out.</p>
<p>Unfortunately, it still seems pretty clunky, not too many tools in the ecosystem
seem to support it still (for example it seems Vercel still uses Yarn v1 during
deploys), so I decided to give up on Yarn and switch over to PNPM.</p>
<p>We&#x27;ve been using PNPM at work for a few new repos and while it has some unique
approaches to module installation and setup, it seems to be pretty quick and
easy to use.</p>
<p>I will say, the v6 to v7 changes seem pretty intense (I&#x27;ve already noticed some
projects work only with PNPM v6), but overall I&#x27;ve been enjoying PNPM! Now time
for me to get back and update all my side projects again üôÉ.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/moving-to-pnpm.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Upgrade Guides]]></title>
            <link>https://matthamlin.me//2022/may/upgrade-guides</link>
            <guid>https://matthamlin.me//2022/may/upgrade-guides</guid>
            <pubDate>Tue, 17 May 2022 10:25:29 GMT</pubDate>
            <content:encoded><![CDATA[<p>Most healthy open source projects maintain a changelog, that annotates the
changes made to the project over time, and usually relates those changes to the
semver version that they are released with.</p>
<p>However, these changelogs tend to not go into details about how that change will
impact projects relying on the library. Usually the changelog is just a
convenience feature that allows people to track changes over time.</p>
<p>Something I&#x27;ve been thinking about for a while is if projects should offer
either a more robust changelog, or a new file entirely that can better speak to
the impact of changes made to the library over time.</p>
<p>The design systems team at Wayfair has been tinkering in this space for a few
years now, usually when we deprecated a component or another piece of code we
authored an upgrade guide or manual to help the features relying on the now
deprecated component to move to the proper supported patterns.</p>
<p>Usually those guides are finely scoped to specific components, but what if every
library kept an upgrade guide that covered all aspects of the library?</p>
<p>This would be incredibly useful for consumers of the library if they fall behind
by several releases, allowing them to follow the guide from version to version,
making the required changes within their codebase.</p>
<p>I could imagine these guides being setup as a similar format as most
<code>changelog.md</code> files, broken down by release with detailed notes on how the
consumer can navigate any changes that the library is making.</p>
<p>This could also be a really useful resource for libraries that plan out their
breaking changes, they can use this guide as a place to note upcoming breaking
changes and how projects can plan for those changes before they are released.</p>
<p>What are your thoughts about this concept? Would you find it valuable for the
libraries you depend upon to ship a <code>upgrade-guide.md</code> document alongside their
existing changelog?</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/upgrade-guides.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[My Opinionated Next.js Setup]]></title>
            <link>https://matthamlin.me//2022/january/my-opinionated-nextjs-setup</link>
            <guid>https://matthamlin.me//2022/january/my-opinionated-nextjs-setup</guid>
            <pubDate>Sun, 30 Jan 2022 11:10:28 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>I&#x27;ve since updated this blog post <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2022/december/updated-opinionated-nextjs-setup">here</a></em></p>
<p>As I&#x27;ve been hacking on a recent
<a href="https://github.com/hamlim/watch-list" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">side project</a>, I&#x27;ve started to form some
loose opinions on my ideal Next.js application structure. Some of these opinions
are strongly held, and others are still forming and I expect will change in the
future, however I wanted to document them here to see if others have built up
similar application code structures!</p>
<ol>
<li>Nest code within a <code>src</code> directory</li>
</ol>
<p>This one is fairly basic, however it aligns with my personal need to keep
codebases relatively well organized without too much clutter at the root of the
repository / project root.</p>
<ol start="2">
<li>Group code into the following folders:</li>
</ol>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">src/</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  components/</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  pages/</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  views/</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  utils/</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (optional)</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  hooks/</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE"> (optional)</span></span></code></pre>
<p>This structure allows me to easily split off some piece of code into a easily
identifiable location within the project, without adding too much ceremony to
creating new files. I still strongly feel that code shouldn&#x27;t be split out to
new files when one file gets a bit too long however! (My ideal application would
have all the code live within a single file, and then let my IDE &quot;slice&quot; that
file up into easily viewable and editable windows)</p>
<p>Both the <code>utils</code> and <code>hooks</code> folders are optional, however I will generally want
to stay away from having any files within this <code>src</code> directory <strong>not</strong> in one of
the above folders.</p>
<ol start="3">
<li>Keep files in <code>pages/</code> minimal (Still feeling this one out)</li>
</ol>
<p>I&#x27;ve included a <code>views/</code> folder above to help capture any top level application
views, the beauty of this structure is that it allows me to colocate styles
(since I&#x27;m leveraging <a href="https://vanilla-extract.style/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>vanilla-extract</code></a> these
days) along with any tests if I ever find myself wanting to write unit tests.</p>
<p>This one I haven&#x27;t really given much thought to however, I don&#x27;t know the right
point to allow some composition within the file in <code>pages/</code> vs the right amount
left in the <code>views/</code> files.</p>
<p>Do you have any strong (or weak) opinions on how you structure your Next.js
applications? Reach out on twitter to share them!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/my-opinionated-nextjs-setup.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[My Two Favorite React Tricks]]></title>
            <link>https://matthamlin.me//2022/january/my-two-favorite-react-tricks</link>
            <guid>https://matthamlin.me//2022/january/my-two-favorite-react-tricks</guid>
            <pubDate>Wed, 26 Jan 2022 20:25:13 GMT</pubDate>
            <content:encoded><![CDATA[<p>There are generally two rarely used patterns in React that I really enjoy
getting to use in applications that I work on.</p>
<p>These both are:</p>
<ul>
<li>Using <code>key</code></li>
<li>Throwing within a state setter</li>
</ul>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="on-key">On <code>Key</code></h2>
<p>In React, <code>key</code> is one of those early concepts that you learn that seems to only
be documented for use within lists. However it is an incredibly useful feature
that most developers don&#x27;t use when building applications!</p>
<p>If you ever find yourself realizing that you need to reset the state, or refs,
of a particular component based on some value in the parent a <code>key</code> that can be
changed on the component is a really useful way to do so!</p>
<p>I&#x27;ve generally recommended this for updating components that may perform some
computation when the component mounts, but doesn&#x27;t re-compute that operation at
a later point in time.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Child</span><span style="color:#B07D48;--shiki-dark:#BD976A"> key</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">someCondition</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ?</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">a</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> :</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">b</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="throwing-within-a-state-setter">Throwing Within A State Setter</h2>
<p>I&#x27;ve written about this concept briefly in my post on
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2019/january/react-error-boundaries#caveat">React Error Boundaries</a>,
however I figured I&#x27;d write about the concept in another post since I really
enjoy this feature.</p>
<p>If you ever find yourself wanting to trigger an error boundary from an event
handler, or even an asynchronous function call (e.g. within a promise callback,
or another microtask), you can call a <code>setState</code> function with a function that
throws in the body!</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">function handleClick() {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  try {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    // do some logic</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  } catch (error) {</span></span>
<span class="line"><span style="color:#B31D28;--shiki-dark:#FDAEB7">-     // How do I trigger an error boundary here?</span></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">+     setState(() =&gt; {</span></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">+       throw error;</span></span>
<span class="line"><span style="color:#22863A;--shiki-dark:#85E89D">+     });</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  }</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">}</span></span></code></pre>
<p>I use this pattern so often that I usually add a <code>useErrorBoundary</code> hook in most
of my side projects:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> useState</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> useErrorBoundary</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> set</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">error</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    set</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      throw</span><span style="color:#B07D48;--shiki-dark:#BD976A"> error</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    })</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// in another file...</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> Component</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> trigger</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useErrorBoundary</span><span style="color:#999999;--shiki-dark:#666666">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  function</span><span style="color:#59873A;--shiki-dark:#80A665"> handleClick</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    trigger</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">new</span><span style="color:#59873A;--shiki-dark:#80A665"> Error</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Yo!</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">))</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  //...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/my-two-favorite-react-tricks.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Switching to iPhone]]></title>
            <link>https://matthamlin.me//2022/january/switching-to-iphone</link>
            <guid>https://matthamlin.me//2022/january/switching-to-iphone</guid>
            <pubDate>Sat, 15 Jan 2022 14:43:41 GMT</pubDate>
            <content:encoded><![CDATA[<p>I tweeted the other week about picking up an iPhone to attempt to switch over
from Android phones from the past 12 years or so (more than half of which have
all been Google devices - both Nexus and Pixels).</p>
<p>I&#x27;ve written quite a bit about my enjoyment of using the Pixel series of phones
from Google, I had really enjoyed the hardware for all of them, and up until
recently the software experience was usable. However over the past few months
with my Pixel 6 Pro, the software experience (as well as some hardware features)
has been starting to get on my nerves.</p>
<p>Most of my issues boil down to the common ones that others are also having with
the phones:</p>
<ul>
<li>Camera quality has been hit or miss<!-- -->
<ul>
<li>Specifically the front facing camera for almost any shot</li>
<li>All of my low-light / night time pictures have been either far too grainy,
or over processed</li>
</ul>
</li>
<li>The fingerprint sensor under the display has been flaky as well</li>
<li>Various software issues<!-- -->
<ul>
<li>Both via the OS itself, as well as many UI/UX bugs in Google&#x27;s own apps
(YouTube Music had recieved an update that added a ton of padding around all
elements of the UI, making it seem like it was scaling the app up to a
larger display)</li>
<li>Slow system updates (the December patch was delayed and then cancelled in
favor of a January patch)</li>
</ul>
</li>
</ul>
<p>So instead of switching to another Android phone, I decided to try out an
iPhone. I ordered the iPhone 13 Pro Max (in the blue variant), and surprisingly
was able to get it delivered the same day!</p>
<p>I&#x27;ve had the phone for less than a week at this point, however I&#x27;ve already
found some things I like and some that I miss from my Pixel. I also have a few
things on my todo list to figure out how I can replicate some of my previous
workflows too!</p>
<p>I&#x27;ll keep this short for now, but here is a brief review only about 4 days in:</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="things-i-like">Things I Like:</h3>
<ul>
<li>iMessage<!-- -->
<ul>
<li>Everyone has been hyping this up anytime I talk to someone that uses Apple
devices, and I get it now</li>
</ul>
</li>
<li>Apps<!-- -->
<ul>
<li>Both in terms of apps that are only on iOS (shoutout to <a href="https://collage.party" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Collage</a> üôÇ), as well as features within
applications (e.g. Twitter)</li>
</ul>
</li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="things-i-miss">Things I Miss:</h3>
<ul>
<li>Notifications<!-- -->
<ul>
<li>Notifications on Android are leagues ahead of them on iOS, quick actions and
even quick replies to conversations are amazing!</li>
</ul>
</li>
<li>Split personal and work accounts<!-- -->
<ul>
<li>Being able to easily jump between separate apps for personal email and work
email, or even being able to turn off work apps is something that I don&#x27;t
see nearly enough people talk about when comparing iOS with Android!</li>
</ul>
</li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="things-i-need-to-solve">Things I Need to Solve:</h3>
<ul>
<li>Obsidian sync<!-- -->
<ul>
<li>I&#x27;ve been <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2021/august/obsidian-sync">using Dropbox to sync</a> all my
obsidian notes across my personal laptop, work laptop, phone, and tablet.
Now I&#x27;ll need to move to iCloud storage to sync I think ü§î</li>
</ul>
</li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/switching-to-iphone.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Year in Music]]></title>
            <link>https://matthamlin.me//2021/december/2021-in-music</link>
            <guid>https://matthamlin.me//2021/december/2021-in-music</guid>
            <pubDate>Sat, 27 Nov 2021 07:30:49 GMT</pubDate>
            <content:encoded><![CDATA[<p>This past year I have been keeping a list of music playlists for each month of
the year, I&#x27;ve mostly been throwing in different tracks (both new and old) that
I found myself interested in listening to during that month.</p>
<p>I don&#x27;t really know what prompted me to make a playlist for each month of the
year, but I&#x27;ve always generally been a big fan of playlists in general, last
year during Covid I created a really long playlist that I called &quot;2020
Quarantine&quot;. Even before that I was generally making playlists for the different
seasons of the year, dating at least back to freshman year of high school
(almost 14 years ago!).</p>
<p>These playlists are sort of a snapshot into my current interests and even
general feelings at the time of the year that I made it.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/2021-in-music.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Pair Programming (stub)]]></title>
            <link>https://matthamlin.me//2021/november/pair-programming-stub</link>
            <guid>https://matthamlin.me//2021/november/pair-programming-stub</guid>
            <pubDate>Sat, 20 Nov 2021 10:40:50 GMT</pubDate>
            <content:encoded><![CDATA[<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="update">Update!</h3>
<p>I did in fact come back to writing about pair programming in
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/november/pair-programming">this blog post</a>, give it a read and let me
know what you think!</p>
<hr/>
<p>Note: This is a subbed article, I may come back and write a bit about pair
programming in the future, but for now I&#x27;d recommend giving my <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2020/december/pair-code-reviews">post on Pair Code Reviews</a> a
read if you haven&#x27;t yet!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/pair-programming-stub.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Fast Feedback Systems]]></title>
            <link>https://matthamlin.me//2021/november/fast-feedback-systems</link>
            <guid>https://matthamlin.me//2021/november/fast-feedback-systems</guid>
            <pubDate>Sat, 20 Nov 2021 10:31:37 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2021/february/useConsole">written a bit about</a> developing within what I like to call &quot;fast feedback systems&quot;. The core value
proposition of these systems or tools is that I as an engineer should be able to
take a problem statement and begin to better understand it by fast feedback
loops of trial and error experimentation.</p>
<p>Usually these systems look a lot like sandboxes or <button data-state="closed" data-slot="tooltip-trigger"><abbr title="Read Evaluate Print Loops">REPL&#x27;s</abbr></button> not unlike CodeSandbox,
the built-in Node.js REPL, or even the browser dev tools! I heavily use these tools on a day to day basis, they allow me to take a complex
problem and better visualize it through code.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/fast-feedback-systems.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Video Games]]></title>
            <link>https://matthamlin.me//2021/november/video-games</link>
            <guid>https://matthamlin.me//2021/november/video-games</guid>
            <pubDate>Sat, 20 Nov 2021 09:47:51 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve been thinking a bit about video games as of late, for those that don&#x27;t know
I play a decent amount of video games, its practically the second largest time
sink of my day following work. I mostly play on Xbox (I was fortunate enough to
be able to get a Series X and a PS5 a year ago when they came out), but have a
Switch and a PC (as well as a recent Stadia subscription).</p>
<p>Lately I&#x27;ve been playing the two largest triple-A titles that usually come out
frequently, these</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/video-games.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Delete it]]></title>
            <link>https://matthamlin.me//2021/october/delete-it</link>
            <guid>https://matthamlin.me//2021/october/delete-it</guid>
            <pubDate>Sat, 16 Oct 2021 10:18:31 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve been collecting some blog posts over the past few weeks in an obsidian note
called Articles to Read, I looked at it today and realized its now over a 150
entries long, and I still haven&#x27;t read a single one of the posts.</p>
<p>Humans, or at least speaking for myself, like to hold on to things, save them
for later - but if you don&#x27;t have the energy to do something about it now, you
probably won&#x27;t in a week.</p>
<details class="border border-green-400 rounded-md p-4 bg-green-50 dark:bg-green-900/20"><summary class="font-bold cursor-pointer underline underline-offset-1 decoration-wavy decoration-2 decoration-green-400">TL;DR</summary><div class="py-4">Delete It</div></details>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/delete-it.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Linear Tools Enforce Linear Thinking]]></title>
            <link>https://matthamlin.me//2021/september/linear-tools</link>
            <guid>https://matthamlin.me//2021/september/linear-tools</guid>
            <pubDate>Sat, 04 Sep 2021 16:21:42 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve been working a lot within <a href="https://obsidian.md" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Obsidian</a> as of late, and
recently I&#x27;ve been hitting the limits of what feels like the fundamental design
limitation of a text based tool for thought.</p>
<p>Mainly, linear tools for note taking enforce linear thinking, and linear
thinking leads to blocking thinking.</p>
<p>Imagine if you computer could only ever do a single task at any moment in time,
so instead of playing music in the background and running a web browser and an
instant messaging application all at once, it could only run one of those
actively at once. You&#x27;d hate it!</p>
<p>Linear tools like writing notes (specifically via keyboard input) are
effectively doing the same thing to your brain. You&#x27;re forcing yourself to only
do one thing at a time. This can work well for many folks, helping them to avoid
distractions, however I&#x27;ve found that my brain tends to wander, I&#x27;ll jump from
one thing to another and keep 5-, 10-, 25- or more things all floating around in
my head at once.</p>
<p>Now, I could go and migrate over to a tool like Figma or some other visual
canvas-like editor, however I don&#x27;t necessarily think that this issue is a
either-or kind of problem. There will be times that I can really benefit from
the linear model, and other times where I can really benefit from the infinite
2D canvas of a visual editor.</p>
<p>I don&#x27;t know if I have a universal realization at the end of this rant of a blog
post, however I think of this more like a self realization that a <em>&quot;single
mode&quot;</em> type of tool for thought isn&#x27;t a tool that can allow me to fully delve
into.</p>
<marquee class="mt-4"></marquee>
<hr/>
<marquee class="mt-4"></marquee>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/linear-tools.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Mac Setup Guide]]></title>
            <link>https://matthamlin.me//2021/september/mac-setup-guide</link>
            <guid>https://matthamlin.me//2021/september/mac-setup-guide</guid>
            <pubDate>Sat, 04 Sep 2021 13:20:15 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently wiped my hard drives and freshly installed macOS Big Sur on my work
laptop, and found it incredibly refreshing in a smaller form of
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2021/august/start-fresh">starting fresh</a> with my daily tools.</p>
<p>I had been thinking about this a bit only a couple of weeks earlier so I was
already kind of prepared to set up my laptop from fresh but there were a few
things that I had forgotten about until I needed them. I figured it would be
useful to write up some of the things I did so I can revisit this post in the
future and remember the things that I like to use on my computer.</p>
<blockquote>
<p>Note: This post is still in progress!</p>
</blockquote>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="cli-tooling">CLI Tooling:</h2>
<p>I couldn&#x27;t think of a better title for this section but I consider this to
encapsulate my CLI tooling that I rely on for being relatively productive when
it comes to working within codebases.</p>
<p>First let&#x27;s cover some fundamentals:</p>
<ul>
<li>Install <a href="https://brew.sh/">Homebrew</a>
<ul>
<li>We&#x27;ll use this to install other tools below!</li>
</ul>
</li>
<li>Install <a href="https://ohmyz.sh/">Oh My ZSH</a></li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="configuring-my-environment">Configuring My Environment:</h3>
<p><strong>Configure Git:</strong></p>
<p><em>TODO: Move these to a dotfiles repo!</em></p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> config</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --global</span><span style="color:#B56959;--shiki-dark:#C98A7D"> user.name</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">&lt;name&gt;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> config</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --global</span><span style="color:#B56959;--shiki-dark:#C98A7D"> user.email</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">&lt;email&gt;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Make sure to install VSCode Insiders and add vscode to the PATH</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> config</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --global</span><span style="color:#B56959;--shiki-dark:#C98A7D"> core.editor</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">code-insiders --wait</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="cli-tooling-1">CLI Tooling:</h2>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># The basics: node, yarn, pnpm, fzf, jq</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">brew</span><span style="color:#B56959;--shiki-dark:#C98A7D"> install</span><span style="color:#B56959;--shiki-dark:#C98A7D"> node</span><span style="color:#B56959;--shiki-dark:#C98A7D"> yarn</span><span style="color:#B56959;--shiki-dark:#C98A7D"> pnpm</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fzf</span><span style="color:#B56959;--shiki-dark:#C98A7D"> jq</span><span style="color:#B56959;--shiki-dark:#C98A7D"> bat</span><span style="color:#B56959;--shiki-dark:#C98A7D"> exa</span><span style="color:#B56959;--shiki-dark:#C98A7D"> gh</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fig</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fnm</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="gui-tooling">GUI Tooling:</h2>
<p>These are all the &quot;visual&quot; tools that I tend to use on my mac, this software
list may change over time but these are the essentials that I use today.</p>
<ul>
<li>Install <a href="https://mimestream.com/">Mimestream</a></li>
<li>Install <a href="https://code.visualstudio.com/insiders/">VSCode
Insiders</a>
<ul>
<li>Make sure to setup sync and enable the CLI tools so we can use
<code>code-insiders</code> to open vscode from the terminal</li>
</ul>
</li>
<li>Install <a href="https://www.raycast.com/">Raycast</a>
<ul>
<li>Additionally, go into System Preferences &gt; Keyboard &gt; Shortcuts and disable
the <code>Cmd + Space</code> keyboard setting for spotlight and set that to the Raycast
keyboard shortcut.</li>
</ul>
</li>
<li>Install <a href="https://rectangleapp.com/">Rectangle</a>
<ul>
<li>Choose the Spectacle keybinds if you don&#x27;t want to be confused üòÜ</li>
</ul>
</li>
<li>Install
<a href="https://www.dropbox.com/capture">Dropbox</a></li>
<li>Install <a href="https://thebrowser.company/">Arc</a></li>
<li>Install <a href="https://www.notion.so/desktop">Notion</a></li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/mac-setup-guide.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Build Your Developer Toolbox]]></title>
            <link>https://matthamlin.me//2021/august/build-your-developer-toolbox</link>
            <guid>https://matthamlin.me//2021/august/build-your-developer-toolbox</guid>
            <pubDate>Fri, 27 Aug 2021 18:27:23 GMT</pubDate>
            <content:encoded><![CDATA[<p>One of the common differentiators I see between a senior engineer and a junior
engineer is the depth and bredth of their <em>developer toolbox</em>. Generally when I
think of a developer toolbox, I think of a collection of patterns that a
developer may apply to solve a problem.</p>
<p>Frequently I find that the tools in my own developer toolbox tend to be honed
and refined by debugging, but often I can encounter new patterns while exploring
a new topic or a new problem space, additionally reviewing my teammates pull
requests has been an incredible opportunity to add things to my own developer
toolbox.</p>
<p>The actual tools within a developer toolbox usually vary from person to person
and could be entirely different from the rest of the tools as well, and while
you may never work on the same exact thing a second time, these patterns can
still be applied to new situations.</p>
<p>What things are you doing to build your developer toolbox?</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/build-your-developer-toolbox.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Start Fresh]]></title>
            <link>https://matthamlin.me//2021/august/start-fresh</link>
            <guid>https://matthamlin.me//2021/august/start-fresh</guid>
            <pubDate>Fri, 27 Aug 2021 17:43:25 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently started on a new team at work, transitioning from my previous role on
our design systems team at Wayfair over to the Storefront Frontend Platform
team. I&#x27;m super amped to be joining the team to work on some ambitious projects
for the coming years. I mostly attribute that energy coming from two sources:</p>
<ol>
<li>Working on something new</li>
<li>Working with new people</li>
</ol>
<p>It dawned on me, that through this team change I&#x27;ve been able to redefine who I
am at work, it&#x27;s almost like I got the ability to hit the refresh button and
start fresh again.</p>
<p>I think it&#x27;s incredibly valuable to start fresh every once and a while, it can
become stale doing the same thing over and over again, but starting fresh let&#x27;s
you reevaluate the person you want to be.</p>
<p>So go ahead and start fresh again, mix it up a bit and see what comes of it!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/start-fresh.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On Written Communication]]></title>
            <link>https://matthamlin.me//2021/august/on-written-communication</link>
            <guid>https://matthamlin.me//2021/august/on-written-communication</guid>
            <pubDate>Tue, 24 Aug 2021 19:10:11 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve been noodling on this topic for a while, and I realized as I was walking
home earlier today that it clicked for me.</p>
<p>One of the things that I&#x27;ve been finding myself really missing as of late at
work is a platform for communication that encourages longer form written
content. Slack, our defacto default communication tool, has simultaneously been
one of the best things and the worst things for team communication and
collaboration. It&#x27;s difficult for me to accurately describe my mixed emotions
about it in writing<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>I think I&#x27;ve partially started to really feel this since I&#x27;ve been diving deep
into tools for thought like Obsidian and Roam, which have really encouraged me
to think by writing. I&#x27;ve found it incredibly freeing to brain dump my thoughts
on a topic, and it has helped me make connections that I might have otherwise
lost to random thoughts before getting distracted by something else.</p>
<p>However, I don&#x27;t really have an equivalent for communication, or more
specifically I feel like I&#x27;m missing the Obsidian vault that I could use to
<del>collaborate with</del> <em>think with</em> teammates<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->2</span></button></span><sup id="fn-2" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-2" class="text-primary hover:underline focus:underline">[<!-- -->2<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>. While
internally at work we do have tools like Google Docs, Confluence, etc, none of
these tools seemed to have really stuck, and they either lean too heavily into
one side of the spectrum between collaboration or permanence.</p>
<p>I don&#x27;t know if I necessarily have a point or takeaway with this blog post,
however I do think there is value in defaulting to longer form communication. It
does have trade offs, usually in both more investment for writing and reading,
however it can also shorten an otherwise lengthy discussion of back and forth
slack messages into a single concise read.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I do however really enjoy being able to create and use emoji
that are entirely custom!</p>
<p id="fnref-2" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-2" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I&#x27;d be really curious to test this out at some point, or even
to hear from folks that have tried a similar setup to see how it&#x27;s worked or not
worked!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/on-written-communication.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Updating Forked Repos]]></title>
            <link>https://matthamlin.me//2021/august/updating-forked-repos</link>
            <guid>https://matthamlin.me//2021/august/updating-forked-repos</guid>
            <pubDate>Sun, 22 Aug 2021 15:01:13 GMT</pubDate>
            <content:encoded><![CDATA[<p>I find myself reaching for forked repos more often than direct clones these
days, however I always inevitably need to find a way to update my fork based on
the original repo. I usually google the answer and find a helpful stack overflow
that has the code that I need.</p>
<p>I figured I&#x27;d re-share that here both as a personal reference to the snippet of
code and if others want to find it as well.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># First add the original repo as a remote locally</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># here we call that one `upstream`</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> remote</span><span style="color:#B56959;--shiki-dark:#C98A7D"> add</span><span style="color:#B56959;--shiki-dark:#C98A7D"> upstream</span><span style="color:#AB5959;--shiki-dark:#CB7676"> &lt;</span><span style="color:#B56959;--shiki-dark:#C98A7D">link-to-original-rep</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">o</span><span style="color:#AB5959;--shiki-dark:#CB7676">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Fetch that upstream repo to ensure we have the latest references</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> fetch</span><span style="color:#B56959;--shiki-dark:#C98A7D"> upstream</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Checkout the main branch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> checkout</span><span style="color:#B56959;--shiki-dark:#C98A7D"> main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Apply the commits from upstream main to the local main branch</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> rebase</span><span style="color:#B56959;--shiki-dark:#C98A7D"> upstream/main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD"># Finally push this back up to the forked remote</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">git</span><span style="color:#B56959;--shiki-dark:#C98A7D"> push</span><span style="color:#B56959;--shiki-dark:#C98A7D"> origin</span><span style="color:#B56959;--shiki-dark:#C98A7D"> main</span></span></code></pre>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/updating-forked-repos.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[React Testing Library: Checkboxes and events]]></title>
            <link>https://matthamlin.me//2021/august/rtl-checkbox-events</link>
            <guid>https://matthamlin.me//2021/august/rtl-checkbox-events</guid>
            <pubDate>Tue, 10 Aug 2021 17:14:20 GMT</pubDate>
            <content:encoded><![CDATA[<details class="border border-green-400 rounded-md p-4 bg-green-50 dark:bg-green-900/20"><summary class="font-bold cursor-pointer underline underline-offset-1 decoration-wavy decoration-2 decoration-green-400">TL;DR</summary><div class="py-4"><p>If you&#x27;re testing a checkbox input element with React Testing Library, you&#x27;ll
want to fire a <code>click</code> event on the checkbox <em>not</em> a <code>change</code> event!</p><p>Read on to find out how I discovered this!</p></div></details>
<p>I was recently refactoring about 70 individual Enzyme-based unit tests across
our design system codebase at work to swap it for
<a href="https://testing-library.com/docs/react-testing-library/intro/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">React Testing Library</a>,
and encountered an odd quirk that I figured I&#x27;d document on my blog.</p>
<p>I was converting some tests for one of our Checkbox Table components, a
component that allows users to select individual rows or the entire page of
results shown within a table. The previous tests were quite extensive, the
entire file was well over 1200 lines of code covering many different and
difficult edge cases.</p>
<p>As I went through I converted one of the tests that was asserting on an
<code>onChange</code> handler being properly called when one of the checkboxes was
selected, the previous test code looked something like:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> handleChange</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> jest</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">fn</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> wrapper</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> mount</span><span style="color:#999999;--shiki-dark:#666666">(&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">CheckboxTable</span><span style="color:#B07D48;--shiki-dark:#BD976A"> onChange</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">handleChange</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">wrapper</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  .</span><span style="color:#59873A;--shiki-dark:#80A665">find</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">[data-enzyme-id=&quot;header-checkbox&quot;]</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  .</span><span style="color:#59873A;--shiki-dark:#80A665">simulate</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">change</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#998418;--shiki-dark:#B8A965"> target</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#998418;--shiki-dark:#B8A965"> checked</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#999999;--shiki-dark:#666666"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">expect</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">handleChange</span><span style="color:#999999;--shiki-dark:#666666">).</span><span style="color:#59873A;--shiki-dark:#80A665">toHaveBeenCalledTimes</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p>So I started converting as I had other tests within the codebase:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> handleChange</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> jest</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">fn</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">render</span><span style="color:#999999;--shiki-dark:#666666">(&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">CheckboxTable</span><span style="color:#B07D48;--shiki-dark:#BD976A"> onChange</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">handleChange</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">fireEvent</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">change</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">screen</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">getByTestId</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">header-checkbox</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">),</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  target</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#998418;--shiki-dark:#B8A965"> checked</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">expect</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">handleChange</span><span style="color:#999999;--shiki-dark:#666666">).</span><span style="color:#59873A;--shiki-dark:#80A665">toHaveBeenCalledTimes</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p>However, the test started failing!</p>
<p>I started scratching my head after debugging this for about 30 minutes without
making much traction on the failing test, in fact I was about to comment the
test out and return to it in a follow up ticket but then I did one last google
search and stumbled upon
<a href="https://stackoverflow.com/questions/63006476/fireevent-change-does-not-toggle-checkbox" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this stackoverflow result</a>,
linked from there was this issue comment noting that for checkbox elements, we
actually want to fire a <code>click</code> event instead of a <code>change</code> event!</p>
<p>So I went back to my test and updated it one last time to the following:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> handleChange</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> jest</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">fn</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">render</span><span style="color:#999999;--shiki-dark:#666666">(&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">CheckboxTable</span><span style="color:#B07D48;--shiki-dark:#BD976A"> onChange</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">handleChange</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">fireEvent</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">click</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">screen</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">getByTestId</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">header-checkbox</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">expect</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">handleChange</span><span style="color:#999999;--shiki-dark:#666666">).</span><span style="color:#59873A;--shiki-dark:#80A665">toHaveBeenCalledTimes</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p>and the test started passing!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/rtl-checkbox-events.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Roll your own Obsidian sync]]></title>
            <link>https://matthamlin.me//2021/august/obsidian-sync</link>
            <guid>https://matthamlin.me//2021/august/obsidian-sync</guid>
            <pubDate>Tue, 10 Aug 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently shifted off of a few other note taking applications to
<a href="https://obsidian.md" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Obsidian</a> after they announced the new mobile
applications. I had been looking for a solid editing experience available both
on a laptop as well as on my phone and Obsidian has seemed to be like the right
tool for the job so far!</p>
<p>However, I wanted to keep all my notes in sync across my devices, Obsidian does
offer a paid service to synchronize your notes across platforms but I figure I&#x27;d
look into rolling my own since that was one of the recommendations in their
documentation.</p>
<p>I figured <a href="https://www.dropbox.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Dropbox</a> would be the ideal platform to
synchronize my notes since I&#x27;m already paying for a decent amount of storage
there. I started looking into it and I couldn&#x27;t find a reliable way for both the
Dropbox android application and the Obsidian android application to reference
the same vault directory, until I found
<a href="https://play.google.com/store/apps/details?id=com.ttxapps.dropsync" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Dropsync / Autosync for Dropbox</a>.
This app let&#x27;s you choose a folder on your device to sync with Dropbox and it
continues to watch for changes and sync them automatically!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="setup">Setup</h3>
<p>So, let&#x27;s dive in to walk through how you can setup a similar syncing!</p>
<p>First things first, you&#x27;ll want to install the Dropsync app linked above and
connect it with your Dropbox account.</p>
<p>Then you&#x27;ll want to setup a sync folder pair, what this step does as I
understand it is create a new folder on your device and also uploads it to
Dropbox. When setting this up you&#x27;ll need to ensure that it also syncs hidden
folders, since the <code>.obsidian</code> directory within a vault is synchronized across
your devices.</p>
<p>Next you&#x27;ll want to create a vault if you haven&#x27;t already, once created (or if
you have an existing vault that you want to sync), you&#x27;ll want to move it on the
computer it is on into the synced folder that Dropsync has just setup.</p>
<p>Once you&#x27;ve moved the vault into the synced folder, it should be uploaded to
Dropbox and you can test it out by editing a file in Obsidian on one device and
checking another device to ensure your edits show up!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="bonus">Bonus</h3>
<p>I also happen to use a Pixel Slate tablet here and there when I&#x27;m away from my
laptop but want a slightly better writing experience. I was able to follow this
exact same setup there (since you can install android applications on chrome
os), and now I&#x27;m able to sync content across my phone, my tablet, and my
laptops!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/obsidian-sync.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The Squeeze]]></title>
            <link>https://matthamlin.me//2021/june/the-squeeze</link>
            <guid>https://matthamlin.me//2021/june/the-squeeze</guid>
            <pubDate>Mon, 28 Jun 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I don&#x27;t know if I&#x27;ll ever publish this blog post, but I figure I should write it
to at least put it down somewhere thats not in my brain. Note this is now a stub
as I have moved the contents to my internal Obsidian vault.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/the-squeeze.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Learning]]></title>
            <link>https://matthamlin.me//2021/june/learning</link>
            <guid>https://matthamlin.me//2021/june/learning</guid>
            <pubDate>Sun, 13 Jun 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Recently I&#x27;ve been thinking a bit about the process of learning. I&#x27;ve been
digging into some new things at work and through that I&#x27;ve been noticing that I
haven&#x27;t really been learning those new technologies.</p>
<p>This could only apply to myself, however I don&#x27;t think people actually learn new
things, at least not after a certain age. I do think people can get really good
at pattern matching however.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/learning.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[On Code Review]]></title>
            <link>https://matthamlin.me//2021/march/on-code-review</link>
            <guid>https://matthamlin.me//2021/march/on-code-review</guid>
            <pubDate>Mon, 15 Mar 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve written a decent amount about code review practices, particularly about
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2020/march/draft-pull-requests">Draft Pull Requests</a> and
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2020/december/pair-code-reviews">Pair Code Reviews</a>, however I haven&#x27;t really
talked about how <em>I</em> approach reviewing pull requests.</p>
<p>While I don&#x27;t think I have a particularly interesting process for reviewing pull
requests, I do think that documenting it can provide additional insight for
myself when I open another pull request. I also would like to see how others
approach reviewing code and to see where we might differ in process!</p>
<p>Before diving in, I&#x27;ll note that essentially all of the code reviews I do these
days happen on GitHub, either on GitHub.com or our internal enterprise GitHub
instance, so some of the things I refer to may only apply for GitHub and may not
map cleanly over to other git hosting services or code review platforms.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="process">Process:</h2>
<p>To start, I usually give a read through of the Discussions tab of the PR, this
is the default tab that includes the PR description, and a feed of activity on
the PR (including other comments, commits, and CI status messages).</p>
<p>At this stage, I may have some understanding of the change before even reading
through the PR description, either based on the title of the PR, or if a team
member shared the PR with me they may have provided some additional context.</p>
<p>I&#x27;ll read through the PR description that the author added, noting any
interesting assumptions, questions, or callouts that the author added
<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>From there, I ask myself:</p>
<blockquote>
<p>Do I have enough information to dive into the rest of the PR?</p>
</blockquote>
<p>If the answer to this question is no, I pause reviewing the PR and instead reach
out to the author (either on the PR itself or over slack) to have them share a
bit more context about the changeset.</p>
<p>While I often review PRs that I don&#x27;t have complete context over, I generally
prefer to have at least a cursory understanding of the context around the
changeset as it can help me connect some dots between this PR and the various
other work that the team is working on at the moment.</p>
<p>Assuming I have enough context to continue on with the PR, I&#x27;ll continue down
the Discussions tab and review any other PR feedback that has already been added
either by the author or another code reviewer.</p>
<p>Catching up on any other active or resolved discussions can be helpful to avoid
providing duplicate feedback for the author, and helps to understand other
decisions that the author and other code reviewers have made about the changeset
<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->2</span></button></span><sup id="fn-2" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-2" class="text-primary hover:underline focus:underline">[<!-- -->2<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>Finally, after reviewing through the Discussions tab, I&#x27;m ready to dive into the
code changes. Here I&#x27;m usually looking for a few things:</p>
<ul>
<li>Are there any assumptions being made within the code changes that haven&#x27;t been
called out in the PR description or the original ticket?</li>
<li>Similar to assumptions above, are there possible edge cases that the author
might have accounted for?</li>
<li>Will I feel confident contributing to this code in ~6 months as-is,
essentially, how easily will it be for other contributors to dive in and make
a change?</li>
</ul>
<p>I don&#x27;t use an explicit checklist for the above bullet points, and frequently
I&#x27;ll have other things in mind when reviewing a change that are specific to the
code being changed.</p>
<p>I usually categorize most of my &quot;nitpick&quot;<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->3</span></button></span><sup id="fn-3" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-3" class="text-primary hover:underline focus:underline">[<!-- -->3<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup> feedback under
the third bullet point above, usually trying to frame the feedback as optional
and also up for discussion.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="delivery">Delivery:</h2>
<p>Far more important than the process that I follow for code reviews is the
delivery of the feedback on the PR.</p>
<p>While providing direct feedback might work sometimes, it usually leads to making
the code review process feel hostile and a battle between the author and the
code reviewer.</p>
<p>For the first few years at my current job I remember some of the most critical
feedback I received during my performance reviews from my peers and managers was
around my code review etiquette.</p>
<p>I was super critical, straight to the point, and also frequently delivering my
feedback in a way that made it seem like it should be done my way or not be done
at all. It took me a while to get around some of this, and I honestly still have
a huge opportunity to improve how I deliver feedback on PRs.</p>
<p>Since then, I think I&#x27;ve gotten a bit better at delivering my feedback in a more
friendly way, one of the crucial aspects that helped me improve here was
reconsidering what code review is for. In the past, I had usually approached
code reviews with a very high bar for what we should consider merging into the
codebase, frequently applying my own personal preferences and flavors on top of
our existing styleguides.</p>
<p>More recently, I&#x27;ve tried to take a more broad view of the changes, devaluaing
my own internal preferences in favor of thinking about the code as belonging to
everyone (both current contributors and future contributors).</p>
<p>These days, I try my best to both call out opinions as clearly as possible, and
also phrase most feedback in the form of a question. I&#x27;ve seen both of these
help to clear up the review for the author, and also approaches from a
standpoint of the changeset being an opportunity for learning and discussion
rather than an opportunity to meet some absurdly high bar for standards.</p>
<p>These frequently look like:</p>
<blockquote>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="discussion---non-blocking">Discussion - non-blocking:</h3>
<p>What are your thoughts on changing the approach here to use <code>reduce</code> instead
of <code>map</code> and <code>filter</code>?</p>
</blockquote>
<p>These signals help the author to more clearly understand if the feedback should
be fixed before merging or can be dropped, which usually speeds up the time
between review iterations and merging as well.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="wrapping-up">Wrapping Up</h2>
<p>I didn&#x27;t cover other topics in this post such as running the changed code
locally / in a preview environment, or
<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2020/december/pair-code-reviews">Pair Reviewing</a> so I&#x27;ll leave those topics to
further blog posts.</p>
<p>I&#x27;d love to hear how you approach code reviews, both from a process standpoint
and from the delivery perspective! Feel free to reach out on Twitter to share
your perspective, or write a blog post about it!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I don&#x27;t usually literally note these in my go-to note taking tool, but usually only take a mental note of these.</p>
<p id="fnref-2" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-2" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I don&#x27;t usually review PRs that another team member is actively reviewing unless I&#x27;m interested in seeing the changes or either the author or other reviewers asked for more feedback/insight into the changesets. Part of the reason for avoiding doubling up on a PR is that I have full confidence in all the members of my team (and the other teams I frequently work with) to review any change being made to the codebase.</p>
<p id="fnref-3" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-3" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->A small, usually insignificant suggested change to make the code more readable</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/on-code-review.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Array Chunking]]></title>
            <link>https://matthamlin.me//2021/march/array-chunking</link>
            <guid>https://matthamlin.me//2021/march/array-chunking</guid>
            <pubDate>Sun, 07 Mar 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>On several of my side projects, this blog included, I&#x27;ve had to reach for some
kind of array chunking code, something that would take a flat array of items and
bunch together the items based on some logic frequently based on the number of
items I want in each chunk.</p>
<p>While I could probably reach for some <code>_.chunk</code> method, I&#x27;ve always opted to
instead write the function locally since it&#x27;s all of about 10 or 15 lines.</p>
<p>Since I keep on needing this utility, I figured it would be a good exercise to
write one and also write about writing one on my blog!</p>
<p>So, without further ado, let&#x27;s dig in!</p>
<p>Let&#x27;s start with the problem we&#x27;re trying to solve, we want to take an array of
elements, and would like to return an array of arrays of those items.</p>
<p>Now, we could try and make this super generic to start, but for simplicity sake
let&#x27;s start by trying to create an array chunking function that chunks the array
into groups of the same length.</p>
<p>So we have two arguments for our function: <code>array</code> and <code>length</code>, the first is
the input array of elements, and the second is the desired chunk length.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> chunk</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">array</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> length</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {}</span></span></code></pre>
<p>Great, let&#x27;s dive into the implementation, I think I&#x27;ll want to reach for
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">reduce</a>
for the implementation to manage the chunking for us, so let&#x27;s get that started
in our function:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> chunk</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">array</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> length</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> array</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">reduce</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">chunked</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> item</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // @TODO</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> []);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>With the above code, we&#x27;re returning the result of the reduce call, and we&#x27;re
defaulting the value to an empty array.</p>
<p>Great, now lets get into the really difficult stuff!</p>
<p>To start, the algorithm that we&#x27;re going to follow will probably look something
like:</p>
<ul>
<li>Grab the last element of the <code>chunked</code> array<!-- -->
<ul>
<li>This should be an array, or undefined for the first iteration</li>
<li>If the last item is undefined, create a new array with the current <code>item</code>
and append it onto <code>chunked</code></li>
</ul>
</li>
<li>Check the length of this array<!-- -->
<ul>
<li>If the length is equal to the provided <code>length</code> param<!-- -->
<ul>
<li>Create a new array with the current <code>item</code> and append it onto <code>chunked</code></li>
</ul>
</li>
<li>Else, insert the current item into the last element of the <code>chunked</code> array</li>
</ul>
</li>
</ul>
<p>Alright, let&#x27;s start with the above steps and see what happens...</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> chunk</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">array</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> length</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> array</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">reduce</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">chunked</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> item</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // grab the last element, note that we&#x27;re using `.reverse` and rest/spread</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // here to easily grab it and the rest of the chunked array</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">lastElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">rest</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> chunked</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">reverse</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // If the last element is undefined, then return a new array with the current item</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">typeof</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lastElement</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">undefined</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> [...</span><span style="color:#B07D48;--shiki-dark:#BD976A">rest</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">item</span><span style="color:#999999;--shiki-dark:#666666">]];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // If the last element&#x27;s length is less than our desired length</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // then append the item to the last element</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">lastElement</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">length</span><span style="color:#999999;--shiki-dark:#666666"> &lt;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> length</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> [...</span><span style="color:#B07D48;--shiki-dark:#BD976A">rest</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> [...</span><span style="color:#B07D48;--shiki-dark:#BD976A">lastElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> item</span><span style="color:#999999;--shiki-dark:#666666">]];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // finally, return a new array with the current item, since the lastElement&#x27;s length</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // is our desired `length`</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#999999;--shiki-dark:#666666"> [...</span><span style="color:#B07D48;--shiki-dark:#BD976A">rest</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lastElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">item</span><span style="color:#999999;--shiki-dark:#666666">]];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> []);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>So there is our solution, let&#x27;s see how it works! Feel free to copy the below
code samples and paste them into devtools or a node repl to test for yourself!</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> chunk</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">array</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> length</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> array</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">reduce</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">chunked</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> item</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">lastElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">rest</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> chunked</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">reverse</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">typeof</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lastElement</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ===</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">undefined</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> [...</span><span style="color:#B07D48;--shiki-dark:#BD976A">rest</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">item</span><span style="color:#999999;--shiki-dark:#666666">]];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">lastElement</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">length</span><span style="color:#999999;--shiki-dark:#666666"> &lt;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> length</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> [...</span><span style="color:#B07D48;--shiki-dark:#BD976A">rest</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> [...</span><span style="color:#B07D48;--shiki-dark:#BD976A">lastElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> item</span><span style="color:#999999;--shiki-dark:#666666">]];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#999999;--shiki-dark:#666666"> [...</span><span style="color:#B07D48;--shiki-dark:#BD976A">rest</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> lastElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">item</span><span style="color:#999999;--shiki-dark:#666666">]];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> []);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> arr</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 2</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 4</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 5</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 6</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 7</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 8</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 9</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 11</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 22</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 33</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 44</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 55</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 66</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 77</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 88</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 99</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">chunk</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">arr</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 3</span><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/array-chunking.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Fast]]></title>
            <link>https://matthamlin.me//2021/march/fast</link>
            <guid>https://matthamlin.me//2021/march/fast</guid>
            <pubDate>Mon, 01 Mar 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="outline">Outline</h2>
<ul>
<li>My role: Build efficiency for the teams I work with</li>
<li>As developers, we should optimize for the most efficient and fastest feedback
cycles</li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/fast.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Writing Node Scripts]]></title>
            <link>https://matthamlin.me//2021/march/writing-node-scripts</link>
            <guid>https://matthamlin.me//2021/march/writing-node-scripts</guid>
            <pubDate>Mon, 01 Mar 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>When I find myself repeatedly making edits to a large number of files, or if I
need to collect some metadata about a collection of files I tend to reach for a
quick and dirty Node script.</p>
<p>Usually I can get by with a <code>script.js</code> file written somewhere and then run it
via <code>node script.js</code>, however sometimes I want to turn a script into a small
node package that I can install and reference elsewhere.</p>
<p>To accomplish that I usually reach for adding a <code>package.json</code> with a <code>bin</code>
script entry pointing to the node script.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">{</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">name</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">my-cool-package</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">version</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">1.0.0</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">  &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">bin</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#99841877;--shiki-dark:#B8A96577">    &quot;</span><span style="color:#998418;--shiki-dark:#B8A965">name</span><span style="color:#99841877;--shiki-dark:#B8A96577">&quot;</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./index.js</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>However, before the traditional node script can be run via <code>name</code>, we need to do
two other things to the <code>index.js</code> file that the bin command is referencing.</p>
<p>First we need to add a line at the top of the file:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">#!/usr/bin/env node</span></span></code></pre>
<p>In addition to adding that line to the top of the file, we also need to change
the mode of the file, we can do that via:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">chmod</span><span style="color:#B56959;--shiki-dark:#C98A7D"> u+x</span><span style="color:#B56959;--shiki-dark:#C98A7D"> index.js</span></span></code></pre>
<p>For more information, this article on node shell scripting is a great one to
reference: <a href="https://2ality.com/2011/12/nodejs-shell-scripting.html" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://2ality.com/2011/12/nodejs-shell-scripting.html</a></p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/writing-node-scripts.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[useConsole]]></title>
            <link>https://matthamlin.me//2021/february/useConsole</link>
            <guid>https://matthamlin.me//2021/february/useConsole</guid>
            <pubDate>Sun, 14 Feb 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>A decent part of my day-to-day work is iterating on solving UI &quot;problems&quot; by
using <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2021/november/fast-feedback-systems">fast feedback systems</a>, such as web sandboxes / REPLs like
<a href="https://codesandbox.io" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">CodeSandbox</a>. As I iterate on these UI challenges, I
tend to want to both look at the UI and also see a feed of the Console from
devtools without the rest of the devtools panel taking up space on the screen.</p>
<p>To solve this use case I threw together a quick and dirty <code>useConsole</code> hook that
can capture the output of <code>console.log</code> calls and then pipe that into some
element that can be rendered on top of the UI.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> useConsole</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">content</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setContent</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useLayoutEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> originalConsole</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> console</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">log</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    console</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">log</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> (...</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">      setContent</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">content</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        return</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span><span style="color:#B56959;--shiki-dark:#C98A7D">&gt; </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">message</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">join</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}${</span><span style="color:#B56959;--shiki-dark:#C98A7D">content </span><span style="color:#AB5959;--shiki-dark:#CB7676">?</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span><span style="color:#A65E2B;--shiki-dark:#C99076">\n</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">content</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#AB5959;--shiki-dark:#CB7676"> :</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;&#x27;</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      });</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">      originalConsole</span><span style="color:#999999;--shiki-dark:#666666">(...</span><span style="color:#B07D48;--shiki-dark:#BD976A">message</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> []);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> content</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="usage">Usage:</h3>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> Root</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> content</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useConsole</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Box</span><span style="color:#B07D48;--shiki-dark:#BD976A"> is</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">pre</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> position</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">absolute</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> top</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#2F798A;--shiki-dark:#4C9A91">4</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B07D48;--shiki-dark:#BD976A"> right</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#2F798A;--shiki-dark:#4C9A91">4</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B07D48;--shiki-dark:#BD976A"> width</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#2F798A;--shiki-dark:#4C9A91">300</span><span style="color:#999999;--shiki-dark:#666666">}&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        {</span><span style="color:#B07D48;--shiki-dark:#BD976A">content</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">Box</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">App</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="notes">Notes:</h3>
<p>This hook only overrides <code>console.log</code>, if you want to catch other console
methods than you&#x27;ll want to modify the <code>useEffect</code> body.</p>
<p>Additionally, this should be run as early as possible in the render of the
component to catch all calls to <code>console.log</code></p>
<blockquote>
<p>‚ö†Ô∏è Be careful using this hook and calling <code>console.log</code> from within render, as
it will cause an infinite render loop!</p>
</blockquote>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/useConsole.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[yw]]></title>
            <link>https://matthamlin.me//2021/february/yw</link>
            <guid>https://matthamlin.me//2021/february/yw</guid>
            <pubDate>Mon, 08 Feb 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="update">Update!</h4>
<p>Note: This script is only compatible with yarn classic (e.g. v1), I have since
published an updated version that works with yarn berry (v2 and v3 releases) in
my <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2023/january/navigating-monorepos-with-ease">Navigating Monorepos with Ease</a>
blog post!</p>
<hr/>
<p>Almost a year or more ago I stumbled across this super useful bash function that
makes it incredibly easy to run scripts across a <a href="https://yarnpkg.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Yarn</a>-based monorepo. Since then I haven&#x27;t looked back,
and have been slowly converting the rest of my team to adopt the same function
in their local workflows as well!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="script">Script:</h2>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">yw</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  yarn</span><span style="color:#B56959;--shiki-dark:#C98A7D"> workspace</span><span style="color:#999999;--shiki-dark:#666666"> $(</span><span style="color:#59873A;--shiki-dark:#80A665">yarn</span><span style="color:#A65E2B;--shiki-dark:#C99076"> --json</span><span style="color:#B56959;--shiki-dark:#C98A7D"> workspaces</span><span style="color:#B56959;--shiki-dark:#C98A7D"> info</span><span style="color:#AB5959;--shiki-dark:#CB7676"> |</span><span style="color:#59873A;--shiki-dark:#80A665"> jq</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">.data</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -r</span><span style="color:#AB5959;--shiki-dark:#CB7676"> |</span><span style="color:#59873A;--shiki-dark:#80A665"> jq</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">[keys][0] []</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#A65E2B;--shiki-dark:#C99076"> -r</span><span style="color:#AB5959;--shiki-dark:#CB7676"> |</span><span style="color:#59873A;--shiki-dark:#80A665"> fzf</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#B07D48;--shiki-dark:#BD976A"> $@</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="requirements">Requirements:</h2>
<ul>
<li><code>jq</code></li>
<li><code>fzf</code></li>
</ul>
<p>Both should be installable via <code>homebrew</code>: <code>brew install fzf jq</code></p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="installation">Installation:</h2>
<p>Copy the above script and dump it into your <code>.bashrc</code> or <code>.zshrc</code>, or whatever
other config script your shell uses!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/yw.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Hack Sprint]]></title>
            <link>https://matthamlin.me//2021/january/hack-sprint</link>
            <guid>https://matthamlin.me//2021/january/hack-sprint</guid>
            <pubDate>Tue, 19 Jan 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve started to notice that I&#x27;ve spent a very large amount of my free time on my
Xbox as of late, either grinding out gun camos in Call of Duty, or playing in
the futuristic Night City of Cyberpunk. While I enjoy playing video games, a
recently highlighted <a target="_blank" rel="noopener noreferrer" href="https://twitter.com/Naval" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-4 h-4 inline-block mr-1" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>@<!-- -->Naval</a> tweet brought up
this piece of sage advice:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote>Reading is faster than listening. Doing is
faster than watching. ‚Äî Naval (@naval)
<a href="https://twitter.com/naval/status/1002107992018333696?ref_src=twsrc%5Etfw">May
31, 2018</a></blockquote></div>
<p>So in the spirit of both that tweet and
<a href="https://a16z.com/2020/04/18/its-time-to-build/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Marc Andressen&#x27;s advice</a>, I&#x27;m
going to take two weeks of no Xbox game time to hack on a product idea from
start to finish.</p>
<p>I&#x27;ll hopefully check-in via a few blog posts throughout the sprint, and
hopefully by the end of the time I&#x27;ll have a product that I can feel satisfied
about.</p>
<p><em>Aside: I won&#x27;t be cutting out video games completely, unfortunately Animal
Crossing has become a bit of a habit as of late, but I feel like it won&#x27;t eat up
too much of my free time since it&#x27;s a fairly basic video game to play.</em></p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/hack-sprint.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Simple Props]]></title>
            <link>https://matthamlin.me//2021/january/simple-props</link>
            <guid>https://matthamlin.me//2021/january/simple-props</guid>
            <pubDate>Mon, 18 Jan 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><strong>Edit: Updated on January 19th, 2021</strong></p>
<p>A few recent experiments that I&#x27;ve been thinking on have all been around
exploring CSS variables or custom properties, from those explorations I just
published a new package called
<a href="https://github.com/ds-pack/simple-props" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>simple-props</code></a>.</p>
<p>This package is heavily inspired by <a target="_blank" rel="noopener noreferrer" href="https://twitter.com/roginfarrer" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-4 h-4 inline-block mr-1" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>@<!-- -->roginfarrer</a>&#x27;s <a href="https://github.com/roginfarrer/system-props" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">system-props</a> package (both in
function and implementation), but instead of deriving a value from a theme
object it derives CSS variables representing the value provided.</p>
<p>Let&#x27;s see this in action, first with a pretty minimal setup:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> createSimpleProps</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">simple-props</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> simpleProps</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> createSimpleProps</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  props</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    bg</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      scale</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      property</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">backgroundColor</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span></code></pre>
<p>In the above snippet, we&#x27;ve configured <code>simpleProps</code> to handle processing of
both a <code>color</code> prop and a <code>bg</code> prop, for example:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> Box</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> styles</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> simpleProps</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#B07D48;--shiki-dark:#BD976A"> style</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">styles</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> {...</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">render</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Box</span><span style="color:#B07D48;--shiki-dark:#BD976A"> color</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$primary</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> bg</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$background</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">    Hello World!</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">Box</span><span style="color:#999999;--shiki-dark:#666666">&gt;,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">)</span></span></code></pre>
<p>The <code>color</code> and <code>bg</code> props in the above example may generate styles that look
like:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  style</span><span style="color:#999999;--shiki-dark:#666666">={{</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">var(--color-primary)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    backgroundColor</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">var(--color-background)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">/&gt;</span></span></code></pre>
<blockquote>
<p>Note: The <code>simple-props</code> library doesn&#x27;t manage creating or defining the above
CSS variables being used, that part is left up to the implementer</p>
</blockquote>
<p>Color and background-color are both fairly basic style props that you could
support, but you could support any prop at all through the config.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="responsive-styles">Responsive Styles</h3>
<p>In addition to basic props, you can also support styles that change at different
breakpoints too! To do this you need to pass in a <code>breakpoints</code> array to the
<code>createSimpleProps</code> function:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> createSimpleProps</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">simple-props</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> simpleProps</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> createSimpleProps</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  props</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    bg</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      scale</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      property</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">backgroundColor</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span></code></pre>
<p>This config will now allow the style props to accept an object mapping a
breakpoint to a particular style value:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> style</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> simpleProps</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    _</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$primary</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#2F798A;--shiki-dark:#4C9A91">    200</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$secondary</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span></code></pre>
<p>The <code>_</code> key is a special reserved key that indicates the value at all
breakpoints, from there the rest of the key-value pairs represent a breakpoint
and the value at that breakpoint!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="pseudo-selectors">Pseudo Selectors</h3>
<p>One additional feature that I stole from
<a href="https://github.com/roginfarrer/system-props" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">system-props</a> (and that library
stole from Chakra) is the concept of &quot;pseudo-props&quot;, or applying some styles
based on a pseudo state. This can be configured by providing the <code>pseudoProps</code>
config to <code>createSimpleProps</code>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> createSimpleProps</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">simple-props</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> simpleProps</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> createSimpleProps</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  props</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    bg</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      scale</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      property</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">backgroundColor</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  pseudoProps</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    _hover</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">&amp;:hover</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    _focus</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">&amp;:focus</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span></code></pre>
<p>You can now use those pseudo props within the <code>simpleProps</code> function:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> style</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> simpleProps</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  _focus</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$primary</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="putting-it-all-together">Putting it All Together</h3>
<p>For an example of a fully configured usage of the <code>simple-props</code> library, feel
free to look at this <a href="https://codesandbox.io/s/simple-props-lf7po" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">CodeSandbox</a>
or this code snippet:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> createSimpleProps</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">simple-props</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// We call `createSimpleProps` with some config</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// All of this is optional besides the `props` config</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> simpleProps</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> createSimpleProps</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // a mapping of prop name to either a boolean or an object</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  props</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // means that the styles generated will support processing</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // a color prop that outputs: { color: `var(--color-[value])` }</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    bg</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // the variable scale to reference</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      scale</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // the CSS property to apply the styles as</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      property</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">backgroundColor</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // A mapping of pseudo-prop name to pseudo-selector</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  pseudoProps</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    _hover</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">&amp;:hover</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    _focus</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">&amp;:focus</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// what we get back is a function that we can call with some props:</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> styles</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> simpleProps</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$primary</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  bg</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">tomato</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> Component</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#B07D48;--shiki-dark:#BD976A"> style</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">styles</span><span style="color:#999999;--shiki-dark:#666666">}&gt;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">Hello World!</span><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>If you&#x27;re using this new library and have feedback feel free to
<a href="https://github.com/ds-pack/simple-props" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">open an issue</a> or
<a href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">tweet at me</a>!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/simple-props.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Computed Design Tokens]]></title>
            <link>https://matthamlin.me//2021/january/computed-theme</link>
            <guid>https://matthamlin.me//2021/january/computed-theme</guid>
            <pubDate>Sat, 09 Jan 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p class="mt-3 text-gray-400">Alternative titles: Dependent
design tokens, computed theme values</p>
<p>For the past few weeks I&#x27;ve been working on updating the theme within my
<a href="https://github.com/ds-pack/components" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>@ds-pack/components</code></a> package,
specifically around the colors that I&#x27;m using within the theme and the ones that
map to &quot;functional roles&quot; (e.g. <code>primary</code>, <code>secondary</code>, ... etc). Through this
work I&#x27;ve been exploring a few different patterns that I wanted to share more
widely.</p>
<p>Before diving into the two things I&#x27;ve been tinkering with I want to step back
and define the problem space a bit, specifically with this work I&#x27;ve been
thinking about how to enable consumers of the above components package to theme
the system without needing to re-construct the whole <code>theme</code> object that the
components use.</p>
<p>In a traditional theme, this customization might be fairly basic by using object
spread to override some values:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> newTheme</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">baseTheme</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  override</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">value</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>This works really well for flat theme shapes (which might be worthy of another
blog post in itself), but for nested themes, this soon gets out of hand:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> newTheme</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">baseTheme</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  colors</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">baseTheme</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">colors</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    buttons</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">baseTheme</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">buttons</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">new value</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>Another complication that arises when customizing a theme is dependent theme
values, let&#x27;s say that the theme shape also contains some styles for different
variants of a component (e.g. <a href="https://styled-system.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">styled-system</a>&#x27;s
<code>variant</code>), and those styles use the same values from other parts of theme:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> baseTheme</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  colors</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">mediumspringgreen</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  buttons</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">mediumspringgreen</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>If the system defines the theme like above, and a consumer wants to change the
primary color to <code>cornflowerblue</code>, the consumer may not know that they need to
change the <code>buttons.primary.color</code> value as well.</p>
<p>These two issues:</p>
<ol>
<li>Less than ideal ergonomics for overriding themes</li>
<li>Dependent theme values don&#x27;t react to overrides</li>
</ol>
<p>make theme overriding a particular indersting challenge.</p>
<p>So let&#x27;s finally dive into some of the ideas I&#x27;ve been working on, specifically
two concepts:</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="theme-getters">Theme Getters</h3>
<p>The first idea that I started workshopping was to use a
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>getter</code></a>
to define values within theme that can reference other values within the theme.</p>
<p>I didn&#x27;t mention above, but a common workaround I&#x27;ve seen for the second problem
noted is defining the theme primitives outside of the scope of the theme object,
and referencing those later:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> colors</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">mediumspringgreen</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  colors</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  buttons</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">primary</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>However this only solves the referencing issue for the file in which the theme
is defined (frequently that is within the source package for the system). With
getters however, you move that derivation time to runtime rather than module
load time:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  colors</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">mediumspringgreen</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  get</span><span style="color:#59873A;--shiki-dark:#80A665"> buttons</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">primary</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>Now, the button primary color inherits the primary color specified on the theme,
allowing us to override only that value and have the button styles inherit those
changes:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> newTheme</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // buttons styles don&#x27;t need to be modified at all!</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">baseTheme</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  colors</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">baseTheme</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">colors</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">cornflowerblue</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// newTheme.buttons.primary.color === &#x27;cornflowerblue&#x27;</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="token-references">&quot;Token References&quot;</h3>
<p>The second idea I&#x27;ve been working on is around using token
references <span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>, popularized by <a href="https://stitches.dev/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Stitches</a> and used by <a href="http://system-props.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">System Props</a>.</p>
<p>Essentially using the same syntax that you might use on a traditional <code>Box</code>
component:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Box</span><span style="color:#B07D48;--shiki-dark:#BD976A"> color</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$colors.primary</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;;</span></span></code></pre>
<p>within the theme shape itself:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> theme</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> themer</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  colors</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">mediumspringgreen</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  buttons</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    primary</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &quot;</span><span style="color:#B56959;--shiki-dark:#C98A7D">$colors.primary</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&quot;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// theme ===</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//   {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//     colors: {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//       primary: &#x27;mediumspringgreen&#x27;,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//     },</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//     buttons: {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//       primary: {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//         color: &#x27;mediumspringgreen&#x27;,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//       },</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//     },</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">//   }</span></span></code></pre>
<p>With this method, we&#x27;ve moved the derivation from the reference of the value
with the getter method to the callsite of this <code>themer</code> function (which has a
few trade-offs depending on how dynamic your theme needs to be).</p>
<p>To experiment with this more deeply, I built a small package that you can try
out: <a href="https://github.com/ds-pack/themer" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>@ds-pack/themer</code></a>.</p>
<p>I&#x27;d love to hear if you&#x27;ve found interesting solutions to these problems, feel
free to reach out on <a href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">twitter</a> or via
<a href="mailto:matthewjameshamlin@gmail.com?subject=Computed%20Theme" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">email</a>.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->There is probably a better term for this, if you know of them,
let me know!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/computed-theme.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[2021: Resolutions]]></title>
            <link>https://matthamlin.me//2021/january/2021</link>
            <guid>https://matthamlin.me//2021/january/2021</guid>
            <pubDate>Fri, 01 Jan 2021 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>In years past I&#x27;ve generally felt like new year&#x27;s resolutions were pretty
useless, however I&#x27;d still end up either writing a blog post or internally
identifying a few goals for me to try and tackle in the following year.</p>
<p>I was fully planning on <strong>not</strong> forming any particular new years resolutions for
2021, but the more I <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2020/december/2020">wrote about my 2020</a> the more I wanted to try and form a few goals for the following
year.</p>
<blockquote>
<p>Interestingly, just a week ago I was so burnt out about personal OKRs that
we&#x27;re adopting at work that I didn&#x27;t want to even think about goal setting for
myself</p>
</blockquote>
<p>With all that being said, let&#x27;s dive in a bit to I guess what I&#x27;m calling my new
year&#x27;s resolutions, I won&#x27;t be adding much context to these goals, but I did at
least want to publish them somewhere to build up some form of public commitment.</p>
<ol>
<li>Write at least one blog post a month</li>
<li>Refresh and refine my career view / perception</li>
<li>Launch at least 2 fully developed side projects</li>
</ol>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/2021.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[2020: Year in Review]]></title>
            <link>https://matthamlin.me//2020/december/2020</link>
            <guid>https://matthamlin.me//2020/december/2020</guid>
            <pubDate>Thu, 31 Dec 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Whew, what a year, 2020 has been quite a rough year.</p>
<marquee class="mt-4"></marquee>
<p>I could probably wrap up my year in review blog post with just the line above
but I figured it&#x27;s probably more cathartic to dive into what this year has been
like for me.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="january">January</h3>
<p>Even before Covid was a very big thing in the US, I started the year off by
wrapping up an extended Christmas and New Years vacation back home in Washington
state. I had been feeling a bit out of sorts for the two or three weeks around
the end of December and didn&#x27;t feel any better at the turn of the new year.</p>
<p>I ended up going to the walk in clinic after I got back to Boston (around the
21st) and they rushed me off to the hospital (or rather told me to go there
immediately). I ended up staying in the hospital for about 3 days.</p>
<p>I was diagnosed with Diabetic Ketoacidosis, with a blood sugar reading of just
above 500!</p>
<blockquote>
<p>For those that don&#x27;t know, a usual healthy blood sugar reading is around
80-120</p>
</blockquote>
<p>Ultimately, I was diagnosed with Type 2 Diabetes, and was told by several
doctors that I needed to get this under control. I&#x27;m immensely thankful to my
parents and grandmother for flying out to Boston to stay with me while I was in
the hospital and as I got re-adjusted back into my regular life.</p>
<p>Thanks to the new diagnosis I had a whole suite of prescriptions that I needed
to take, including insulin. Outside of my diagnosis, January was pretty quiet.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="february">February</h3>
<p>Most of February was filled with me still adjusting to my recent health scare.
About mid-way through February, Wayfair underwent it&#x27;s own change.</p>
<p>Around early February, Wayfair (where I worked) announced that we we&#x27;re letting
go of a decent chunk of the folks that worked across the company. Many of the
folks that I had worked with in the past were unfortunately being laid off.</p>
<p>This was a pretty big change, through my history at Wayfair we had never had
large layoffs, and in many ways it was a first for the rest of the organization
as well.</p>
<p>Myself and my direct team were thankfully not impacted, but our partnering teams
were unfortunately hit.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="march">March</h3>
<p>There&#x27;s not too much to call out about March, I think most readers (at least
those in the US) know that this was when the beginning of the Covid stay at home
/ quarantine started for most folks.</p>
<p>At Wayfair we started it as a two day (Thursday and Friday)
&quot;trial&quot;<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>, and then ballooned to the end of 2020 through to
June of 2021 at the time of writing.</p>
<p>For most of March, I ended up working from my studio apartment, fashioning a
hacky standing desk by setting my laptop on a folding chair that was set on top
of my desk<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->2</span></button></span><sup id="fn-2" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-2" class="text-primary hover:underline focus:underline">[<!-- -->2<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="april-aka-march---june">April: aka March - June</h3>
<p>These months all blended together quite a bit for me, working 10 hours a day or
so all from my apartment, and barely leaving my apartment for anything besides a
weekly grocery run.</p>
<p>It wasn&#x27;t until June that anything really notably changed for me, given that our
date by which we were expected to return to the office got pushed back from July
to January, my parents convinced me to fly back out to Washington to work from
home.</p>
<p>I took them up on the offer and have been working from Washington since then!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="july">July</h3>
<p>During the month of July, my parents and I started work on tearing down the
existing deck on the house to build a new one. This work ended up taking almost
two full months to complete.</p>
<p>During July, my parents and I took a few weekend drives up and around
Leavenworth and Wenatchee.</p>
<figure class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:130.81395348837208%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/bridge.jpeg" height="450" width="344" loading="lazy" class="rounded-lg" alt="A view from the jeep looking across an old wooden bridge with a look at the tree covered hills behind it"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">A bridge crossing just off of Highway 2</figcaption></figure>
<figure class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:40%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/smithbrook-pass-panorama.jpeg" height="200" width="500" loading="lazy" class="rounded-lg" alt="River flowing around the bend with a view of mountains on the horizon"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">A view of the Little Wenatchee River</figcaption></figure>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="august">August</h3>
<p>August was pretty similar to July, the notable events for me was visiting Mount
Rainier National Park with my family as well as taking a trip over to Winthrop
Washington.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="rainier">Rainier</h4>
<figure class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:100%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/sunrise-rainier.jpeg" height="500" width="500" loading="lazy" class="rounded-lg" alt="Sign reading out Sunrise, Elevation 6400 with Mount Rainier in the distance"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">Sunrise at Mount Rainier</figcaption></figure>
<div style="position:relative;width:100%;padding-bottom:20%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/mountain-pano.jpeg" height="100" width="500" loading="lazy" alt="Panorama of the mountain ranges around Mount Rainier"/></div></div>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="winthrop">Winthrop</h4>
<figure class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:100%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/kayaking-ross-lake.jpeg" height="500" width="500" loading="lazy" class="rounded-lg" alt="A kayak on a lake, next to a small rocky island beach"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">Ross lake kayaking</figcaption></figure>
<figure class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:30%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/ross-lake-pano.jpg" height="150" width="500" loading="lazy" class="rounded-lg" alt="Kayaks on a stone beach of Ross lake"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">Ross Lake</figcaption></figure>
<p>In addition to the above two trips, we also took some time to go camping up at
LaConner Washington, and enjoyed a few hikes up there as well as some delicious
fish and chips!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="september">September</h3>
<p>We finally finished the new back deck on the house in September!</p>
<div style="position:relative;width:100%;padding-bottom:80%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/deck.jpeg" height="400" width="500" loading="lazy" alt=""/></div></div>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="october">October</h3>
<p>On yet another trip, this time with just my parents, we went over to Wenatchee
to stay for a night and do a few hikes around the area.</p>
<div style="position:relative;width:100%;padding-bottom:80%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/a-view-of-wenatchee.jpeg" height="400" width="500" loading="lazy" alt="An overlook over Wenatchee, Washington"/></div></div>
<div style="position:relative;width:100%;padding-bottom:80%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/mountain-lake.jpeg" height="400" width="500" loading="lazy" alt="A mountain lake, surrounded by trees with leaves turning colors from green to yellow and orange"/></div></div>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="november">November</h3>
<p>November proved to bring an interesting Thanksgiving, usually for Thanksgiving
we invite over several members of the family to our house to have a nice large
dinner. Due to Covid however, we opted for smaller, yet still traditional
Thanksgiving dinner with our close family.</p>
<div style="position:relative;width:100%;padding-bottom:80%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/thanksgiving-dinner.jpeg" height="400" width="500" loading="lazy" alt="My mom, dad, and brother sitting around the dinner table with food spread across the table"/></div></div>
<p>To wrap up November, my parents and I took a drive up to Baring Washington, and
went on a hike up to Baring Lake. The whole trail we had to scramble over large
trees that had fallen across the trail, sometimes proving to be pretty difficult
to cross over. However the views were totally worth it!</p>
<div style="position:relative;width:100%;padding-bottom:100%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/2020-recap/mount-baring.jpeg" height="500" width="500" loading="lazy" alt="A lake with a snow capped mountain behind it"/></div></div>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="december">December</h3>
<p>To wrap up this really wonky year, December has been remarkably average for me.
Our Christmas was pretty laid back this year, obviously skipping the usual get
together (like we did for Thanksgiving dinner).</p>
<marquee class="mt-4"></marquee>
<p>I still have a lot of questions about what my life will look like as we go into
2021, but I feel like I&#x27;ve gotten over the worst of it through this year. Not
only with Covid in the US, but also my personal health and my journey so far
with diabetes.</p>
<p>I started off this blog post thinking that I would generally try to tease out a
point that would make the year make sense and I had thought it was going to be
something that was very negative, but as I got into it I found myself scrolling
through hundreds of pictures that I took over the past 6+ months and
surprisingly really enjoyed the memories of this year.</p>
<p>While this was a very rough year, I&#x27;m leaving it behind even more thankful of my
close family and friends who have been there for me when I needed them the most.</p>
<hr/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->At the end of Thursday, it was decided that we would do the
following two weeks as an extended trial.</p>
<p id="fnref-2" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-2" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I ended up working this way for multiple weeks, and finally
investing in a new standing desk and chair!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/2020.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Building a Web Sandbox: Part 1]]></title>
            <link>https://matthamlin.me//2020/december/sandbox-part-1</link>
            <guid>https://matthamlin.me//2020/december/sandbox-part-1</guid>
            <pubDate>Mon, 21 Dec 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Both at work and in my free time I&#x27;ve been working on an online browser-based
live sandbox for interpreting JavaScript code and rendering output using React.
Very much like tools such as <a href="https://codesandbox.io/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Codesandbox</a>,
<a href="https://codepen.io" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">CodePen</a>, or the variety of other online REPLs.</p>
<p>Since I&#x27;ve been exploring this concept for a bit of time I figured I would try
to write about some of my learnings and tips and tricks for others that might be
interested.</p>
<p>To start off, I figured I&#x27;d share the high level concepts for building a sandbox
for the browser. At a super high level, you&#x27;ll need:</p>
<ul>
<li>An editor component</li>
<li>A preview component</li>
</ul>
<p>A very basic implementation of this, expressed as a React component, might look
something like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> Sandbox</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setCode</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">render(</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  createElement(&#x27;h1&#x27;, {}, &#x27;Hello World!&#x27;),</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  rootElement</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">rootElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setRootElement</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">rootElement</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> func</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> Function</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">React</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">createElement</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">render</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">rootElement</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      code</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    func</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">React</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">createElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ReactDOM</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">render</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rootElement</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rootElement</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">label</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        Code:</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">textarea</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          value</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          onChange</span><span style="color:#999999;--shiki-dark:#666666">={(</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">            setCode</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">target</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">          }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">label</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ref</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">setRootElement</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>So let&#x27;s break down the above code snippet a bit to better understand what is
happening.</p>
<p>Our first concept from above was a code editor, in our above snippet the
following code is playing that role of the code editor (managing the state and
rendering the text editor using a <code>textarea</code>):</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// ==highlight== 1-5,27-35</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> Sandbox</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setCode</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">render(</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  createElement(&#x27;h1&#x27;, {}, &#x27;Hello World!&#x27;),</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  rootElement</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">rootElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setRootElement</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">rootElement</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> func</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> Function</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">React</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">createElement</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">render</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">rootElement</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      code</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    func</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">React</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">createElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ReactDOM</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">render</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rootElement</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rootElement</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">label</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        Code:</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">textarea</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          value</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          onChange</span><span style="color:#999999;--shiki-dark:#666666">={(</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">            setCode</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">target</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">          }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">label</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ref</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">setRootElement</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>The second concept noted from above is the preview component of the system, in
this example the preview component is highlighted below (including the system
that transforms the code that the user authors, and evaluating that code):</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> Sandbox</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setCode</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">render(</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  createElement(&#x27;h1&#x27;, {}, &#x27;Hello World!&#x27;),</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  rootElement</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">rootElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setRootElement</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#B07D48;--shiki-dark:#BD976A">rootElement</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> func</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> Function</span><span style="color:#999999;--shiki-dark:#666666">(</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">React</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">createElement</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">render</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">      &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">rootElement</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      code</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    func</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">React</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">createElement</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ReactDOM</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">render</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rootElement</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> rootElement</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">label</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        Code:</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">textarea</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          value</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          onChange</span><span style="color:#999999;--shiki-dark:#666666">={(</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">            setCode</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">target</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">          }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">label</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#B07D48;--shiki-dark:#BD976A"> ref</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">setRootElement</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Again, this snippet is a pretty basic example of a sandbox REPL in the browser,
however there are several opportunities for enhancement here:</p>
<ul>
<li>We render the preview in-line with the rest of the page, however if we wanted
to truly sandbox <em>no pun intended</em> the preview, we should move it over into an
iframe</li>
<li>We assume that the browser can understand the code that the user writes, but
what about experimental syntax options or extensions like JSX?</li>
<li>We hardcode the scope that the code inside the editor can access via our
<code>new Function</code> call, but ideally we&#x27;d like to support the user to specify what
code they would like to load in the preview</li>
<li>A textarea isn&#x27;t exactly the best code editing experience for developers, you
miss out on convinience features that any developers are use to with their
current code editors</li>
</ul>
<p>In future versions of this blog post I&#x27;ll dive into these points and more to see
how we can enhance this development experience! If you have comments or
questions, feel free to <a href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">tweet at me</a> or
<a href="mailto:matthewjameshamlin@gmail.com?Subject=Sandbox%20Part%201" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">email me</a></p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/sandbox-part-1.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Literate (web) Programming]]></title>
            <link>https://matthamlin.me//2020/december/literate-programming</link>
            <guid>https://matthamlin.me//2020/december/literate-programming</guid>
            <pubDate>Sat, 19 Dec 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve been using <a href="https://roamresearch.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Roam</a> a lot as of late, I lucked out
a few months ago (around March of 2020 or so) where there was a short gap of an
open, public, and free beta period for the online tool and I&#x27;ve been secretly
using it since then without paying for it (sorry Roam team!).</p>
<p>It&#x27;s been an interesting tool to learn and use, I&#x27;ve really enjoyed the
flexibility and freedom to make pages and links between concepts and ideas using
the <code>[[backlink]]</code> format. However, it&#x27;s still way too early to say that I fully
understand how to use the tool to it&#x27;s extent. As of late however, I&#x27;ve been
repeatedly thinking about how I wish I had Roam&#x27;s features deeply integrated
everywhere else in my day to day use of software. There are probably a lot of
different things that I could write about what that deep integration might look
like, but for this post I want to focus on my programming / development
environment.</p>
<p>For those of you that don&#x27;t know, I&#x27;m a software engineer and I get to write
code here and there, I&#x27;ve really been feeling this need for a deep integration
between my code editor, the codebase I work in, and my Roam database.</p>
<p>As I&#x27;ve been noodling over what this would look like, I&#x27;ve also been
experiementing with learning <a href="https://swift.org/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Swift</a>, through its Swift
Playgrounds, it then dawned on me that the playground format could really excel
in web development.</p>
<blockquote>
<p>I&#x27;d love to have a new filetype that allowed me to freely mix in notes and
documentation like a markdown file but also exist <strong>in</strong> the flow of the rest
of the code I&#x27;m working in <strong>as well as</strong> exist within my growing Roam
database.</p>
</blockquote>
<p>Outside of Swift, there are some other examples that exist out there in the
world today, <a href="https://observablehq.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Observable HQ</a> is one such example
allowing for the mixture of runable JS code snippets and free form content.</p>
<p>I think <a href="https://mdxjs.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">MDX</a> has the highest liklihood of becoming something
like this, but it still feels like a very early-days, low-fidelity mock-up of
this concept.</p>
<hr/>
<p>If you&#x27;ve been thinking about, working on, or otherwise interested in this concept, let me know by
<a href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">tweeting at me</a> or <a href="mailto:matthewjameshamlin@gmail.com?subject=Literate%20Programming" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">emailing me</a>!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/literate-programming.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[NextJS Analytics with Airtable]]></title>
            <link>https://matthamlin.me//2020/december/nextjs-analytics-with-airtable</link>
            <guid>https://matthamlin.me//2020/december/nextjs-analytics-with-airtable</guid>
            <pubDate>Sun, 13 Dec 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I was recently looking for a quick and easy solution to track page hits on my
personal site for another small feature add to the site (blog post on that when
I get around to it!), and figured that I could probably spin up something very
low-fidelity using <a href="https://nextjs.org" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">NextJS</a>&#x27;s <code>/api</code> routes and
<a href="https://airtable.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Airtable</a>.</p>
<p>To get started, you&#x27;ll want to create a new <code>Base</code> on Airtable, and a new table
within that. I opted to use an empty base as the starting point.</p>
<p>Inside the new table created, I&#x27;d recommend making the following changes:</p>
<ol>
<li>Rename the table, it starts off named as <code>&#x27;Table 1&#x27;</code> which isn&#x27;t all that
easy to find, I called mine <code>page-hits</code></li>
<li>Set the primary column to something unique, I opted to name it <code>id</code> and set
the type to <code>Autonumber</code> so I don&#x27;t need to worry about conflicts</li>
<li>Set the second column to be the <code>url</code> that the user is visiting</li>
<li>Add a third column to track &quot;hit counts&quot; (each record will only have a value
of 1 here, I use this to automatically rely on Airtable&#x27;s Sum feature on
columns), I called mine <code>hits</code></li>
</ol>
<p>Once you have your Airtable base and table setup, head over to
<a href="https://api.airtable.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline"><code>api.airtable.com</code></a>, and select the base that you
just created.</p>
<p>From there, you&#x27;ll want to change the right-hand-side code preview to
JavaScript, and select &quot;Show API key&quot;</p>
<p>For now, grab your api key and now jump to your NextJS project.</p>
<blockquote>
<p>Note: This guide assumes you have a NextJS project up and running already, and
you at least know of <code>/api</code> routes</p>
</blockquote>
<p>Within your NextJS project, if you don&#x27;t yet have a <code>.env.local</code> file at the
root of the project then create one, and add a new line that has some unique
all-capitilized key name for the Airtable API key:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">AIRTABLE_API_KEY</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B56959;--shiki-dark:#C98A7D">your-key-here</span></span></code></pre>
<blockquote>
<p>Replace <code>your-key-here</code> from the above snippet with the API key from the above
Airtable api page</p>
</blockquote>
<p>Next, you&#x27;ll want to setup the api route that you will log to from the frontend
of your site, for my site I named it <code>pages/api/record-page.ts</code>, but you can
call it whatever!</p>
<p>Then you&#x27;ll need to install the <code>airtable</code> NPM package:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">yarn</span><span style="color:#B56959;--shiki-dark:#C98A7D"> add</span><span style="color:#B56959;--shiki-dark:#C98A7D"> airtable</span></span></code></pre>
<p>Within the newly created api file, you&#x27;ll need to import the airtable package:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> airtable</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">airtable</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span></code></pre>
<p>and configure it with your API key and create the base:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">airtable</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">configure</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  apiKey</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> process</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">env</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">AIRTABLE_API_KEY</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> base</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> airtable</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">base</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">your-base-id</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)</span></span></code></pre>
<blockquote>
<p>You can find the base-id from the <a href="https://api.airtable.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Airtable API</a>
page</p>
</blockquote>
<p>Now you&#x27;ll want to create the function that will handle the request from the
frontend:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> handler</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">req</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> res</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> body</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> JSON</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">parse</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">req</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">body</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Handle local dev reporting</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">body</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">url</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">includes</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">localhost</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    res</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">statusCode</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 200</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    res</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">setHeader</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Content-Type</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">application/json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    res</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">end</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">JSON</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">stringify</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#998418;--shiki-dark:#B8A965"> skipped</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666"> }))</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // handle creating the record on airtable</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  base</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">your-table-name</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    .</span><span style="color:#59873A;--shiki-dark:#80A665">create</span><span style="color:#999999;--shiki-dark:#666666">([</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        fields</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">          // pass the url</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">          url</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> body</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">url</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">          // and set the hits to 1</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">          hit</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ])</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    .</span><span style="color:#59873A;--shiki-dark:#80A665">catch</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">err</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      console</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">error</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">err</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  res</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">statusCode</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 200</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  res</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">setHeader</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Content-Type</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">application/json</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  res</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">end</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">JSON</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">stringify</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#998418;--shiki-dark:#B8A965"> success</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666"> }))</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>and that&#x27;s it for the server-side code you need to create!</p>
<p>Finally, to use this api route you need to add some code to your <code>_app.tsx</code>
file:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Import the next router</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Router</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">next/router</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">Router</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">events</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">on</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">routeChangeComplete</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  fetch</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">/api/&lt;your-api-route&gt;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    body</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> JSON</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">stringify</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">      // pass the current url to the api route</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      url</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> window</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">location</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">href</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }),</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  })</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">})</span></span></code></pre>
<p>This code will add an event listener to the Next Router that will be called when
the user has finished a client-side route change between pages.</p>
<p>In addition to the code above, you&#x27;ll also want to handle tracking fresh page
hits:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// still within _app.tsx</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> useEffect</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> App</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    fetch</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">/api/&lt;your-api-route&gt;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      body</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> JSON</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">stringify</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // pass the current url to the api route</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        url</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> window</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">location</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">href</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      }),</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    })</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> [])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // ...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<hr/>
<p>That should be it! With the above configured, you should now be able to see
Airtable records created when a visitor lands on one of the routes for your
NextJS site! Let me know what you thought about this blog post by
<a href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">tweeting at me</a> or <a href="mailto:matthewjameshamlin@gmail.com?subject=NextJS%20Analytics%20with%20Airtable" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">emailing me</a>!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/nextjs-analytics-with-airtable.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Pair Code Reviews]]></title>
            <link>https://matthamlin.me//2020/december/pair-code-reviews</link>
            <guid>https://matthamlin.me//2020/december/pair-code-reviews</guid>
            <pubDate>Wed, 02 Dec 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Code Review is a vital part of every development team&#x27;s workflow, not only is it
valuable to ensure the code is validated, both for syntax and business logic
errors but also for enforcing consistent maintainable patterns. Another often
under-discussed value proposition of a <em>well implemented</em> code review process is
the teaching and learning opportunities present for both the author of the code
and for the reviewer.</p>
<p>Historically at Wayfair, most code reviews have been asynchronous,
semi-secretive, and usually seen as a slowdown to the code author. Many
developers look at code review as something that they throw into a queue on
slack, sort of like throwing the PR over a wall and waiting for someone on the
other side to review it and throw it back to them.</p>
<p>When code reviews work like this, it&#x27;s easy to see why developers see the
process as a development slowdown and an arbitrary process.</p>
<p>To help shorten the feedback cycle of code reviews on our team, something we&#x27;ve
added to our collective code review workflow toolbelt recently has been to do
something we call &quot;Pair Code Reviews&quot;. This might not be all that new of a
concept for many teams, but it&#x27;s relatively new to ours.</p>
<p>We&#x27;ve seen several key benefits of this strategy, but there are some trade-offs
as well, as with any piece of advice your mileage may vary! Before diving into
the benefits and trade-offs let me back up a bit and explain what this workflow
looks like.</p>
<p>It&#x27;s worth noting, rarely do we follow the exact same process when doing pair
code reviews, but usually they look like the following:</p>
<p>When an engineer has a pull request ready for review, they may reach out to
another engineer that they had collaborated with (either through <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2021/november/pair-programming-stub">Pair Programming</a> or some shared debugging) or had also been knowledgeable of
the ticket they were working on to schedule a pair review.</p>
<p>During the call, usually the author will be running the code locally so they can
screen share the visual changes to the reviewer, and then the reviewer will
screen share as they walk through the changes within the pull request. Often
times, we will swap back and forth between walking through the visual changes
and the diff for the pull request to collect more context on the changes.</p>
<p>I&#x27;ve found that doing both of these during a video call helps to do two primary
things:</p>
<ol>
<li>The code reviewer now has a decent understanding of what the change is
intending to do to the UI</li>
<li>The code reviewer and author can have an immediate discussion about the
changes, collapsing what might be a 24 hour long feedback cycle down to
seconds</li>
</ol>
<p>Not only does it help build up an understanding of the scope of the change, but
it also lets both the reviewer and the author to have a conversation about the
change instead of a back and forth dialog interspersed throughout their day.</p>
<p>As noted above, there are some cases where this workflow shouldn&#x27;t be followed
and there are some trade-offs t acknowledge when adopting it.</p>
<p>Generally, I&#x27;d avoid this for quick and fast pull requests, changes that are
self-explanatory, or changes that would take fewer than 10 minutes to fully
review. Additionally, I&#x27;d recommend avoiding this workflow for time-sensitive
PRs, for example a critical bug fix for production.</p>
<p>One notable trade-off to also be aware of is that when the majority of your code
review feedback is discussed during these pair code reviews, any team member not
present during that call may miss out on some institutional knowledge and
learning opportunities, I have some ideas on how to overcome this trade off but
will save those for a follow up post.</p>
<hr/>
<p>I&#x27;d love to hear more about how your team handles and manages code reviews,
reach out on <a href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Twitter</a> or via <a href="mailto:matthewjameshamlin@gmail.com?subject=Code%20Reviews" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">email</a>!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/pair-code-reviews.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Enhancing Slack]]></title>
            <link>https://matthamlin.me//2020/july/enhancing-slack</link>
            <guid>https://matthamlin.me//2020/july/enhancing-slack</guid>
            <pubDate>Wed, 08 Jul 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve been using Slack a lot recently, although to be honest I have always used
Slack a lot, but it feels like I&#x27;m using it more than normal since Wayfair
started it&#x27;s work from home period. I&#x27;ve probably put in ~8 hours in the app
(Mac and Android apps combined) every week-day for the past few months üò±.</p>
<p>While using the app as much as I have been in the past few months, I&#x27;ve stumbled
upon a few enhancements that I think would really improve my workflow and allow
me to be more productive<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>. I&#x27;ve broken these down into four
specific features I would like to see:</p>
<ul>
<li>Automatic Timezone Conversion</li>
<li>Channel Bundles</li>
<li>Saved Channel Filters</li>
<li>A &quot;Previously Read&quot; view</li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="automatic-timezone-conversion">Automatic Timezone Conversion</h3>
<p>Even more recently than the beginning of our work-from-home period, I decided to
fly back out to the west coast and work from my parents home for a little while,
so far it&#x27;s been a really great experience! One of the things I have found
myself doing in the middle of messaging my teammates however is doing the
timezone conversion in my head and writing out both times.</p>
<p>For example, if I was talking with a teammate to schedule a meeting, I&#x27;ll
generally say something like</p>
<blockquote>
<p>Does 3pm EST (12pm PST) work for you?</p>
</blockquote>
<p>When in reality, what I really want to do is just message them the propsed time
in <em>my</em> timezone and have Slack do the heavy lifting of converting that to my
teammates timezone.</p>
<p>I imagine the other person seeing the time formatted for their timezone, and
maybe a tooltip that they can hover over to see the time in my timezone. This
would be such a small feature, but would really make the experience for teams
that are distributed across multiple timezones and across the globe!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="channel-bundles">Channel Bundles</h3>
<p>If you&#x27;re anything like me, you happen to be in hundereds of Slack channels,
some of them are closely related and others are wildly different. Since the
<a href="https://slackhq.com/simpler-more-organized-slack" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">addition of sections</a> in the
UI, I&#x27;ve been grouping these channels together which has been really great.
However, if there are updates across several related channels I have to either
scroll through my All Unread view to find them all, or click into each channel
individually.</p>
<p>After thinking about this <del>problem</del> <em>minor inconvenience</em> for a bit, the best
idea that I had could best be described by channel bundles. I&#x27;m envisioning that
this could look like a &quot;super-channel&quot;, where I can choose to group all the
threads and messages from several channels and display them in a single
chronological view.</p>
<p>This could be just an unread view that is filled with specific channels instead
of showing the full history - either way this would allow me to easily see the
general discussion happening across related channels easily.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="saved-channel-filters">Saved Channel Filters</h3>
<p>Several teams in Wayfair use <code>-feed</code> or <code>-update</code> Slack channels to share
automated or manual release notes for a wide audience. Something that our team
has been balancing is the number of these channels we post to and the variety of
information we share. We might post updates for a new library release that is
most pertiant to one audience and then post another release that is more
pertiant to a completely different audience.</p>
<p>To aid with this, it would be neat for Slack to support saved filters on
specific channels, or even across multiple channels. Kind of like a continuous,
pinned search result across the workspace. I think something like this could be
accomplished via using keywords and following them in the messages and reactions
view - but if your team uses emoji like Wayfair does that view gets drowned out
with a ton of reactions.</p>
<p>To take this to another level, imagine being able to share these saved filters,
maybe even having a workflow share them when new folks join a channel!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="previously-read">Previously Read</h3>
<p>If I had a penny for every time that I accidentally, and unintentionally, marked
a message as read and then completely forgot about it I think I would be able to
buy Slack outright üòÇ It would be great to scroll back through a chronological
feed of my past unreads and notifications in a single view, and then easily mark
conversations as unread.</p>
<p>I really wish every application offered this kind of git-like history view of
notifications!</p>
<p>I don&#x27;t expect the above ideas to ever make their way into the Slack
application, but if you are a PM, or an engineer, or a designer working at Slack
and want to chat more about any of the above then definitely hit me up! What
other features would you like to see added to Slack?</p>
<hr/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Separately I should really write up a blog post about my Slack
workflow ü§î</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/enhancing-slack.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[A Note on Consistency]]></title>
            <link>https://matthamlin.me//2020/may/a-note-on-consistency</link>
            <guid>https://matthamlin.me//2020/may/a-note-on-consistency</guid>
            <pubDate>Sun, 31 May 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>When distributing work across a team of individuals, the most important process
to nail down is communication, however the second most important process to
focus on is consistency.</p>
<p>The reason that consistency is so important when working with other team members
is that it scales and distributes cognitive load and historical context across
the team. This distribution only happens if the team solidifies their
discoveries and solutions as patterns that everyone else can learn from.</p>
<p>The benefit of consistency is that new team members don‚Äôt need to ask why when
they implement a shared pattern in their work. Note that asking why for new
patterns is still incredibly valuable, and great teams often invest in great
documentation around the reasoning behind their patterns to help answer the why
questions, however an individual doesn‚Äôt need to ask why when following
consistent patterns in their work.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/a-note-on-consistency.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The Rabbit Hole]]></title>
            <link>https://matthamlin.me//2020/april/the-rabbit-hole</link>
            <guid>https://matthamlin.me//2020/april/the-rabbit-hole</guid>
            <pubDate>Sat, 04 Apr 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I&#x27;ve been spending a bit more time than usual in the past two or so weeks on my
side projects. For those that know me personally, I used to really enjoy
spending time working on open source projects in my free time. However, over the
past 9 or so months I have been feeling a bit burnt out on the code and couldn&#x27;t
muster the energy to open VSCode to work on some projects.</p>
<p>As of late however that energy is beginning to come back to me bit by bit. It
might be because I am writing far less code at work than I used to many months
ago, or it might just be that I am working my way out of the boredom.</p>
<p>With this revitalization of my side projects, I have found that I can no longer
ship projects. Back in college I was able to sit down for a solid three day
weekend and just churn out working websites (sure the code was pretty bad, but
the features worked!). Now days I can barely ship something usable, let alone
something complete that I would feel comfortable announcing to the world.</p>
<p>I think the key reason that has held me back from shipping new features or
projects is what I like to call <em>The Rabbit Hole</em>. Its the tendency for a
developer to go deeper and depper in the meta of trying to solve their issue at
hand.</p>
<p>For example, I started off by wanting to implement a simple todo application
that has some pretty neat features, however as I began work I realized I wanted
to work on a customized component library so the application UI was really nice.
So I started work on my own component library as a separate project. As that
work began I realized I needed to work on building out some tooling for the
monorepo that I keep the code within so I started yet another project to help me
automate tasks around the repo (this monorepo now has well over 20 packages
now).</p>
<p>Its now 3 months later and I still don&#x27;t have a working todo application, but
that original project has expanding its scope so far that I am building a
general hub site that tracks todos, health, financials, habits, and a general
calendar.</p>
<blockquote>
<p>Insert famous scream painting.png üò±</p>
</blockquote>
<p>This is The Rabbit Hole, a deep and complex waste of time preventing me from
actually shipping.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/the-rabbit-hole.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[A Note On Meetings]]></title>
            <link>https://matthamlin.me//2020/april/a-note-on-meetings</link>
            <guid>https://matthamlin.me//2020/april/a-note-on-meetings</guid>
            <pubDate>Fri, 03 Apr 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>My feelings on meetings (either in person or virtual) are a constant pendulum.
When the meeting has clear value for me, I at best don&#x27;t get disinterested by
them and have the semblance of feeling productive. However, if there is limited
percieved value for me in the meeting, I leave feeling drained of yet another
hour in a shorter and shorter day.</p>
<blockquote>
<p>Meetings are the default tool for most people who don&#x27;t know either <strong>when</strong>
or <strong>how</strong> to make a decision.</p>
</blockquote>
<p>I&#x27;ve found that a more useful tool for making a decision has become the good old
shared doc (currently Google Docs has become my go to at work because of how
easy it is to create and share).</p>
<p>I use free-form docs to brain-dump everything I know about a specific topic when
I need to make a decision, I then refine those thoughts, groom through them,
share the doc for early feedback with coworkers, then I edit the doc and clearly
outline the decision and share once more.</p>
<p>For me, this format is driving a shift of decision making processes from being
synchronous by default to being asynchronous by default.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/a-note-on-meetings.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[A Note On Anti-Patterns]]></title>
            <link>https://matthamlin.me//2020/april/a-note-on-anti-patterns</link>
            <guid>https://matthamlin.me//2020/april/a-note-on-anti-patterns</guid>
            <pubDate>Thu, 02 Apr 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Developers often speak of patterns and anti-patterns in programming, usually
identifying some new hyped pattern in programming as an anti-pattern. I
personally don&#x27;t believe there are any true anti-patterns in programming,
instead what I hear when someone says &quot;that&#x27;s an anti-pattern&quot; is really &quot;that
programming pattern or style doesn&#x27;t fit my needs&quot;.</p>
<p>All design decisions in programming, including preferred coding patterns, have
trade-offs. When one programming pattern might not fit your design, it does not
mean that it won&#x27;t fit an alternative design.</p>
<p>The key to making technical and architecture decisions is to weigh those
trade-offs for your needs at hand.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/a-note-on-anti-patterns.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Stateful Providers]]></title>
            <link>https://matthamlin.me//2020/march/stateful-providers</link>
            <guid>https://matthamlin.me//2020/march/stateful-providers</guid>
            <pubDate>Sat, 28 Mar 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>My team at Wayfair has been hard at work rebuilding our design system
documentation site over the past few months.</p>
<p>It has been a ground up rewrite, breaking out of our previous monolithic
codebase into a separate design system focused monorepo (living right next to
our components and other packages), building on top of a Node.js backend served
from a docker container running in Kubernetes (previously we used a mostly SPA
architecture built on top of Wayfair&#x27;s PHP webstack).</p>
<p>On top of this major backend re-architecture, we have also approached
architecting the frontend of the site from a fresh viewpoint. The previous site
was mostly built when render props were all the rage, and only lightly used the
updated 16.3 <code>createContext</code> API.</p>
<p>This new site is built from the ground up using hooks (last I checked the only
class component we have in the codebase is our ErrorBoundary component), as well
as a deeper integration with <code>createContext</code>.</p>
<p>In addition to using existing React patterns we also decided to build the site
on top of the experimental builds of React. We have heavily leaned into using
Suspense for data fetching, async event management, as well as code splitting.</p>
<p>One of the early patterns we identified in our site was around our context
usage, we knew that defaulting to a single context provider parent for the
entire site could lead to unnecessary re-renders when changing single fields of
a larger state object.</p>
<p>To mitigate this risk we started a pattern around using single, stateful
contexts across the site, where we would previously have a single large stateful
context provider at the root of the application, we now have several contexts,
each representing a different slice of state.</p>
<p>We render these context providers only as high as they need to be within the
application, e.g. if some slice of state is only needed within the header for
the site then we only wrap the header in the provider.</p>
<p>We call these contexts stateful because the value that they provide aligns with
the return value of <code>useState</code> or <code>useReducer</code>, the context provides an array of
value and a setter or dispatcher to update the value.</p>
<p>These context modules expose an interface that looks roughly like this,
exporting the Provider and a hook to read the value:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> toggleContext</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> createContext</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> Provider</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#B07D48;--shiki-dark:#BD976A"> children</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> defaultValue</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#1E754F;--shiki-dark:#4D9375"> false</span><span style="color:#999999;--shiki-dark:#666666"> })</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // value might look like [isToggled, toggle]</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> value</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useToggle</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">defaultValue</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">toggleContext.Provider</span><span style="color:#B07D48;--shiki-dark:#BD976A"> value</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">}&gt;{</span><span style="color:#B07D48;--shiki-dark:#BD976A">children</span><span style="color:#999999;--shiki-dark:#666666">}&lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">toggleContext.Provider</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> useToggleContext</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#59873A;--shiki-dark:#80A665"> useContext</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">toggleContext</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>As our codebase continues to evolve, and we begin to polish the site up for its
internal launch we may refine this pattern even more. Some of the interesting
discussions we have had around this pattern include:</p>
<ul>
<li>Do we default to <code>useState</code> for these contexts? Or should we <code>useReducer</code>?</li>
<li>Should we expose an explicit <code>useXContext</code> hook or should we export the raw
context object and have consuming sites call <code>useContext</code> locally?</li>
<li>How does this interplay with using Suspense and external data caches?</li>
</ul>
<p>As with any code pattern, this architecture might not be right for your
application. However it is valuable to be considerate of how you manage state
within your application. For us, this pattern helps us to avoid using Redux
which we saw as requiring unnecessary ceremony for maintaining and updating
state within our application.</p>
<p>If you have other ideas on this pattern, or alternatives I would love to hear
them! Reach out on Twitter to share your thoughts,
<a href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">@immatthamlin</a>.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/stateful-providers.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Draft Pull Requests]]></title>
            <link>https://matthamlin.me//2020/march/draft-pull-requests</link>
            <guid>https://matthamlin.me//2020/march/draft-pull-requests</guid>
            <pubDate>Mon, 23 Mar 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>Also known as: When is the right time to ask for early technical feedback?</em></p>
<p>I was recently having a remote conversation over Slack with a team member
talking about their progress on building a new component for our Design System.</p>
<p>They were wondering when would be a good time to open an initial work in
progress draft pull request for the new component and mentioned:</p>
<blockquote>
<p>‚ÄúI‚Äôm already going back and forth about the API‚Äù</p>
</blockquote>
<p>To this I exclaimed:</p>
<blockquote>
<p>This is exactly the time to open a draft pull request!</p>
</blockquote>
<p>That was only slightly accurate, the right time to start asking for feedback is
as soon as you have a partially formed idea, as soon as it is fresh in your mind
and you have a roughly clear vision of how to put that plan into motion.</p>
<p>The second best time to ask for feedback on a technical challenge is when you
are at a crossroads and are debating between a few different paths and can‚Äôt
determine how to proceed.</p>
<p>Draft Pull Requests are an excellent format for receiving early feedback on any
particular work, they can help provide context and start a discussion with
reviewers on a complex change to better indicate where you plan on going, and
they can also serve as a great way to collect early technical feedback.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/draft-pull-requests.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[February 20, 2020]]></title>
            <link>https://matthamlin.me//2020/february/back-bay-fens</link>
            <guid>https://matthamlin.me//2020/february/back-bay-fens</guid>
            <pubDate>Thu, 20 Feb 2020 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>While walking home from work on Thursday Febrary 20th, I decided to walk through
the Back Bay Fens area near Fenway.</p>
<div style="position:relative;width:100%;padding-bottom:133.33333333333334%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/back-bay-fens/john-boyle.jpg" height="4032" width="3024" loading="lazy" alt="Statue of John Boyle"/></div></div>
<div style="position:relative;width:100%;padding-bottom:75%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/back-bay-fens/river-geese.jpg" height="3024" width="4032" loading="lazy" alt="A view from the bridge over the river"/></div></div>
<div style="position:relative;width:100%;padding-bottom:75%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/back-bay-fens/garden.jpg" height="3024" width="4032" loading="lazy" alt="A garden within the Back Bay Fens"/></div></div>
<div style="position:relative;width:100%;padding-bottom:75%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/back-bay-fens/garden-furniture.jpg" height="3024" width="4032" loading="lazy" alt="A cozy little bench within one of the gardens"/></div></div>
<div style="position:relative;width:100%;padding-bottom:133.33333333333334%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/back-bay-fens/garden-walkways.jpg" height="4032" width="3024" loading="lazy" alt="A small walkway weaving between garden plots"/></div></div>
<div style="position:relative;width:100%;padding-bottom:75%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/back-bay-fens/view-of-the-pru.jpg" height="3024" width="4032" loading="lazy" alt="A view of the Prudential building from the fens"/></div></div>
<div style="position:relative;width:100%;padding-bottom:75%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/back-bay-fens/fenway.jpg" height="3024" width="4032" loading="lazy" alt="A view of some of the buildings near Fenway"/></div></div>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/back-bay-fens.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Summer 2019 - Bend Oregon]]></title>
            <link>https://matthamlin.me//2019/july/bend</link>
            <guid>https://matthamlin.me//2019/july/bend</guid>
            <pubDate>Sat, 27 Jul 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>As with most summers recently, I had taken off two weeks in late July and early
August to fly back out to the west coast to visit family and go camping to Bend
Oregon. My family has been visiting Bend for the past 6+ years every summer,
there&#x27;s something up with the high desert around Central Oregon that is a
welcome retreat from the rest of our average days. This blog post will mostly be
in the form of short entries for each day during the trip. I will be posting
photos from the trip in a follow-up post.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="july-20th">July 20th</h2>
<p>I flew in on Saturday July 20th, which was coincidentally my birthday as well.
Arriving at 9:30am at SeaTac. My parents picked me up at the airport and we
immediately set off to visit a Dennys. Dennys still does a free breakfast meal
for your birthday so I ordered a ton of eggs, hash browns, pancakes, and toast,
splitting some sausage and bacon with my mom.</p>
<p>We then drove the hour and a half to my parents house, where we immediately set
into action on packing up the camping trailer we were taking down to Bend. We
had to pack clothes, food, and all the accessories including the bikes in the
back of the truck and a box of firewood.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="july-21st">July 21st</h2>
<p>We set off a bit later than we usually would, but we had planned on staying a
night at Brooks Memorial state park just outside of Goldendale Washington. It
was about a 4 hour drive to Brooks, I spent most of the time of that drive
reading The Sun Also Rises by Ernest Hemingway. It was a copy that a friend from
college had loaned me and I had read previously, the worn, sun burnt pages
called to me when I was looking at my bookshelf in my old room.</p>
<p>We had pulled into Brooks Memorial in the early evening, setting up the trailer
and then cooking up a few sausages on the grill. Along with the sausages we had
some fresh guacamole, some cucumber pico de gallo that my parents had picked up
at the Snohomish farmers market. We topped off the evening by playing some
Yahtzee and watching the other campers set up as they pulled in.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="july-22nd">July 22nd</h2>
<p>We woke up early in the morning and made some fried egg sandwiches, and then
quickly packed up our trailer and set out driving South to Bend. Most of the day
was spent on driving down to Bend, finding a camping spot and then we went back
into town to pick up some groceries for the week.</p>
<p>When we got back we had cooked up some turkey burgers with gouda and canadian
bacon, and had some leftover guacamole as well.</p>
<p>During dinner we planned out some of the things we wanted to do on Tuesday and
Wednesday.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="july-23rd">July 23rd</h2>
<p>We got up early to drive down to Crater Lake and drive around the rim road. It
had been at least a few years since we last visited the national park, and we
had planned on doing most of the shorter hikes around the crater.</p>
<p>We started by driving clockwise around the lake, pulling off at all the
different pull outs to get amazing views of the bright blue lake. We then went
down towards the pinnacles, and did a short 2 mile hike to the Plaikni Falls. We
didn&#x27;t go out to these falls the last time we were at the park so it was a new
experience.</p>
<p>The hike was a pleasant one, except for the large amount of mosquitoes, but
luckily we had brought some bug spray with us. At the end of the hike is a short
vertical section that leaves you about 30 feet from the base of the falls. It
was incredibly refreshing to take off my hat and soak it in the water and then
put it back on. We stayed there for a few minutes, collecting a few photos and
videos of the falls and the river it was feeding, then hiked back out on the
same trail back to the truck.</p>
<p>From the falls, we drove down to the Pinnacles, and took a short walk along this
large canyon filled on the sides with large spires of stone and dirt left over
from the previous eruption thousands of years ago.</p>
<p>We continued our drive around the lake, pulling off at a lookout near Mount
Scott, the tallest peak in the park. Looking up we could see a fire lookout at
the top of the peak and also we could see several groups of hikers working their
way up to the peak along a ridgeline. There was still large swatches of snow
left on the mountain from the winter, and it was pretty amazing to see so close
up.</p>
<p>We then made our way around to the Rim Village, which had a visitor center, and
an old resort that was constructed back in the 50&#x27;s. We used the restrooms and
did a bit of shopping, and then continued on our trip around the lake, making a
last stop at the Watchman lookout. From this stop we could see up to another
fire lookout at the top of Watchman peak, there was a long trail going up to the
peak but we didn&#x27;t have enough time to do that hike.</p>
<p>We left the park, heading back to our trailer and picked up some delicious ice
cream treats and dinner at a Dairy Queen about 10 miles south of the campground.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="july-24th">July 24th</h2>
<p>We woke up a bit later than usual this morning due to general exhaustion from
our previous day at Crater Lake. We had a good breakfast of hash browns and
fried eggs and then packed up the bicycles into the truck as we drove over to
Sunrivier. We planned to bike around Sunriver which has an extensive network of
bike trails all around the small town, houses, and local airport.</p>
<p>We had biked several miles, out and around the airport, and then along the
Deschutes river where it borders the town, and we took a short-cut on our way
back to where we parked.</p>
<p>We walked around the shopping village in Sunriver, and then went into the local
grocery store to pick up some hot dogs for dinner, and some refreshing teas from
Starbucks.</p>
<p>After dropping off the bikes at the trailer, and cleaning up a bit we went into
Bend to visit the farmers market, and do a bit of shopping on main street. We
topped off the evening by having dinner at McMenamins where we enjoyed a hummus
plate, a salad, a delicious burger with bacon-coffee jam and a fried egg, and a
large pizza that we packed up at the end of the meal.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="july-25th">July 25th</h2>
<p>The plan for the day today is to drive out and around the Cascade Scenic Byway,
a short loop around Mount Bachelor that goes past several large cascade lakes
within the Deschutes national forest. In total, without stopping it takes about
two hours, but and we ended up stopping at several lakes and reservoirs.</p>
<p>We first drove to the Twin Lakes Resort, a small campground and resort right off
of the Wickiup Reservoir, there was a school group and several other families
there along the beach and in inflated tubes and toys along the water. We stopped
at another resort along another lake, and then made our way to Cultus Lake.</p>
<p>Here we picked up a 6 pack of Sweet As Pale Ale, and set out a large towel to
eat some of the leftover pizza and other snacks we brought for lunch along the
drive. We relaxed for a few more minutes, reading our books and taking in the
views of the lake, surrounding forests and mountains.</p>
<p>After Cultus Lake we made our way around the loop, visiting next Lava Lake, then
Elk Lake which is one of the larger lakes along the route. The water was
slightly cool, but refreshing in the heat of the sun and warmed up quickly. Both
Elk and Cultus lakes had a small marina, with a few sail boats (nothing longer
than 30 feet) and a collection of other small boats and motor vehicles.</p>
<p>After Elk Lake, we stopped at Devils Lake at 5,446 feet of elevation the water
here was the coldest out of any of the lakes we visited, as it was being freshly
fed from the snow runoff from the South Sister and Broken Top. The lake uniquely
changes colors from a dark green blue to a bright turquoise green on the side
away from where the water was coming into it. There were a few different groups,
some camping in the tent spots on the lake, others kayaking, and a few others
using standup paddle boards.</p>
<p>We wrapped up the evening by driving past Mount Bachelor, going into Bend to
pick up a few more groceries for the rest of the trip, and then we cooked up a
few cheeseburgers back at our trailer for dinner. We finished the evening with a
game of hand and foot.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="july-26th">July 26th</h2>
<p>We started the day a bit late, finishing a full breakfast of hashbrowns, fried
eggs, sausage patties and toasted buns around 11 as we were still making plans
for what we wanted to do. We decided to run a few errands at some of the stores
in Bend, so we started by visiting the local outlet mall, then Kohl&#x27;s, Lowes,
the local RV shop, Costco, and finally finishing at the Humm Kombucha tap house
in bed, filling up a small collection of growlers and growlettes with different
flavors of Kombucha.</p>
<p>We stopped off at Bend Burger Company for a late lunch around 3 and had amazing
burgers, fries, onion rings and tater tots.</p>
<p>We plan on finishing up the evening early, packing up a large part of the
trailer so we can hit the road early tomorrow to head back to Snohomish. We have
decided to skip staying a night at Brooks Memorial State Park so we have more
time on Sunday to clean up the trailer, do laundry, and pack for our next trip
to Vashon Island, and then to Leavenworth later in the week.</p>
<p>This year&#x27;s Bend trip was a pleasant relaxing week, hitting a lot of our
favorite places around central Oregon, while also getting a bit of relaxation
in, and a ton of sun too!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/bend.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Theme First UI Development]]></title>
            <link>https://matthamlin.me//2019/july/theme-first-ui-development</link>
            <guid>https://matthamlin.me//2019/july/theme-first-ui-development</guid>
            <pubDate>Thu, 18 Jul 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>A recent trend within the Frontend development space has been around enabling
something I have been calling Theme First UI Development. Tools like Emotion,
Styled-System, Theme-UI, React, and concepts like Design Systems, and Design
Tokens have really driven the push for building applications based on a finite
set of scale-based tokens.This approach to building features and applications
isn‚Äôt entirely new, however new tools have pushed it to the forefront of web
development.</p>
<p>The core benefits of doing Theme First UI Development are:</p>
<ul>
<li>Consistency by Default</li>
<li>Separation of Theme and Implementation</li>
<li>Rapid Development</li>
</ul>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="consistency-by-default">Consistency By Default</h3>
<p>Describing a set of Design Tokens, as the core fundamental pillars of a larger
theme, as a scale applied to default values enables consistent UI to be the
default. If your development team is only describing the UI using a collection
of Design Tokens then you can be sure that styles like spacing, font styling,
and colors will align across the application.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="separation-of-theme-and-implementation">Separation of Theme and Implementation</h3>
<p>By developing theme first, changes made to the design system by tweaking the
design tokens will apply everywhere across the application and lead to
consistency during thematic evolution, as well as limited impact to changing
feature code. Making a change to the primary color within an application only
needs to happen once within the design tokens, and it trickles everywhere
through the application.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="rapid-development">Rapid Development</h3>
<p>By leveraging Theme First UI Development, designers and developers don&#x27;t need to
spend time picking out stylistic elements of the feature, and instead can focus
on developing a better customer experience. When you don&#x27;t design or develop
against a set theme or collection of design tokens you can end up spending a
majority of the time finding the right color, or font size for your feature,
instead of spending that time iterating on the value you are delivering to the
user.</p>
<p>These are a collection of the core benefits of Theme First UI Development, but
there are many more as well. Feel free to share some of the benefits you find
with this approach on <a href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Twitter</a>.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/theme-first-ui-development.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Deploying Automatically using GitHub Actions]]></title>
            <link>https://matthamlin.me//2019/june/deploying-with-github-actions</link>
            <guid>https://matthamlin.me//2019/june/deploying-with-github-actions</guid>
            <pubDate>Sun, 02 Jun 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently picked up a Pixel Slate computer/tablet (I might write a short review
for it but in the meantime check out
<a href="https://twitter.com/immatthamlin/status/1133865845854232577?s=20" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this thread</a>)
and I wanted to see if I could configure my personal site, this site, so I could
write a blog post, publish and deploy it all from my new computer. I also
haven&#x27;t setup the linux partition on the device yet either so I wanted to be
able to do all of this from within Chrome.</p>
<p>Before I dive into how I setup this flow, I wanted to provide some insight into
this site. Its a Gatsby site, where most of my posts are authored using MDX,
feel free to check out the source code for the site here:
<a href="https://github.com/hamlim/blog-2k19" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://github.com/hamlim/blog-2k19</a>. I am
also using Zeit&#x27;s <code>now</code> product to deploy the site and alias it to the current
url. In order to automate deployments I would need to have Gatsby build the
site, and then deploy using now.</p>
<p>A while back I signed up for the GItHub Actions beta, and somehow got access to
it too! I have been fumbling around with it for the past few weeks, not really
putting enough time into it to learn how to fully configure a workflow. So this
new challenge provided the necessity to actually learn how to configure these
workflows and actions.</p>
<p>At a high level, the mixed manual and automated process looks like this:</p>
<ul>
<li>Author blog posts in Notion in their web app</li>
<li>Carry the blog post over to Github, where I use their online IDE to add a new
entry</li>
<li>Open a PR with the new blog post, review it for any grammar issues, typos, etc</li>
<li>Merge the PR to master</li>
<li>Kickoff a push GitHub workflow that does the following<!-- -->
<ul>
<li>Filter out pushes to other branches, so it only runs on master</li>
<li>Install dependencies using Yarn</li>
<li>Run <code>yarn build</code></li>
<li>Deploy using <code>now</code></li>
<li>Alias the site using a local now.json file in the repo to my
<a href="https://matthamlin.me" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">matthamlin.me</a> domain</li>
</ul>
</li>
<li>See the updated content on the public site!</li>
</ul>
<p>I am using the following actions created by several others available on the
Actions marketplace:</p>
<ul>
<li>GitHub Action for Yarn:
<a href="https://github.com/nuxt/actions-yarn" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://github.com/nuxt/actions-yarn</a></li>
<li>GitHub Action for Now:
<a href="https://github.com/actions/zeit-now" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://github.com/actions/zeit-now</a></li>
</ul>
<p>Check out the
<a href="https://github.com/hamlim/blog-2k19/blob/master/.github/main.workflow" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">workflow here</a>!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/deploying-with-github-actions.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Simpler and Smaller]]></title>
            <link>https://matthamlin.me//2019/june/simpler-and-smaller</link>
            <guid>https://matthamlin.me//2019/june/simpler-and-smaller</guid>
            <pubDate>Sat, 01 Jun 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently picked up a Pixel Slate tablet/computer and I have really enjoyed
using it for a lot of random tasks that I do besides writing code (although I
can even write some code on it too). One of the things that it has been forcing
me to think about has been how I can get my blog setup to let me publish content
without needing to run a lot of developing tooling like Node, Gatsby, and many
other processes.</p>
<p>In the past I have put too much effort into making longer and longer blog posts,
putting a lot of emphasis around how I structure my thoughts and often getting
to the point where it feels like I have about 20% of the blog post content, and
then feel like I have 80% more work to do before publishing.</p>
<p>I think this new form of computing will let me focus on publishing faster, along
with publishing faster I also want to get over the writers block of feeling like
I need to fill up a longer blog post before hitting publish.</p>
<p>I will be looking at automating my blog build process so I can simply commit
some markdown files through GitHub&#x27;s web interface and have a push to master
automatically build and deploy the site.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/simpler-and-smaller.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Maintenance Costs]]></title>
            <link>https://matthamlin.me//2019/may/maintenance-costs</link>
            <guid>https://matthamlin.me//2019/may/maintenance-costs</guid>
            <pubDate>Sun, 19 May 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>One of the first large-scale projects I worked on at Wayfair as a software
engineer was on our first ever desktop Grid system. It was late 2016, maybe
early 2017 at that point, we had a shared mobile grid system that was using
Flexbox for alignment and spacing, however we did not yet have a layout system
for desktop browsers. Because we are an e-commerce company we still had to
support IE8 and other IE browsers, so we couldn&#x27;t just use the same mobile grid
we were using elsewhere.</p>
<p>I don&#x27;t remember exactly what made me do it, but I decided to pick up that work
to create a shared global grid system for our desktop web experiences. We
decided to use a progressive enhancement methodology and start with an
inline-block system for the grid and then enhance to using Flexbox for the
browsers that supported it. At the time this was a big step forward for us, many
of our features were not using Flexbox for layouts, floats were the most common
solutions that other frontend developers were using.</p>
<p>Setting the scene a bit, in early 2017 Wayfair was still using two separate
codebases for our mobile web and desktop web experiences, responsive design was
still questioned heavily by design, engineering and product. Our styles,
authored in scss, were authored in two separate files for the mobile web and
desktop features. Our bundler would then determine the user agent and serve up
the appropriate styles to the customers browser.</p>
<p>When we started work on the desktop grid system, we aimed to fit the same model
that mobile web was using as future looking development for teams to begin
building responsive layouts using the same grid systems. So we started from the
mobile web grid, using Flexbox as the backbone and then added in an
inline-block + font-size 0 fallback system for older IE. We actually even
started by wrapping our flexbox system behind an <code>@supports</code> &quot;barrier&quot;, so even
browsers like IE10 and IE11 wouldn&#x27;t get the Flexbox based grid. This was a
mechanism to avoid common flex-bugs that existed within these browsers at the
time. At this time, we also added support for responsive column widths, meaning
some columns could take up half the width of the grid on mobile and then take up
a third or a fourth of the grid on desktop.</p>
<p>Over the two years since we first released the universal grid system for our
frontend at Wayfair, we have slowly been adopting new technologies and patterns.
During that time we shifted from using mustache templates to writing our code
using React and components. We ported the Grid system over to a set of reusable
components that developers can build layouts with, we pulled out useful parts of
the grid into smaller atomic components for building simpler layouts as well
(what we call the Block and Flex components for adding spacing and flexbox
layout support).</p>
<p>Through these past two years the majority of the fundamentals of the Grid have
remained solid, we haven&#x27;t rewritten the whole grid system just yet, but we have
slowly been adding to the system. Adding new features, all the while keeping the
existing API working for those really old pages still using the initial versions
of the Grid for their layout. Over time this has made the code more and more
unmaintainable for engineers, often when we find a ticket to add a new feature
to the Grid we find ourselves putting that work off. Hoping that we will come up
with an elegant solution to this mess of code.</p>
<p>Its gotten to the point that a change to our grid system, will cause a 1-2
minute scss compile for the grid styles alone üò±. Putting that into scale, the
Grid is currently around 500 total lines of scss code. That code uses a lot of
maps, loops, variables, conditionals, dynamic classname construction and many
other scss language features that we don&#x27;t use elsewhere within our massive
codebase.</p>
<p>I think a pessimistic takeaway from this is that all code becomes tech debt over
time, maintenance costs on code increase as time grows. While this code has
accrued its fare share of technical debt, it has also stood the test of time.
It&#x27;s largely the same API as it was when we first implemented it, and for the
most part has held the test of time.</p>
<p>As software engineers, we aim to write code that has the lowest maintenance cost
as possible, often we do this because we will end up maintaining that system in
the future. However, its difficult to find the right abstraction the when you
first write the code for the feature. It takes time to understand how the system
will work, to evaluate how consumers of the API will expect it to work, and to
also see how the systems around that change.</p>
<p>Accepting maintenance costs for authored code is the first step to understanding
that you don&#x27;t need the perfect abstraction. The beauty of software is that it
continuously evolves over time, the patterns we use today to architect a
solution will most likely not be the same as the ones we use next year, or 10
years from now.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/maintenance-costs.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Snapshot Testing]]></title>
            <link>https://matthamlin.me//2019/march/snapshot-testing</link>
            <guid>https://matthamlin.me//2019/march/snapshot-testing</guid>
            <pubDate>Fri, 01 Mar 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>The other day I noticed this really succinct and to the point tweet about
snapshot tests from Mark Dalgleish:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><div lang="en" dir="ltr"><p>Just deleted all component snapshot tests from our React component
library‚Äîin favour of<!-- --> <!-- -->
<a href="https://twitter.com/chromaui?ref_src=twsrc%5Etfw">@chromaui</a> <!-- -->
screenshot tests.</p><br/><br/><p>We were snapshotting component markup in isolation, outside of a browser, without
styles. We weren&#x27;t testing the output. We were testing implementation details.
‚Äî Mark Dalgleish (@markdalgleish) <a href="https://twitter.com/markdalgleish/status/1100164862796214272?ref_src=twsrc%5Etfw">February 25, 2019</a></p></div></blockquote></div>
<p>The valuable insight here being the following:</p>
<blockquote>
<p>We were snapshotting component markup in isolation, outside of a browser,
without styles. We weren&#x27;t testing the output. We were testing implementation
details.</p>
</blockquote>
<p>When I started working with Jest and snapshot testing I thought it was one of
the coolest things ever. It felt like I was adding meaningful code coverage to
my code, when in reality I was only testing the implementation details of it.</p>
<p>Over time I started to realize that the tests I was adding were only adding more
friction to the work I was doing. Since then I have been slowly removing
snapshot tests from my code whenever I make a change that causes the snapshot
tests to fail.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/snapshot-testing.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[useReducer, don't useState]]></title>
            <link>https://matthamlin.me//2019/february/why-you-should-useReducer</link>
            <guid>https://matthamlin.me//2019/february/why-you-should-useReducer</guid>
            <pubDate>Sun, 10 Feb 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote>
<p>This blog post assumes you have a decent initial understanding of React Hooks.
I highly suggest starting with the
<a href="https://reactjs.org/docs/hooks-intro.html" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">ReactJS Docs</a> on them first.</p>
</blockquote>
<p>As developers start adopting React Hooks within their applications, many will be
tempted to start with <code>useState</code> as their state management preferences for local
component state. However, I would like to try an convince you that <code>useReducer</code>
is a better way to manage local state.</p>
<p>Lets start of with defining &quot;better&quot; in my premise from above, the definition I
will use for this article will be that its:</p>
<ul>
<li>Easier to manage larger state shapes</li>
<li>Easier to reason about by other developers</li>
<li>Easier to test</li>
</ul>
<p>So lets break down each of these three points.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="easier-to-manage-larger-state-shapes">Easier to manage larger state shapes</h3>
<p>As with most of this blog post, this is mostly my opinion, however because
<code>useState</code> no longer shallowly merges state updates like it does within classes,
using a reducer function gives you the developer more control over the state
merging.</p>
<p>As an example of this expresivity that a reducer gives us, we can <code>useReducer</code>
to implement an undo/redo state management solution<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> init</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">initialState</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    past</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [],</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    present</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> initialState</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    future</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [],</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> reducer</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> action</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> past</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> future</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> present</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> state</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  switch</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">action</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">type</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    case</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">UNDO</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">:</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">      const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> previous</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> past</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">past</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">length</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">      const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> newPast</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> past</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">slice</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> past</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#998418;--shiki-dark:#B8A965">length</span><span style="color:#AB5959;--shiki-dark:#CB7676"> -</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        past</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> newPast</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        present</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> previous</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        future</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">present</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> ...</span><span style="color:#B07D48;--shiki-dark:#BD976A">future</span><span style="color:#999999;--shiki-dark:#666666">],</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      };</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    case</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">REDO</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">:</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">      const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> next</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> future</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">      const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> newFuture</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> future</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">slice</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">1</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        past</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [...</span><span style="color:#B07D48;--shiki-dark:#BD976A">past</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> present</span><span style="color:#999999;--shiki-dark:#666666">],</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        present</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> next</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        future</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> newFuture</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      };</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    default</span><span style="color:#999999;--shiki-dark:#666666">:</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> state</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Using this reducer we can keep track of a stack of states that happen in the
future and in the past, allowing the user to undo and redo their actions.</p>
<p>This would be fairly difficult to coordinate using <code>useState</code>, thats not to say
that its impossible but the benefit of <code>useReducer</code> is the explicitness of this
pattern. Which leads into the second point.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="easier-to-reason-about-by-other-developers">Easier to reason about by other developers</h3>
<p>Probably a topic for another blog post, but there is no such thing as a
tech-only problem in web development. Frequently, you will be building features
with other developers, that have a wide variety of experience different from
your own.</p>
<p>This is mostly a more generic topic that permeates through other topics than
just React Hooks, but the general take-away with the benefit of <code>useReducer</code>
over <code>useState</code> is it builds on the concepts that many developers learned
working with Redux within React applications<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->2</span></button></span><sup id="fn-2" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-2" class="text-primary hover:underline focus:underline">[<!-- -->2<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>. The concept
of dispatching an action and having your reducer handle the state updating logic
will allow these developers to more easily grasp this method of state management
over <code>useState</code>.</p>
<p>One thing to note in this reasoning, is that even if you are building a project
all by yourself, you can consider the future you that comes back to work on the
project as another engineer.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="easier-to-test">Easier to test</h3>
<p>If there is one general topic that I have seen the most in discussions on the
original Hooks RFC, or the React repo since the 16.8 release, or even on Twitter
its how developers are really confused with how to test Hooks. I think it might
take developers a while to learn how best to test their hooks and components
using hooks, however the beauty of the <code>useReducer</code> hook, is that all your
business logic for updating the state can exist in a separate function that is
exported separately from your component.</p>
<p>This separation of the state updating logic and rendering logic, allows you to
author tests for the state updating separate from the component rendering tests.
Using our reducer from the above snippet, we can easily test the logic for
undoing and redoing actions simply by calling our <code>reducer</code> function from with
the test using some mocked state, and an action. We don&#x27;t even need to <code>import</code>
or use react at all within our test!</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#59873A;--shiki-dark:#80A665">test</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">it supports undoing the state</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> state</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    past</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [{</span><span style="color:#998418;--shiki-dark:#B8A965"> count</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666"> }],</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    present</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#998418;--shiki-dark:#B8A965"> count</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    future</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [],</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> newState</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> reducer</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#998418;--shiki-dark:#B8A965"> type</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">UNDO</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666"> });</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  expect</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">newState</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">present</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#999999;--shiki-dark:#666666">).</span><span style="color:#59873A;--shiki-dark:#80A665">toBe</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">});</span></span></code></pre>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="in-summary">In Summary</h3>
<p>I don&#x27;t expect to persuade most developers to only ever <code>useReducer</code> over
<code>useState</code>, nor do I personally expect to only ever use the <code>useReducer</code> hook
over <code>useState</code>, they both have benefits and fallbacks that depend entirely upon
their use. However, I do think that <code>useReducer</code> when used as a replacement for
complex state management happening within an old class based component or
replacing a react-redux setup can be more maintainable.</p>
<hr/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Implementation taken from<!-- --> <!-- -->
<a href="https://redux.js.org/recipes/implementing-undo-history">Redux
Docs</a></p>
<p id="fnref-2" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-2" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I do think there will still be a shift from developers used to
Redux getting into Hooks however, as middleware solutions like <code>redux-thunk</code>
will need to be re-implemented using <code>useEffect</code>.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/why-you-should-useReducer.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Hooks Tips Ep. 2 - Migrating Instance Variables]]></title>
            <link>https://matthamlin.me//2019/february/hooks-tips-instance-variables</link>
            <guid>https://matthamlin.me//2019/february/hooks-tips-instance-variables</guid>
            <pubDate>Tue, 05 Feb 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote>
<p>This blog post is part of a series on hooks, this blog post assumes you have a
decent initial understanding of React Hooks. I highly suggest starting with
the <a href="https://reactjs.org/docs/hooks-intro.html" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">ReactJS Docs</a> to learn more.</p>
</blockquote>
<p>Frequently, <code>class</code> based components can have a decent number of instance
variables on them that are unrelated to state or props. These might be used to
store refs for elements, or other data that you may need within the component.</p>
<p>These values are useful to store on the instance because updating them does not
trigger a re-render of the component. Here is an example of a class based
component that uses a few instance methods (<em>Note</em>: This is using a non-standard
JavaScript syntax to assign the instance variables.):</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> InstanceComponent</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  someTimer</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  inputRef</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  data</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    someData</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      foo</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">bar</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // ...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>When migrating to Hooks, React offers the <code>useRef</code> hook, which is a convenient
way to store some mutable data through the lifecycle of a component.</p>
<p>Lets take a look at what this looks like with hooks:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> HookComponent</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> someTimer</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">useRef</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#AB5959;--shiki-dark:#CB7676">null</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> data</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">useRef</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    someData</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      foo</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">bar</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Note, the inputRef is just a regular old element ref</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // in this case, so we can use `createRef` which will assign</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // the instance for us. We could also still use `useRef` here and it</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // will continue to work as expected!</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> inputRef</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">createRef</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Cool, but when I attempt to access <code>data.someData.foo</code> I get an error, what
gives?</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> HookComponent</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> data</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">useRef</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    someData</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      foo</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">bar</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // ‚ö†Ô∏è This will throw an error:</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Unable to access foo of undefined</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  console</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">log</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">data</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">someData</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">foo</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Well, <code>useRef</code> returns you a wrapper around your current value:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">console</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">log</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">data</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// { current: { someData: { foo: &#x27;bar&#x27; } } }</span></span></code></pre>
<p>We can conceptualize this like the return value of calling <code>React.createRef()</code>,
where our variable is accessible on the <code>current</code> property.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="avoid-large-ref-values">Avoid Large Ref Values</h3>
<p>This is more of a preference than an actual bug/issue within the code, however
it may be tempting to convert your instance variables all down to a single
<code>useRef</code> call:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> UglyHooksComponent</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> instance</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">useRef</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    someTimer</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    inputRef</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">createRef</span><span style="color:#999999;--shiki-dark:#666666">(),</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    data</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      someData</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        foo</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">bar</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  });</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>While this may look beneficial, and may be easier to access the properties, it
makes it potentially more difficult to split up the logic into separate hooks.</p>
<p>In general, <strong>always prefer to keep <code>useRef</code> (and <code>useState</code>) calls limited in
scope</strong>, and bias towards hook composition instead.<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup></p>
<p>From our first example above, we may want to split the timer instance variable
into a custom <code>useTimer</code> hook that our component can leverage, and the
<code>inputRef</code> can be accomplished using just a top level <code>createRef</code>.</p>
<p>For additional insight into how to <code>useRef</code>, refer to the
<a href="https://reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">ReactJS Docs</a></p>
<p><em>Thanks to Dillon Curry for reviewing an earlier version of this post</em></p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I should write yet another blog post about why I have this preference, but for
now feel free to accept it as a pattern.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/hooks-tips-instance-variables.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Hooks Tips Ep. 1 - The Dependency Array]]></title>
            <link>https://matthamlin.me//2019/february/hooks-tips-dependency-array</link>
            <guid>https://matthamlin.me//2019/february/hooks-tips-dependency-array</guid>
            <pubDate>Sat, 02 Feb 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote>
<p>This blog post is the first in what I expect to be a series on hooks, this
blog post assumes you have a decent initial understanding of them. I highly
suggest starting with the
<a href="https://reactjs.org/docs/hooks-intro.html" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">ReactJS Docs</a> on them first.</p>
</blockquote>
<p>Some of the built-in hooks from the React package expose a second argument which
acts as an indicator or signal to React to determine if the function provided as
the first argument to the hook should be invoked again.</p>
<p>In this post I will only reference <code>useEffect</code>, however there are several hooks
which follow this pattern:</p>
<ul>
<li><code>useMemo</code></li>
<li><code>useCallback</code></li>
</ul>
<p>In general, the notes below will apply to these other hooks as well.</p>
<p>I have also ordered the examples below based off of how frequently they will
most likely be used, the first being the most frequent example and the last
being the least frequently used.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="passing-dependencies">Passing Dependencies:</h3>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> App</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> setCount</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> useState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // Gets called on initial render, and every time `count` changes</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#999999;--shiki-dark:#666666">]);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>This example may be the most frequent example of using the <code>useEffect</code> hook,
here we indicate to React that the function we provided to <code>useEffect</code> depends
on the <code>count</code> variable from the components own scope. React will then track the
<code>count</code> variable, and call the effect function when the <code>count</code> value changes.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="an-empty-dependency-array">An Empty Dependency Array:</h3>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> App</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // Only gets called when the component &quot;mounts&quot;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span><span style="color:#999999;--shiki-dark:#666666"> []);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>This example will call the function provided to <code>useEffect</code> only on the
components first render. This can be useful for cases like tracking when a
component renders, or fetching some initial data that doesn&#x27;t depend on any
other values.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="no-dependency-array">No Dependency Array:</h3>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> App</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  useEffect</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // Gets called on every re-render of the App component</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  });</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>This will cause the function provided to <code>useEffect</code> to be called on every
render of the App component.</p>
<p><strong>This should be used rarely within regular code</strong>, frequently the function
provided in this case is actually dependent on some value from the parent scope
of the component and should be included in the array of dependencies like shown
below.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/hooks-tips-dependency-array.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Building a Live Editor]]></title>
            <link>https://matthamlin.me//2019/february/building-a-live-editor</link>
            <guid>https://matthamlin.me//2019/february/building-a-live-editor</guid>
            <pubDate>Fri, 01 Feb 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>As I have been working on my personal blog, I wanted to include the ability to
edit code on site, and also preview it live. I started using
<a href="https://github.com/FormidableLabs/react-live" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">react-live</a> which I have had
prior experience using and setting up, however I wanted to customize the theme
of the editor a bit and try to work on a new and challenging task over the
weekend.</p>
<p>So I decided to build <code>@matthamlin/react-preview-editor</code>
(<a href="https://github.com/hamlim/react-preview-editor" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">see the project here</a>).</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="starting-off-with-executing-code">Starting Off with Executing Code</h2>
<p>I started off by looking at the source of react-live to figure out how they are
able to actually call the code that you edit inline. It turns out, that they use
the <code>new Function</code> contructor to pass the code as a string along with an
assortment of the keys of the things within scope for the code, and then call
the function.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> evaluateCode</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> scope</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // scope looks like this: { variableName: &#x27;value&#x27; }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // construct a new function with the code</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> func</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> Function</span><span style="color:#999999;--shiki-dark:#666666">(...</span><span style="color:#B07D48;--shiki-dark:#BD976A">Object</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">keys</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">scope</span><span style="color:#999999;--shiki-dark:#666666">),</span><span style="color:#B07D48;--shiki-dark:#BD976A"> code</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Call the function</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  func</span><span style="color:#999999;--shiki-dark:#666666">(...</span><span style="color:#B07D48;--shiki-dark:#BD976A">Object</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">values</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">scope</span><span style="color:#999999;--shiki-dark:#666666">));</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>This allows us to evaluate code that the user types within the editor on the
site, and probably goes without saying but could be a really bad‚Ñ¢Ô∏è thing to do
with live user input.</p>
<p>So now that we know how to actually execute the users code, how do we build the
editor part?</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="the-code-editor">The Code Editor</h2>
<p>Well that part is actually pretty simple, because other awesome developers out
there, have already shared open source projects for editing code within the
browser. Since I wanted to keep the project fairly small, I went with
<a href="http://satya164.xyz/react-simple-code-editor/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">react-simple-code-editor</a>.</p>
<p>This editor allows me to control the highlighting of the code complete, and also
is really easy to just start using:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Editor</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Give it a value</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  value</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Handle changes to the code</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  onValueChange</span><span style="color:#999999;--shiki-dark:#666666">={(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#59873A;--shiki-dark:#80A665"> updateCode</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">)}</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Provider it a function that returns a string or a React Node</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // to highlight the code</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  highlight</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">highlighter</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">/&gt;;</span></span></code></pre>
<p>Great, so we have a way to execute the code, and a way to edit the code, what
about the syntax highlighting though?</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="highlighting-the-code">Highlighting the Code</h2>
<p>Well we are just as lucky as we were before, thanks to the
<a href="https://github.com/FormidableLabs/prism-react-renderer" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">prism-react-renderer</a>
library, we are able to use a React wrapping API around the <code>prismjs</code> library.</p>
<p>This ends up looking like:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// This is the same function we pass to the Editor component above</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> highlighter</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Highlight</span><span style="color:#999999;--shiki-dark:#666666"> {...</span><span style="color:#B07D48;--shiki-dark:#BD976A">defaultProps</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B07D48;--shiki-dark:#BD976A"> code</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B07D48;--shiki-dark:#BD976A"> language</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">jsx</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {({</span><span style="color:#B07D48;--shiki-dark:#BD976A"> className</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> style</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> tokens</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> getLineProps</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> getTokenProps</span><span style="color:#999999;--shiki-dark:#666666"> })</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">pre</span><span style="color:#B07D48;--shiki-dark:#BD976A"> className</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">className</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B07D48;--shiki-dark:#BD976A"> style</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">style</span><span style="color:#999999;--shiki-dark:#666666">}&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">          {</span><span style="color:#B07D48;--shiki-dark:#BD976A">tokens</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">map</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">line</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> i</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#999999;--shiki-dark:#666666"> {...</span><span style="color:#59873A;--shiki-dark:#80A665">getLineProps</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#B07D48;--shiki-dark:#BD976A"> line</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#998418;--shiki-dark:#B8A965"> key</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> i</span><span style="color:#999999;--shiki-dark:#666666"> })}&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">              {</span><span style="color:#B07D48;--shiki-dark:#BD976A">line</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">map</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">token</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> key</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">                &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">span</span><span style="color:#999999;--shiki-dark:#666666"> {...</span><span style="color:#59873A;--shiki-dark:#80A665">getTokenProps</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#B07D48;--shiki-dark:#BD976A"> token</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> key</span><span style="color:#999999;--shiki-dark:#666666"> })}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">              ))}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">            &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">div</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">          ))}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">pre</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      )}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">Highlight</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="wrapping-up">Wrapping Up</h2>
<p>So wrapping it all up, we end up with an API that looks like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> transform</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">@babel/standalone</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Editor</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Preview</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Provider</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">@matthamlin/react-preview-editor</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">function</span><span style="color:#59873A;--shiki-dark:#80A665"> transformCode</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#59873A;--shiki-dark:#80A665"> transform</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    presets</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> [[</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">stage-0</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#998418;--shiki-dark:#B8A965"> decoratorsLegacy</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666"> }],</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">],</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }).</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> code</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">function App() {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  return (</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    &lt;p&gt;Code Here!&lt;/p&gt;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  )</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">};</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">render(&lt;App /&gt;);</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> App</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Provider</span><span style="color:#B07D48;--shiki-dark:#BD976A"> code</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">code</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B07D48;--shiki-dark:#BD976A"> transformCode</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">transformCode</span><span style="color:#999999;--shiki-dark:#666666">}&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Preview</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Editor</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">Provider</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Be sure to checkout the project here:
<a href="https://github.com/hamlim/react-preview-editor" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">github.com/hamlim/react-preview-editor</a>
on GitHub (make sure to ‚≠ê it too üòÜ).</p>
<p>And check it out in CodeSandbox <a href="https://codesandbox.io/s/wk69q5zv9k" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">here</a>.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/building-a-live-editor.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Start Small, Accept Change]]></title>
            <link>https://matthamlin.me//2019/february/start-small</link>
            <guid>https://matthamlin.me//2019/february/start-small</guid>
            <pubDate>Fri, 01 Feb 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>As I have grown into a more experienced web developer, I have been thinking a
lot more about this tweet by Joel Hooks:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><div lang="en" dir="ltr"><p>There‚Äôs a tendency to jump straight to step 32 of the ‚Äúnew thing‚Äù vs
focusing on steps 1 and 2. <br/>
‚Äúwhat‚Äôs the next smallest step that we can do?‚Äù <br/>
Skipping to the end can often lead to failure and hard feelings when you‚Äôve
put in a lot of work and it gets a üëé
Baby steps. üê£
‚Äî Joel üåß (@jhooks) <a href="https://twitter.com/jhooks/status/1014615428897824768?ref_src=twsrc%5Etfw">
July 4, 2018</a></p></div></blockquote></div>
<p>I could spend the better part of a weekend just enumerating all the times that I
jumped to a solution for a problem I was working on at the
time.<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup> Skipping past the the important groundwork of
framing the problem space, and evaluating, as well as reevaluating, the problem.</p>
<p>Its difficult as an engineer, to have the patience to step back and reevaluate a
problem before jumping to a solution. It takes a lot of critical thinking to
determine what the actual ask is for a new feature, or what the cause of a bug
might be.</p>
<p>The first thing I would generally suggest to new or junior developers is to take
a step back from the problem before diving into it with a concept for a
solution.</p>
<p>That can either take the form of getting up to go for a walk, grabbing a cup of
coffee or tea, or even just sleeping on it to approach from a clear headed
state.</p>
<p>In general, I think there are two constants in software engineering (especial
web development):</p>
<ol>
<li><strong>Everything changes</strong></li>
<li><strong>Most difficult technology problems are actually people problems at the
root</strong><span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->2</span></button></span><sup id="fn-2" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-2" class="text-primary hover:underline focus:underline">[<!-- -->2<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup></li>
</ol>
<p>As with most advice however, the key takeaway here is that things change,
specifically <strong>code will change</strong>. Don&#x27;t feel like you need to write the correct
solution the first time you attempt to solve a problem.</p>
<p>Frequently, on your way to that 32nd step in developing your feature or
application, you will encounter steps 5, 18, and 27 where you throw out all your
current work and rewrite it from the ground up because you discovered another
pattern or stumbled across some other insight into your work.</p>
<p>Its ok to accept these rewrites, because if you skipped them and jumped to step
32, you might have missed out on those opportunities to learn more about what
you were building.</p>
<p>As I was chipping away at the concepts behind this blog post, I was reminded of
the many long summers growing up around the house as a kid helping my dad on
some of his small construction projects. These projects varied, and including
building out a new back deck, building out a new front deck, redoing our siding,
or the multitude of other projects. The part I remembered the most was a saying
that my dad taught me:</p>
<blockquote>
<p>&quot;Measure twice, cut once&quot;</p>
</blockquote>
<p>It didn&#x27;t really resonate with me too much when I was a little kid, I thought it
only applied to construction, however I have now realized that it applies to a
lot of things in life as well.</p>
<p>I do think though, that there were a few parts missing from this wisdom, and I
would generally expand it to be:</p>
<blockquote>
<p>&quot;Measure twice, cut once. Always prepare to buy more lumber.&quot;</p>
</blockquote>
<hr/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->A part of me would like to think that I have gotten better at the skill of not
skipping that groundwork, but I know I still do make the same mistakes.</p>
<p id="fnref-2" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-2" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->I should really write up a post all on its own on this point</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/start-small.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[React Error Boundaries]]></title>
            <link>https://matthamlin.me//2019/january/react-error-boundaries</link>
            <guid>https://matthamlin.me//2019/january/react-error-boundaries</guid>
            <pubDate>Thu, 31 Jan 2019 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>The other week I got an email from a developer wondering if I could help them
learn more about Error Boundaries within React.</p>
<p>I figured that instead of sharing that information directly to them, I would
spend a bit more time writing it up in a blog post so others could learn from
the content as well. This post is only meant as a brief introduction to the
concept behind Error Boundaries within React, for more advanced information
refer to the where can I learn more section at the bottom of the page.</p>
<p>So lets dive in!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="what-are-error-boundaries">What are Error Boundaries?</h2>
<p>Simply put, you can think of Error Boundaries as <code>try ... catch</code> blocks within a
component tree. This is an example of a try catch block:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">try</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  doSomethingThatMayThrow</span><span style="color:#999999;--shiki-dark:#666666">();</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> catch</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">error</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  handleError</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">error</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>In that snippet above, the <code>doSomethingThatMayThrow</code> function can <code>throw</code>
anything (generally an error) and the <code>catch</code> block will capture this thrown
value and continue script execution.</p>
<p>In React this would look like something like the following:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">ErrorBoundary</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">ComponentThatMayThrow</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">ErrorBoundary</span><span style="color:#999999;--shiki-dark:#666666">&gt;;</span></span></code></pre>
<p>Great, so we have a rough understanding of what they look like in practice, but
how do they actually work?</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="how-do-error-boundaries-work">How do Error Boundaries Work?</h2>
<p>An error boundary can be implemented within any component that uses either the:</p>
<ul>
<li><code>componentDidCatch</code> or</li>
<li><code>getDerivedStateFromError</code></li>
</ul>
<p>lifecycle methods. Both of these methods allow the component to catch an error
thrown from its children.</p>
<p>So lets setup a simple generic Error Boundary component.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ErrorBoundary</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  state</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    hasCaughtError</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> false</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  componentDidCatch</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">error</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">    this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">setState</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#998418;--shiki-dark:#B8A965"> hasCaughtError</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#1E754F;--shiki-dark:#4D9375"> true</span><span style="color:#999999;--shiki-dark:#666666"> });</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  render</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">hasCaughtError</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">p</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">Oh no, an error has occurred</span><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">p</span><span style="color:#999999;--shiki-dark:#666666">&gt;;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">children</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>In this component above, whenever some component anywhere within its children
throws an error, React will propagate that error up to this component, and call
its <code>componentDidCatch</code> lifecycle method with the error that was thrown.</p>
<p>This component can then setState to change the children returned from render in
order to recover from that thrown error.</p>
<h2 id="caveats">Caveats</h2>
<p>As with most things, there are some caveats with this workflow. The first and
most notable, is that this component will only catch errors thrown during the
<code>render</code> phase. This means that if an error occurs within a callback that is not
a <code>setState</code> updater, the error boundary component will not catch it.</p>
<p>Another caveat, or feature I guess is that if you do want to catch a particular
error from an event handler higher up in the component tree at your error
boundary, you can <code>throw</code> from within a setState:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Component</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Example</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#59873A;--shiki-dark:#80A665"> Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  handleChange</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">e</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    let</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">      target</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> value</span><span style="color:#999999;--shiki-dark:#666666"> },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> e</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">    this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">setState</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">includes</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">foo</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">))</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">        throw</span><span style="color:#AB5959;--shiki-dark:#CB7676"> new</span><span style="color:#59873A;--shiki-dark:#80A665"> Error</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Error!</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    });</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  render</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">input</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        onChange</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">handleChange</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        placeholder</span><span style="color:#999999;--shiki-dark:#666666">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">Try typing here!</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        style</span><span style="color:#999999;--shiki-dark:#666666">={{</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">          height</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 35</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">          fontSize</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 18</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">          width</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">calc(100% - 2em)</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">          padding</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">1rem</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="a-note-on-getderivedstatefromerror">A note on getDerivedStateFromError</h2>
<p>The <code>getDerivedStateFromError</code> lifecycle was introduced later than the
<code>componentDidCatch</code> lifecycle, and operates on a similar mechanism as the
<code>getDerivedStateFromProps</code> lifecycle method in that it is a single pass handler.
This means that React is able to reconcile the error handling within the same
rendering batch as when the error occurs, <em>I think</em>. I don&#x27;t really understand
what this actually means however, so take this with a grain of salt üßÇ .</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="where-can-i-learn-more">Where can I learn more?</h2>
<p>As always, the ReactJS first party docs site is hands down one of the best
resources out there about React. Here is a great
<a href="https://reactjs.org/docs/error-boundaries.html#introducing-error-boundaries" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">getting started</a>
introduction to Error Boundaries on the ReactJS Docs.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/react-error-boundaries.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Starting Fresh]]></title>
            <link>https://matthamlin.me//2018/december/starting-fresh</link>
            <guid>https://matthamlin.me//2018/december/starting-fresh</guid>
            <pubDate>Wed, 05 Dec 2018 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Over the past two years or so I think I have tried to rewrite my personal site
about 3 or 4 times. Each time with the same goal of making a simple blogging
platform that gets out of the way and just lets me focus on the writing.</p>
<p>Since I find myself with two weeks off of work and its the end of the year /
beginning of the next year I figured I would go for another rewrite this time
with the long term goal of doing the following:</p>
<ul>
<li>Get the bootstrapping work out of the way and focus on the writing</li>
<li>Use this as an opportunity to test out personal projects like <code>native-bundler</code>
and <code>reroute</code></li>
<li>Be easy to setup and get running with simple additions as I go forward (i.e.
scale out from an initial product)</li>
</ul>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="where-to-start">Where to start?</h2>
<p>A few months ago I was planning on kicking off this rewrite within the same repo
and site that I have currently, I started by updating to emotion v10, swapping
react-router for reach router and changing all my old content from markdown to
mdx.</p>
<p>This was all too much work to do as part of a rewrite and I begin to question
the benefit of doing such a task.</p>
<p>I decided the other day that it would be a lot simpler to just drop all the
current infrastructure I had around my previous blog and just start fresh.</p>
<p>My hope is that without all the technical debt the previous site had, I could
get this one into a decent spot without much work and focus on the writing.</p>
<p>So this new site is built using a node build script around 150 lines in total,
building off of the awesome work around the MDX language spec, <code>babel</code>,
<code>prettier</code>, and even <code>eval</code>!</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="what-to-do-next">What to do next</h2>
<ul class="contains-task-list">
<li class="task-list-item"><input type="checkbox" disabled="" checked=""/> <!-- -->Port over some of the front pages from my current site</li>
<li class="task-list-item"><input type="checkbox" disabled="" checked=""/> <!-- -->Make a build watch script</li>
<li class="task-list-item"><input type="checkbox" disabled="" checked=""/> <!-- -->Deploy to now (see if I can deploy as a subdomain on matthamlin.me)</li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/starting-fresh.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Testing Software]]></title>
            <link>https://matthamlin.me//2018/december/testing-software</link>
            <guid>https://matthamlin.me//2018/december/testing-software</guid>
            <pubDate>Sat, 01 Dec 2018 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<blockquote>
<p>Writing unit tests for code is surprisingly a hot button topic within software
development. Many developers have very strong opinions in how tests should be
approached, written, and implemented.</p>
</blockquote>
<p>Over the past few months, several of our engineering departments have been
pushing for more adoption of frontend tests for their code. Thanks to this push,
our Frontend Platforms team has found that we need to put a lot more effort into
the documentation around writing tests. Several engineers, from both our team
and other feature teams, have been writing docs, pairing with others to write
tests, and writing guides and presentations around unit testing.</p>
<p>Through all this work, we have slowly shifted our mindset from approaching
testing as something that is a consistent, unit-based, solid foundation for an
application to something that is a bit more fluid, a bit farther away from
testing each unit individually, and something that changes as the application
changes.</p>
<p>The key takeaway I have learned from a coworker is that the <strong>type</strong> and
<strong>value</strong> of the tests you write depends on if you are writing the code for the
application at the same time as the test or if you write the test after the
feature is code-complete.</p>
<blockquote>
<p>Writing tests before a code-complete feature is completely different from
writing them when the feature is done</p>
</blockquote>
<p>We have found that a lot of the pain points around writing unit tests are a
result of attempting to write unit tests after the feature is code complete and
deployed to production.</p>
<p>A lot of our other learnings have been so simply summarized by this tweet by
Guillermo Rauch:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><div lang="en" dir="ltr"><p>Write tests. Not too many. Mostly integration.
‚Äî Guillermo Rauch (@rauchg) <a href="https://twitter.com/rauchg/status/807626710350839808?ref_src=twsrc%5Etfw">December 10, 2016</a></p></div></blockquote></div>
<p>This short tweet is packed with so much wisdom, the core takeaways we have had
as a team have been:</p>
<ul>
<li>Don&#x27;t focus on code coverage</li>
<li>Prefer integration tests over unit tests</li>
</ul>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="dont-focus-on-code-coverage">Don&#x27;t Focus on Code Coverage</h2>
<p>Code coverage is one of those feel-good stats that we seek as developers, giving
us a rush when we see the coverage report come back with a higher percentage
than we had previously. Unfortunately it has absolutely no value to the end user
of your application.</p>
<blockquote>
<p>Users do not care what your code coverage percentage is</p>
</blockquote>
<p>You never see consumer products showcase these stats to their users in their
footers, nor have I ever seen another developer choose an npm dependency on
their code coverage percentage.</p>
<p>Your code will change, and your application will change as well, you shouldn&#x27;t
worry about how well covered the code is, and instead focus on how well the user
flow is covered. Do you have a test for that checkout flow on site? What about
for the user login flow? These are the things worth capturing coverage for, real
parts of the application and not the number of lines of code.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="prefer-integration-tests-over-unit-tests">Prefer Integration Tests over Unit Tests</h2>
<p>In my experience, preferring to write integration tests rather than unit tests
is even more contentious than the point above about code coverage, many
developers seem to extrapolate from TDD that tests must be focused to units of
code rather than writen for the larger picture of the feature or application as
a whole.</p>
<p>The tests that I have found that are worth keeping around over time are these
integration tests, ones that aren&#x27;t at all worried about the implementation of
the feature but rather the user flow through the feature.</p>
<p>The most important goal in software development (keep in mind writing tests is
part of this work) is to deliver a working, enjoyable experience for the
customer. Your customer won&#x27;t care about the implementation of the checkout
button, or if you are using some middleware for authentication. The key, when
writing code, is to think about the user. Sometimes your user may be another
developer using your service to implement another feature, or it may be a
customer looking to buy their favorite bed frame.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="the-half-life-of-code-and-tests">The Half-Life of Code and Tests</h2>
<p>I think the key for getting value out of software testing is not that you must
write integration tests through all stages of development, but rather that
<strong>over time</strong> the tests that should <strong>remain in the codebase</strong> should be scoped
as integration tests.</p>
<p>Many of the developers I have talked with consider tests as these solid, never
changing pillars of a codebase; however in my experience the type of tests, and
the value of these tests, changes dramatically depending on what I am doing. If
I am working on a refactor of a component for example, I may want to setup some
visual regression tests, then I can refactor with confidence, and when the
refactor work is done I can tear down the tests.</p>
<p>Unfortunately many of our modern testing tools don&#x27;t really communicate this
ephemerality of testing software, either through their implementation or through
their documentation. This leads new developers to approach writing tests as
something to do once, ship it and then forget it.</p>
<p>Often unit tests, those written to accomplish a code coverage goal or test a
particular implementation detail, add friction to development that so many
developers worry about when they try to get into testing their code. A good
mental model for tests is that often pure unit tests should have a short
half-life within the codebase, meaning they only exist for a short amount of
time (frequently only during the very early stages of a new feature or
application), and the half-life of integration tests is much longer and should
remain in the codebase for the lifetime of the feature.</p>
<blockquote>
<p>Unit tests should have a short half-life within your codebase, focus on code
that has a long half-life instead</p>
</blockquote>
<marquee class="mt-4"></marquee>
<hr/>
<marquee class="mt-4"></marquee>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/testing-software.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Suspense Plus GraphQL]]></title>
            <link>https://matthamlin.me//2018/november/suspense-plus-graphql</link>
            <guid>https://matthamlin.me//2018/november/suspense-plus-graphql</guid>
            <pubDate>Sun, 11 Nov 2018 15:04:00 GMT</pubDate>
            <description><![CDATA[A few thoughts on using Suspense with GraphQL to optimize application data loading]]></description>
            <content:encoded><![CDATA[<blockquote>
<p>Collocating GraphQL queries with components doesn&#x27;t mean that you need to
fetch data for every component in your app separately.</p>
</blockquote>
<p>One of the greatest features of adopting GraphQL in my opinion has been the
drive to colocate data requirements with the components that render that data,
this collocation has cut down on the hard split of container and presentational
components and has made it easier to develop features and applications in small
units of code (aka components).</p>
<p>One of the fears about this collocation of data fetching with components that i
have heard a few coworkers discuss has been the idea that having a lot of
components do data fetching all by themselves could lead to a lot of loading
spinners on the application during initial load. This fear derives from the idea
that if every component needs to fetch its own data then we would have hundreds
of components kicking of an Ajax request and we would have to wait for all the
requests to resolve before showing the whole application as it is meant to be
shown to the user.</p>
<p>I think there are two pretty simple ways to get over this fear, the first is
easy to accomplish today, and the second is how I see the future of collocated
data queries with components evolving to. Both of these examples are tightly
coupled to React and GraphQL libraries like Apollo, but could probably be
adopted by other view and data fetching libraries soon enough.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="current-day-resolved-data-fetching">Current Day Resolved Data Fetching</h2>
<p>The current day pattern to get over the need for showing a lot of spinners for
each component that needs to fetch data is to export the data requirement from
each component as a GraphQL fragment that a parent can import and resolve in a
large query.</p>
<p>This pattern would look something like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Leaf Component</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#999999;--shiki-dark:#666666"> ({</span><span style="color:#B07D48;--shiki-dark:#BD976A"> data</span><span style="color:#999999;--shiki-dark:#666666"> })</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#999999;--shiki-dark:#666666"> ...</span><span style="color:#999999;--shiki-dark:#666666"> )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> queryFragment</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> gql</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  fragment CommentsPageComment on Comment {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    id</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    postedBy {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">      login</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">      html_url</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    }</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    createdAt</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    content</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  }</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Parent component</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Leaf</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> queryFragment</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#B07D48;--shiki-dark:#BD976A"> leafFragment</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./leaf.js</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> appQuery</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> gql</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  query Comment($repoName: String!) {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    entry(repoFullName: $repoName) {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">      comments {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">        ...CommentsPageComment</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">      }</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    }</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  ${</span><span style="color:#B56959;--shiki-dark:#C98A7D">leafFragment</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> App</span><span style="color:#999999;--shiki-dark:#666666">({</span><span style="color:#B07D48;--shiki-dark:#BD976A">repoName</span><span style="color:#999999;--shiki-dark:#666666">})</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Query</span><span style="color:#B07D48;--shiki-dark:#BD976A"> query</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">appQuery</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#B07D48;--shiki-dark:#BD976A"> variables</span><span style="color:#999999;--shiki-dark:#666666">={{</span><span style="color:#B07D48;--shiki-dark:#BD976A"> repoName</span><span style="color:#999999;--shiki-dark:#666666"> }}&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      {()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#999999;--shiki-dark:#666666"> ...</span><span style="color:#999999;--shiki-dark:#666666"> )}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">Query</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  )</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>In this case each leaf component with some data dependencies exports the
component as the default and then exports a named export of the query fragment
that any parent can then either resolve in its own query, or forward on back up
to a grandparent via another export.</p>
<p>This is still a manual process of exporting the query as a fragment from each
component, but it makes the data contract of the component more explicit, and
allows the consumer of the component to determine how it wants to handle data
loading for the component.</p>
<p>Some of the flaws of this mechanism include:</p>
<ul>
<li>Manual query composition in the parent</li>
<li>Needing to pass down the props correctly to the leaf node</li>
</ul>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="future-state-resolved-data-fetching">Future State Resolved Data Fetching</h2>
<p>Now that we have looked at what the current patterns are for handling collocated
data requirements for components, lets take a peak at the potential future for
data loading with components. In this section we are going to talk about some
unstable API&#x27;s that are part of the React library, and the related unstable
React Cache library so some of this might change in the future.</p>
<p>So lets look at the above example and how it could be simplified using Suspense:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Leaf component</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> createQueryResource</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">future-graphql-library</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> query</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> createQueryResource</span><span style="color:#999999;--shiki-dark:#666666">(()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#59873A;--shiki-dark:#80A665"> gql</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  query Comment($repoName: String!) {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    entry(repoFullName: $repoName) {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">      comments {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">        id</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">        postedBy {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">          login</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">          html_url</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">        }</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">        createdAt</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">        content</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">      }</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    }</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  }</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  (</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> ({</span><span style="color:#998418;--shiki-dark:#B8A965"> repoName</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">repoName</span><span style="color:#999999;--shiki-dark:#666666"> })</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const</span><span style="color:#59873A;--shiki-dark:#80A665"> Fallback</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#999999;--shiki-dark:#666666"> ...</span><span style="color:#999999;--shiki-dark:#666666"> );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> duration</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 500</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> Comments</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> data</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> query</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">read</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// Parent component</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Comments</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  query</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#B07D48;--shiki-dark:#BD976A"> commentsQuery</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  Fallback</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#B07D48;--shiki-dark:#BD976A"> CommentsFallback</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  duration</span><span style="color:#1E754F;--shiki-dark:#4D9375"> as</span><span style="color:#B07D48;--shiki-dark:#BD976A"> CommentsDuration</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">./leaf.js</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> function</span><span style="color:#59873A;--shiki-dark:#80A665"> App</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  commentsQuery</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">preload</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Main</span><span style="color:#999999;--shiki-dark:#666666">/&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Suspense</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          maxDuration</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#B07D48;--shiki-dark:#BD976A">commentsDuration</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">          fallback</span><span style="color:#999999;--shiki-dark:#666666">={&lt;</span><span style="color:#998418;--shiki-dark:#B8A965">CommentsFallback</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">          &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Comments</span><span style="color:#999999;--shiki-dark:#666666"> {...</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> /&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Suspense</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  )</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">}</span></span></code></pre>
<p>In this example the comments component (leaf component) exports the following:</p>
<ul>
<li>A query resources</li>
<li>A fallback component</li>
<li>A duration</li>
<li>and the component itself</li>
</ul>
<p>These four things allow the parent consumer to preload the data requirement for
the component, as well as use opinionated fallbacks and loading durations for
the component. The parent component can decide to use local values for some
parts of the Suspense API wrapped around the leaf component if it chooses to do
so.</p>
<p>The future state ideal presented here might look like a bit more work than the
current day state, however it allows both the parent and the leaf components to
be more opinionated about their fallback states, as well as the loading
requirements.</p>
<p>No longer does the parent component need to know where to compose the data
fetching fragment exported from the leaf component, and it also doesn&#x27;t need to
worry about what values the leaf components query relies upon, it can forward
all props down to the resource from the leaf.</p>
<p>This API enables a tighter coupling between a component and the data it
requests, and also allows parent components to decide when and if they will
preload the data requirements for a leaf component or if it doesn&#x27;t need to
preload those data requirements.</p>
<p>Ultimately the new Suspense and Concurrent React APIs in conjunction with
GraphQL will offer more unique ways to allow developers to fetch data
requirements while also taking the pain out of managing loading states for those
data requirements.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/suspense-plus-graphql.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Missing Detail]]></title>
            <link>https://matthamlin.me//2018/november/missing-detail</link>
            <guid>https://matthamlin.me//2018/november/missing-detail</guid>
            <pubDate>Sun, 04 Nov 2018 18:30:00 GMT</pubDate>
            <description><![CDATA[A few thoughts on the article "Reality has a surprising amount of detail"]]></description>
            <content:encoded><![CDATA[<p>I recently stumbled upon
<a href="http://johnsalvatier.org/blog/2017/reality-has-a-surprising-amount-of-detail" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this quick read</a>
about the surprising amount of detail in reality. I highly suggest reading
through the article, its fairly short. The highlights for me were the following:</p>
<blockquote>
<p>Another way to see that noticing the right details is hard, is that different
people end up noticing different details.</p>
</blockquote>
<blockquote>
<p>Before you‚Äôve noticed important details they are, of course, basically
invisible. It‚Äôs hard to put your attention on them because you don‚Äôt even know
what you‚Äôre looking for. But after you see them they quickly become so
integrated into your intuitive models of the world that they become
essentially transparent.</p>
</blockquote>
<blockquote>
<p>This means it‚Äôs really easy to get stuck. Stuck in your current way of seeing
and thinking about things. Frames are made out of the details that seem
important to you. The important details you haven‚Äôt noticed are invisible to
you, and the details you have noticed seem completely obvious and you see
right through them. This all makes makes it difficult to imagine how you could
be missing something important.</p>
</blockquote>
<p>and the kicker</p>
<blockquote>
<p>If you wish to not get stuck, seek to perceive what you have not yet
perceived.</p>
</blockquote>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/missing-detail.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Matt's Log - October]]></title>
            <link>https://matthamlin.me//2018/october/matts-log-october</link>
            <guid>https://matthamlin.me//2018/october/matts-log-october</guid>
            <pubDate>Tue, 02 Oct 2018 21:11:00 GMT</pubDate>
            <description><![CDATA[A quick log of what I have been up to in October]]></description>
            <content:encoded><![CDATA[<p>Over the past few months I have been thinking a lot more about management,
mentorship and leadership. I generally want to write blog posts about some of
these thoughts but for the most part I don&#x27;t think I would be able to put
together something the size of some of the amazing blog posts at
<a href="http://randsinrepose.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">randsinrepose</a>, however I still wanted to spend some
time writing and thinking out loud about some of these concepts in a medium
slightly different from <a href="https://twitter.com/immatthamlin" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Twitter</a>.</p>
<p>I plan on writing a few of these posts that I am calling Matts Log, captains log
sounded far too nerdy, and couldn&#x27;t find anything better in a short amount of
time. These posts will be fairly sporadic, and may not share whole points let
alone content that would even be worthwhile to read for anyone else besides
myself.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="how-to-work-back-from-the-finish-line-to-the-starting-line">How to work back from the finish line to the starting line</h2>
<p>This train of thought was one which I had hoped to expand out to a full blog
post, which I may still do however its far easier to jump to the point here in
one of these updates than to write a full post for it.</p>
<p>The mindset was one of having a fairly decent mental model for the finish line
of a fairly large and expansive objective our team is looking at, and trying to
find out where the starting line is. I feel like I have recently fell into this
process of thinking about problems in terms of larger and larger time and effort
scales, which has made it difficult for me to see the fine details.</p>
<p>The more you zoom out of a problem, often I find it harder to be able to zoom
back in and see the next 5 steps.</p>
<p>My manager and I talked about it in one of our recent one on ones, and something
we realized is the pattern of taking the concept and beginning to slice it up
into smaller and smaller chunks better allows us to zoom back in on the
implementation details.</p>
<p>So the new thought process I will be trying out for this large project is to
start by asking the following question:</p>
<blockquote>
<p>What are all the questions we don&#x27;t have the answers to?</p>
</blockquote>
<p>Create a list of these questions, no need to determine the answers for them yet,
then follow that up by asking the following question to others on your team and
other smart coworkers:</p>
<blockquote>
<p>What are all the questions we don&#x27;t know to ask?</p>
</blockquote>
<p>Then, begin to break the questions down into smaller and smaller chunks,
organizing them by weight of the question on a scale of 0 to 1 (with 1 being a
difficult question to answer and 0 being a question that is already answered)
and their dependency (i.e. we can&#x27;t answer question 1 before knowing the answer
to question 2).</p>
<p>Once you form a graph of the questions, and their dependencies, take the largest
valued question that has no dependencies but is blocking other questions and
solve that one first.</p>
<p>Then work your way through the tree prioritizing questions that unlock many
other questions and those which have a high value assigned to them.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/matts-log-october.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[You've Launched, Now What?]]></title>
            <link>https://matthamlin.me//2018/september/youve-launched-now-what</link>
            <guid>https://matthamlin.me//2018/september/youve-launched-now-what</guid>
            <pubDate>Sun, 23 Sep 2018 15:06:00 GMT</pubDate>
            <description><![CDATA[A few thoughts on what to do after you launch a new project]]></description>
            <content:encoded><![CDATA[<p>My team recently completed a marathon at the pace of a fast sprint. In about 9
months of total time we went from concept of an architectural rewrite of our
documentation site for Wayfair&#x27;s Design System, to launching the MVP of that
site. It was an intense 9 months, interspersed with building out multiple new
components for our Design Systems, and maintaining our other components as well.</p>
<p>After having run the marathon, and sprinting across the finish line, I feel like
my eyes are hazy, and the next milestone is nowhere to be seen. The thing I have
been pondering since launch is,</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="what-do-we-do-now">What do we do now?</h3>
<p>Its an interesting mindset to have post launch, I feel like I should be
invigorated to keep working on other tasks, but oddly enough it has left me with
fairly low energy.</p>
<p>I feel like the time in which I feel excited and full of energy is when I am
working on large complicated tasks, trying to find that next mountain to climb
will take a while, hopefully I find it soon.</p>
<p>Let me know how you handle the post-launch feeling, what do you do next after
shipping a large feature/project?</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/youve-launched-now-what.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Summer 2018 Trip]]></title>
            <link>https://matthamlin.me//2018/july/summer-2018-trip</link>
            <guid>https://matthamlin.me//2018/july/summer-2018-trip</guid>
            <pubDate>Sat, 21 Jul 2018 13:23:00 GMT</pubDate>
            <description><![CDATA[A few photos from my summer trip!]]></description>
            <content:encoded><![CDATA[<p>Instead of dealing with hosting all the full res photos from my 2018 summer
trip, I decided to try and use a Google Photos album to showcase all the photos
and videos I took.</p>
<p>You can see the pictures here: <a href="https://photos.app.goo.gl/2DsTSNbiPsBUfWkx7" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://photos.app.goo.gl/2DsTSNbiPsBUfWkx7</a>.</p>
<p>Let me know what you think about this format!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/summer-2018-trip.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Taking a Break]]></title>
            <link>https://matthamlin.me//2018/july/taking-a-break</link>
            <guid>https://matthamlin.me//2018/july/taking-a-break</guid>
            <pubDate>Wed, 04 Jul 2018 09:07:00 GMT</pubDate>
            <description><![CDATA[A few quick thoughts on burn out and taking a break]]></description>
            <content:encoded><![CDATA[<p>One of my coworkers the other day after work sent me a slack asking if I have
ever experienced burn out. And if so how have I gotten over it to keep up the
enthusiasm and energy while working.</p>
<p>I thought about my response to the message a bit, thinking to myself</p>
<blockquote>
<p>Have I ever actually experienced burn out?</p>
</blockquote>
<p>I think I have experienced it, but to me its more like a slump than it is a
period of not being able to work on what I want to. I ended up replying saying
yes, and that I normally do one of two things.</p>
<ol>
<li>If you can, step away from the whole thing or</li>
<li>Pick up another task that is different that the current one you are feeling
burnt out over</li>
</ol>
<p>Both of these are essentially getting at the need to step away from whatever you
might be currently working on to let your brain (and body) recharge. I link to
think of burn out as being a battery that is consistently being drained while
trying to recharge.</p>
<p>You consistently have a pressure to keep producing work, but you are also trying
to recharge, just at a slower rate than you are being depleted.</p>
<p>In the case that you are getting burnt out at work, then its really time to set
up some vacation time if possible. If thats not possible then the next best
thing is to pick up completely different work than what you might be currently
working on. After a while doing either of those you will feel recharged enough
to come back to the task and dive back into it.</p>
<p>I have felt like this for several projects I have been working on. Recently we
released a new carousel component for Wayfairs Pattern Library (we may open
source it soon too!), that project had taken about 7 months of engineering
effort. It wasn&#x27;t an everyday project for those seven months, but after the
first three or so I had to step away and work on some other tasks.</p>
<p>Luckily my manager was totally understanding and realized that I needed to step
away from that work and shift to work on other projects.</p>
<p>Recently we have also been working on building out a new documentation site we
call Homebase where we document our design system and component libraries. Our
team has been working on the architecture of this project since December of
2017, and we are nearing the release date soon. This project has been extremely
exciting, we are building some really awesome tools that only some other
documentation site/design system sites have. However we have been working on it
for the better part of 6 months now, and its starting to get to a point where we
are all feeling a bit drained about the project.</p>
<p>This time I am taking off two and a half weeks from work to visit family, go
camping, and overall recharge. Its so refreshing being able to leave behind a
work laptop, turn off email notifications, and set your Slack status to üå¥
Vacationing.</p>
<p>I hope that my coworker and others also remember to step away from work that
begins to drain them.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/taking-a-break.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Managing Complex UI Component State]]></title>
            <link>https://matthamlin.me//2018/may/complex-ui-components</link>
            <guid>https://matthamlin.me//2018/may/complex-ui-components</guid>
            <pubDate>Mon, 28 May 2018 12:00:00 GMT</pubDate>
            <description><![CDATA[A few thoughts on managing complex UI component state within React]]></description>
            <content:encoded><![CDATA[<p>Managing state in React is difficult. While many suggest that lifting state up
to the highest level of the app, and frequently even outside of the component
tree, most apps aren&#x27;t that simple.</p>
<p>One case where this becomes complicated is when app authors need to interact
with complex UI components within their application. I internally wrestle with
this concept frequently as I build these UI components everyday at work.</p>
<p>One of the most recent cases where I am running into this is our new carousel
component which I started work on about 6 months ago as of the time of writing
this blog post. This component is perhaps the most complicated UI component we
have at Wayfair.</p>
<p>It manages quite a bit of internal state, ranging from actual React state to
many references to the rendered dom nodes as well. The problem here is that we
also want end users (app developers) the ability to control the carousel from
their business logic.</p>
<p>We started with the concept that render props and prop getters would be
sufficient to allow end users to control the carousel, however over the months
of development, we realized that many (maybe 90%) of frontend developers at
Wayfair (and really anywhere) don&#x27;t want to manage a lot of state and helpers
that comes with a render prop.</p>
<p>So we mostly scrapped the render prop pattern on the carousel
<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>. Since then we have continued to iterate on the carousel
but we were still blocked by this battle of how to properly let end developers
control the carousel while also not needing to manage a ton of internal logic
(and possibly duplicating that across the codebase).</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="skip-forward--2-months">Skip forward ~ 2 months</h4>
<p>On Memorial day weekend of 2018, I decided to spend some time in Codesandbox to
work on this problem. One of the rough patterns that I still don&#x27;t fully grasp
from the Downshift component published by Paypal, is the idea of passing back up
functions in event handlers to help compute the next state
<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->2</span></button></span><sup id="fn-2" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-2" class="text-primary hover:underline focus:underline">[<!-- -->2<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>.</p>
<p>I started with a simple example, a component that can be both controlled as well
as uncontrolled (a counter component). I broke the problem down into two pieces:</p>
<ol>
<li>Local state management</li>
<li>External state management</li>
</ol>
<p>The common logic between these two pieces is the actual methods behind how to
update this state. Locally we call setState with either an object or a function.
Using an object for setState generally means that we have all the information we
need to determine the next state. Whereas using a function means that we need to
know the current state of the world to derive the next state.</p>
<p>As with a counting component, a carousel only really needs to know the current
slide, the action the user is taking (i.e. clicking next), and the number of
slides to scroll by. With this information (which can be derived by the event as
well as the current state and props) we can derive the next active index.</p>
<p>So the solution was a concept I will be calling <strong>State Updaters</strong>, these are
functions which can be (and often are) curried methods that lastly return a
function that takes in state and props and returns some new state. They are
curried because they need additional information, such as selectors and
transformers to return the correct state.</p>
<p>Lets break down this step by step in some code.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Counter</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  state</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    count</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">defaultCount</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    propCount</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  static</span><span style="color:#59873A;--shiki-dark:#80A665"> getDerivedStateFromProps</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    /* we&#x27;ll get to this later */</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // This is used for local control flow</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // We determine if we call setState or not</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  isControlled</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> ()</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#AB5959;--shiki-dark:#CB7676"> typeof</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !==</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">undefined</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  handleClick</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> event</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    /* we&#x27;ll get to this later */</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  render</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Fragment</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span><span style="color:#B07D48;--shiki-dark:#BD976A"> onClick</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">handleClick</span><span style="color:#999999;--shiki-dark:#666666">}&gt;</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">Increment Count</span><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        {</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">Fragment</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>So we start off with some local state, a class method for handling the click
event from the button, and an <code>isControlled</code> method for determining if an
implementer is controlling the component or not.</p>
<p>The next step is to handle the click logic:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// ...</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">handleClick</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> event</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // If we aren&#x27;t controlled (i.e. we manage our own state)</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // call setState with the return value of the state updater</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">!</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">isControlled</span><span style="color:#999999;--shiki-dark:#666666">())</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">    this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">setState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#59873A;--shiki-dark:#80A665">stateUpdater</span><span style="color:#999999;--shiki-dark:#666666">());</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // Always call the prop handleClick handler</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // first passing the event, and second passing an object</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // with a stateUpdater argument</span></span>
<span class="line"><span style="color:#A65E2B;--shiki-dark:#C99076">  this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">handleClick</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">event</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // defined in the module</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // could also be exported as well</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    stateUpdater</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  });</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// ...</span></span></code></pre>
<p>Once we have the local handler resolved, now we can dive into the state updater
method.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// return a function that accepts an object with three key fields</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 1. transformState: this determines if the returned state should be nested</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 2. selectState: this selects the correct UI component state within the parent state</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// 3. fieldName: this is a string that is the key inside state that we update</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const</span><span style="color:#59873A;--shiki-dark:#80A665"> stateUpdater</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> ({</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  transformState</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> state</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> state</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  selectState</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> state</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#B07D48;--shiki-dark:#BD976A"> state</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  fieldName</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">count</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {})</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">// then return another function that accepts state and props</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> props</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  return</span><span style="color:#59873A;--shiki-dark:#80A665"> transformState</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    ...</span><span style="color:#59873A;--shiki-dark:#80A665">selectState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">),</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    [</span><span style="color:#B07D48;--shiki-dark:#BD976A">fieldName</span><span style="color:#999999;--shiki-dark:#666666">]:</span><span style="color:#59873A;--shiki-dark:#80A665"> selectState</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">)[</span><span style="color:#B07D48;--shiki-dark:#BD976A">fieldName</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#AB5959;--shiki-dark:#CB7676"> +</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 1</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  });</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>Now that we know what the stateUpdater looks like, we can dive back into the
event handler above. Inside the <code>!this.isControlled()</code> check, we setState using
the returned function after calling <code>stateUpdater</code> with undefined (results in
our default argument for transformState, selectState and fieldName).</p>
<p>There is one other thing we need to cover to fully make the UI component
controllable:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> Counter</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // ...</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  state</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    count</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">defaultCount</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // this needs to be an exact reference to the value provided by props</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    propCount</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  static</span><span style="color:#59873A;--shiki-dark:#80A665"> getDerivedStateFromProps</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // if the exact comparison between propCount in local state</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // and the count provided by the props is false</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // then its time to update the component</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">prevState</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">propCount</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !==</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        count</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        propCount</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">count</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  // ...</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Now we can put all this together into a working demo, which you can find here on
Codesandbox.</p>
<iframe src="https://codesandbox.io/embed/5wx0l7o3wk?autoresize=1&amp;hidenavigation=1&amp;moduleview=1" style="width:100%;height:500px;border:0;border-radius:4px;overflow:hidden" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe>
<hr/>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Most of the render prop code still lives in the carousel but it
will most likely be removed before we open source.</p>
<p id="fnref-2" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-2" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Side note, I haven&#x27;t even validated that this is what Downshift
does, I have only some second hand knowledge of their helpers that they pass
back up.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/complex-ui-components.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Understanding React 16.3 Updates]]></title>
            <link>https://matthamlin.me//2018/april/understanding-react-16-3-updates</link>
            <guid>https://matthamlin.me//2018/april/understanding-react-16-3-updates</guid>
            <pubDate>Sun, 08 Apr 2018 17:54:00 GMT</pubDate>
            <description><![CDATA[A quick overview of the new lifecycle methods introduced in React 16.3]]></description>
            <content:encoded><![CDATA[<p>If you are a frontend engineer working with view libraries than you have most
likely heard about the recent React updates launched with 16.3.0 (and 16.3.1). I
have been using some of these features for a bit, and noticed some interesting
patterns that begin to appear, and some pitfalls that many developers might fall
into when migrating components and whole applications to use the new 16.3
features.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="context">Context</h2>
<p>I could write a full blog post about the new <code>context</code> api in React 16.3,
however I want to keep the post relatively short and to the point.</p>
<p>A few of the patterns I have noticed with the new context api are:</p>
<p><strong>Providing a default context can be useful.</strong></p>
<p>If you build UI components for use across a larger application, its unreasonable
to require all of the other react components using your components to also wrap
your component in a provider. A powerful feature of the new context api is being
able to define an initial context value for the consumers. This value will be
used when your context consuming component is rendered in a component tree
without a provider parent.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">import</span><span style="color:#B07D48;--shiki-dark:#BD976A"> React</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> createContext</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#1E754F;--shiki-dark:#4D9375"> from</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">react</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Provider</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> Consumer</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#59873A;--shiki-dark:#80A665"> createContext</span><span style="color:#999999;--shiki-dark:#666666">({</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  theme</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    light</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#f8f9f9</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    dark</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#374047</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#59873A;--shiki-dark:#80A665"> UIComponent</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> props</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Consumer</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    {({</span><span style="color:#B07D48;--shiki-dark:#BD976A"> theme</span><span style="color:#999999;--shiki-dark:#666666"> })</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        style</span><span style="color:#999999;--shiki-dark:#666666">={{</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">          color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> theme</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">light</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">          background</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> theme</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">dark</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &gt;</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">        Button</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">button</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    )}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">Consumer</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p><strong>A minor performance improvement for context provider wrappers is to use a key
from state as the context provided</strong></p>
<p>If you want to wrap your context provider in some wrapper that provides an
update method of some sort, you generally will do something like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ContextProvider</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#59873A;--shiki-dark:#80A665"> Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  state</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    light</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#f8f9f9</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    dark</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#374047</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  updateTheme</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> args</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    /* Implementation detail */</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  render</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Provider</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">        // ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">        value</span><span style="color:#999999;--shiki-dark:#666666">={{</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">          ...</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">          updateTheme</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">updateTheme</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        }}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        {</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">children</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">Provider</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>However! This will potentially cause unnecessary re-renders, as now the value
provided to the consumers will always be a new object!!!</p>
<p>A simple way to get around this is to construct a nested object in state that is
the context you want to provide:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#AB5959;--shiki-dark:#CB7676"> class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> ContextProvider</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#59873A;--shiki-dark:#80A665"> Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  /* Note this needs to be defined before state below */</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  updateTheme</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> args</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    /* Implementation detail */</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  state</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    light</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#f8f9f9</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    dark</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#374047</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    context</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      light</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#f8f9f9</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      dark</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#374047</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">      updateTheme</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">updateTheme</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">  render</span><span style="color:#999999;--shiki-dark:#666666">()</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;</span><span style="color:#998418;--shiki-dark:#B8A965">Provider</span><span style="color:#B07D48;--shiki-dark:#BD976A"> value</span><span style="color:#999999;--shiki-dark:#666666">={</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">state</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">context</span><span style="color:#999999;--shiki-dark:#666666">}&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">        {</span><span style="color:#A65E2B;--shiki-dark:#C99076">this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">children</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      &lt;/</span><span style="color:#998418;--shiki-dark:#B8A965">Provider</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    );</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="getderivedstatefromprops"><code>getDerivedStateFromProps</code></h2>
<p>So far I have noticed three primary pitfalls of the new static
<code>getDerivedStateFromProps</code> lifecycle method on React components.</p>
<p><strong>Always return a value at the end of the getDerivedStateFromProps method.</strong></p>
<p>React will ensure to warn you if you ever return <code>undefined</code> (which will be the
return value if you don&#x27;t actively return anything) from the method. A good
example of when this might happen is like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> App</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  static</span><span style="color:#59873A;--shiki-dark:#80A665"> getDerivedStateFromProps</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !==</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        value</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  /* implementation detail */</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Note that if <code>nextProps.value</code> does equal <code>prevState.value</code> then the method will
return <code>undefined</code>.</p>
<p>One tip I suggest to resolve this potential issue is to start by adding one last
<code>return null</code> at the end of the method when you first add
<code>getDerivedStateFromProps</code>:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> App</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> React</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  static</span><span style="color:#59873A;--shiki-dark:#80A665"> getDerivedStateFromProps</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !==</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        value</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // Start by adding this, then modify the logic above</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  /* implementation detail */</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p><strong>getDerivedStateFromProps will overwrite any initial state if you conditionally
fall back to default values</strong></p>
<p>This was a difficult one to debug, but one key thing to keep in mind when using
<code>getDerivedStateFromProps</code> is that it will run before the first-ever render.
This can lead to some issues with colliding values between the return of this
method and your component&#x27;s initial state, for example:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> App</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#59873A;--shiki-dark:#80A665"> Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  static</span><span style="color:#59873A;--shiki-dark:#80A665"> getDerivedStateFromProps</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !==</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        value</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  state</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">    // ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    value</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;--shiki-dark:#758575DD">  /* implementation detail */</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>In the above snippet, if <code>this.props.value</code> is null or undefined initially, then
many would think that the value of <code>this.state.value</code> on the initial render will
be <code>0</code>, unfortunately because of <code>getDerivedStateFromProps</code>, <code>this.state.value</code>
will be <code>this.props.value</code> always and will never be the fallback of <code>0</code>.</p>
<p>So far the only way I found to get around this is to either track if it is the
first time calling <code>getDerivedStateFromProps</code>, or to check that
<code>nextProps.value</code> is neither null or undefined before the <code>!==</code> comparison.</p>
<ol start="3">
<li>If you need to compare to <code>prevProps</code> you need to store that information in
state</li>
</ol>
<p>This is kind of the largest discussion about this new feature, many developers
have voiced their opinions in adding <code>prevProps</code> as another argument to the
method to compare new props with the previous props. The only way to get around
this is to store the needed information from prevProps into state:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">class</span><span style="color:#2E8F82;--shiki-dark:#5DA994"> App</span><span style="color:#AB5959;--shiki-dark:#CB7676"> extends</span><span style="color:#59873A;--shiki-dark:#80A665"> Component</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">  static</span><span style="color:#59873A;--shiki-dark:#80A665"> getDerivedStateFromProps</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">    const</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevProps</span><span style="color:#999999;--shiki-dark:#666666"> }</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevState</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    if</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#AB5959;--shiki-dark:#CB7676"> !==</span><span style="color:#B07D48;--shiki-dark:#BD976A"> prevProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        prevProps</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nextProps</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">        someDerivedValue</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B07D48;--shiki-dark:#BD976A"> nextProps</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">value</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">      };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    }</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">    return</span><span style="color:#AB5959;--shiki-dark:#CB7676"> null</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  state</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    prevProps</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> this</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">props</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">    someDerivedValue</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#2F798A;--shiki-dark:#4C9A91"> 0</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  };</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="getsnapshotbeforeupdate"><code>getSnapshotBeforeUpdate</code></h2>
<p>Coming soon, I haven&#x27;t written too many components that need this just yet. But
I have a feeling I will be using this a decent amount!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/understanding-react-16-3-updates.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[2018]]></title>
            <link>https://matthamlin.me//2018/january/2018</link>
            <guid>https://matthamlin.me//2018/january/2018</guid>
            <pubDate>Tue, 16 Jan 2018 12:00:00 GMT</pubDate>
            <description><![CDATA[A recap and update on some of the projects I am working on at the start of 2018]]></description>
            <content:encoded><![CDATA[<p>It has been several months, almost a full year, since I have even touched my
blog. In fact I only found out in December that my hosting provider decided to
no longer host my website.</p>
<p>A lot of things have happened since I last blogged. I wasn&#x27;t able to keep up
with doing open source work last year. However I have started 2018 strong with
at least one commit to an open source project every day.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="1-new-website-that-is-still-a-work-in-progress">1. New website that is still a work in progress</h3>
<p>I have a new website, its still super terrible (still working on the design of
it, also links are all broken everywhere sorry).</p>
<p>Its built using Gatsby, which offers a better markdown to blog post story than
Next js, as well as allows me to pull in some interesting data during build
rather than during run time.</p>
<p>I still need to fix all the links as well as figure out how to even host it, but
at least it is a start.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="2-a-ton-of-new-projects-on-github">2. A ton of new projects on GitHub</h3>
<p>I have started quite a few small projects on GitHub, here is a short list:</p>
<ol>
<li>Resp: <a href="https://github.com/hamlim/resp" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Resp</a></li>
<li>DS: <a href="https://github.com/hamlim/ds" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">DS</a></li>
<li>app-config <a href="https://github.com/hamlim/app-config" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">app-config</a></li>
<li>React-Lightbox <a href="https://github.com/hamlim/React-Lightbox" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">React-Lightbox</a></li>
</ol>
<p>I am definitely going to be working on far more of these small projects, I am
mostly using them to fill in personal needs on other side projects.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="3-dollar">3. Dollar</h3>
<p>I started Dollar in 2015 as one of my first, and largest, web apps I have worked
on outside of work. I want to spend a ton of time in 2018, rebuilding the
application using React, and a flux style architecture without redux.</p>
<p>I don&#x27;t want to force myself to blog a ton in 2018, but I also don&#x27;t want to
turn this website into yet another stale website. So expect a few more learning
blog posts and other random things to be built on to this.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/2018.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[CSS in JS]]></title>
            <link>https://matthamlin.me//2017/april/css-in-js</link>
            <guid>https://matthamlin.me//2017/april/css-in-js</guid>
            <pubDate>Sat, 01 Apr 2017 12:00:00 GMT</pubDate>
            <description><![CDATA[A few thoughts and patterns for using styled-jsx or other CSS-in-JS solutions]]></description>
            <content:encoded><![CDATA[<p>I have been pretty vocal about writing css within javascript in the past. I used
to be completely against the pattern. I believed in the power of css on its own
and all the benefits of being able to use things like pseudo selectors and
attribute selectors as well. So up until about a month ago I was strictly on the
side of keeping css outside of the javascript files. Now I can&#x27;t get enough of
it.</p>
<p>It started with experimenting with Styled Components, which I thought was a
pretty cool idea. One of the limitations of styled components is that every dom
node starts to become a styled component. You begin to have several styled
<code>&lt;div&gt;</code>&#x27;s just to handle layout for different components. In small websites/apps
this can be an alright trade off but in larger applications this gets really
hairy really fast.</p>
<p>Then about two weeks ago I decided to start messing around with Next JS. With
Next comes <code>styled-jsx</code> which is a really cool way to handle styling components.
You simply throw a style tag within the component and add your css within a
template literal.</p>
<p>From here on out you can write your regular old css, include pseudo selectors
and other cool things.</p>
<p>However one of the benefits of writing css within a template literal is the
ability to inject things from within your javascript. I started with just
storing my variables in separate modules like below:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#1E754F;--shiki-dark:#4D9375"> default</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  a</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#F3CC31</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  b</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#4CD385</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  c</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#EA6658</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  d</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#A971C0</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  e</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#51A7E0</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  white</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#FEFEFE</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  black</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#0f0f0f</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  gray</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#ecf0f1</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  softWhite</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">#F1F4F5</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">,</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">};</span></span></code></pre>
<p>I used these like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">style</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  {</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  :root {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --a: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">a</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --a-muted-one: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">a</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 5%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --a-muted-two: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">a</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 20%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --b: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">b</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --b-muted-one: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">b</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 5%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --b-muted-two: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">b</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 20%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --c: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">c</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --c-muted-one: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">c</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 5%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --c-muted-two: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">c</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 20%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --d: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">d</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --d-muted-one: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">d</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 5%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --d-muted-two: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">d</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 20%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --e: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">e</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --e-muted-one: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">e</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 5%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    --e-muted-two: </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">color</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">convert</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#B56959;--shiki-dark:#C98A7D">color(</span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">colors</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B56959;--shiki-dark:#C98A7D">e</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> lightness(+ 20%))</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D">;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">  }</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">style</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span></code></pre>
<p>I started to realize that you can do a lot more with template literals and css.
If you are used to sass or less or similar setups than you probably use a few
mixins or extends. Turns out mixins are just plain old javascript functions:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const</span><span style="color:#59873A;--shiki-dark:#80A665"> tablet</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cssString</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  `</span><span style="color:#B56959;--shiki-dark:#C98A7D">@media screen and (min-width: 25rem) { </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">cssString</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> }</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">export</span><span style="color:#AB5959;--shiki-dark:#CB7676"> const</span><span style="color:#59873A;--shiki-dark:#80A665"> desktop</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B07D48;--shiki-dark:#BD976A"> cssString</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  `</span><span style="color:#B56959;--shiki-dark:#C98A7D">@media screen and (min-width: 45rem) { </span><span style="color:#1E754F;--shiki-dark:#4D9375">${</span><span style="color:#B56959;--shiki-dark:#C98A7D">cssString</span><span style="color:#1E754F;--shiki-dark:#4D9375">}</span><span style="color:#B56959;--shiki-dark:#C98A7D"> }</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">);</span></span></code></pre>
<p>And now I can use these &quot;mixins&quot; like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;</span><span style="color:#1E754F;--shiki-dark:#4D9375">style</span><span style="color:#B07D48;--shiki-dark:#BD976A"> jsx</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  {</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  ${</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">    tablet</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    .class {</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">      color: red;</span></span>
<span class="line"><span style="color:#B56959;--shiki-dark:#C98A7D">    }</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">  `</span><span style="color:#999999;--shiki-dark:#666666">)</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">  }</span></span>
<span class="line"><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">&lt;/</span><span style="color:#1E754F;--shiki-dark:#4D9375">style</span><span style="color:#999999;--shiki-dark:#666666">&gt;</span></span></code></pre>
<p>There is one final caveat with Styled-jsx, first off is that there are some
minor bugs on how the selectors are actually set up. Every selector generally
gets an extra <code>[styled-jsx=&quot;some string of numbers here&quot;]</code> applied to it. This
adds the convenience of &quot;locally-scoped&quot; css, however external strings added to
the css don&#x27;t get this feature. Which might cause css to break in some
circumstances. There is a pr out currently to add in external css as well which
might not fix this issue, but will allow you to split out that css from the view
if you want to.</p>
<p>Ultimately I think this is going to be my go to setup to handle styles for the
near future. I will always be experimenting with alternative methods, so I will
be sure to add another post if in two months I start writing some fancy new
syntax for my styles.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/css-in-js.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Redesign v6]]></title>
            <link>https://matthamlin.me//2017/march/redesign-v6</link>
            <guid>https://matthamlin.me//2017/march/redesign-v6</guid>
            <pubDate>Wed, 15 Mar 2017 12:00:00 GMT</pubDate>
            <description><![CDATA[A few thoughts on the redesign of my personal site, adopting Next.js and deploying via Now]]></description>
            <content:encoded><![CDATA[<p>I have recently been looking into the many projects and tools that Zeit has been
working on. If you don&#x27;t know what Zeit is, its the company behind many cool
projects like hyper (the terminal built with web technologies), Now a platform
for deployments, and also Nextjs a server rendered react framework with support
for routing both on the client and on the server. I decided to up my plan from
free to the payed option on Now to give it a try. I have been looking at ways to
cut down on my dependency on Github Pages because of limitations they have
implemented and also because of the lack in server side control.</p>
<p>So after I had ponied up the $14.99 for a month of premium Now usage, I decided
it was time to make use of that. I decided to start from scratch on my personal
website and build it from Nextjs from the ground up. If you are reading this on
matthamlin.me right now then you are experiencing that rewrite at the moment.</p>
<p>This is the first website I have made with Next, it took some time to learn how
to use it properly and how to migrate my old structure over to using it too.
Prior to this I did a full re-write in react and react-router which I thought
was pretty advanced at the time. But now that I have used Next to handle all
this it has made it so much easier to build things.</p>
<p>The core concept of Next is that your website lives in two core root folders,
<code>pages</code> and <code>static</code>, there are no limitations on what folders you make or use
but these are the two most common folders. Pages is where are your root page
endpoints will live, so if I put a <code>test.js</code> file within there, then the
endpoint of <code>mydomain.com/test</code> will render out the react component that that
file exports. Static on the other hand is where you store static assets like
.html files, images, external css, videos, etc. You can deploy a site with Next
and just some HTML if you wanted to by throwing an index.html file within
<code>/static</code>.</p>
<p>On the css side of things I had to change my current implementation quite a bit.
I moved my css imports into template strings within <code>&lt;style jsx&gt;</code> tags. This
means that the styles within the tag are scoped locally to the component. For
some things I had to use the Global scope within these style tags. A good reason
for this is when html is set within elements manually (Like how this page is
rendered from markdown to html), or if you want to style whole components within
another component.</p>
<p>I plan on converting my other domain <code>goexploring.today</code> to use Next and Now in
the coming weeks, and also plan on launching another site for documenting my
families trip to New Zealand coming up really soon.</p>
<p>Let me know what you think about the site. In an ideal world it should just work
like before.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/redesign-v6.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[JavaScript Weirdness]]></title>
            <link>https://matthamlin.me//2017/march/javascript-weirdness</link>
            <guid>https://matthamlin.me//2017/march/javascript-weirdness</guid>
            <pubDate>Sat, 11 Mar 2017 12:00:00 GMT</pubDate>
            <description><![CDATA[A few weird things about JavaScript]]></description>
            <content:encoded><![CDATA[<p>Okay, in case you didn&#x27;t know already, Javascript is a funky language.</p>
<p>I am currently working on a simple calendar web app using CSS Grid and a bit of
react, so I wanted to generate an array of arrays storing the days in each month
in each year. I was hoping to do this with some fancy forEach loops so I started
with the following code:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> year</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#AB5959;--shiki-dark:#CB7676">new</span><span style="color:#59873A;--shiki-dark:#80A665"> Array</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#2F798A;--shiki-dark:#4C9A91">12</span><span style="color:#999999;--shiki-dark:#666666">)).</span><span style="color:#59873A;--shiki-dark:#80A665">fill</span><span style="color:#999999;--shiki-dark:#666666">([]);</span></span></code></pre>
<p>I was hoping this would return something like this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">year</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> [[],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> []];</span></span></code></pre>
<p>but it instead returned essentially this:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">year</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> [</span><span style="color:#2F798A;--shiki-dark:#4C9A91">12</span><span style="color:#B07D48;--shiki-dark:#BD976A"> x</span><span style="color:#999999;--shiki-dark:#666666"> []];</span></span></code></pre>
<p>which basically boils down to an array of 12 pointers all pointing to the same
virtual array. It took about 45 minutes debugging this with one of my friends
because it kept returning an array of 12 arrays each holding 365 items.</p>
<p>The way that I got around this issue was by setting <code>year</code> to:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#B07D48;--shiki-dark:#BD976A"> year</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> [[],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> [],</span><span style="color:#999999;--shiki-dark:#666666"> []];</span></span></code></pre>
<p>Then I could add in all my days within each array.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/javascript-weirdness.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Calendar]]></title>
            <link>https://matthamlin.me//2017/march/calendar</link>
            <guid>https://matthamlin.me//2017/march/calendar</guid>
            <pubDate>Fri, 10 Mar 2017 12:00:00 GMT</pubDate>
            <description><![CDATA[Building a calendar web application]]></description>
            <content:encoded><![CDATA[<p>I want to start a semi-live blog post about building a simple calendar web
application.</p>
<p>I have tried this kind of thing before, or at least something similar for a few
other projects but they have never really actually played out well.</p>
<p>This time I will try to keep it short and to the point.</p>
<p>First lets start with the goal of the project:</p>
<ul>
<li><strong>Reminders</strong></li>
</ul>
<p>I have about 6 things that I have to keep in mind to pay off every month, some
of these are loans, others include utilities and rent. However one of the
problems I have encountered has been visiting the site to pay off a bill only to
find out that I payed it off earlier in the month.</p>
<div class="rounded-lg bg-muted px-4 py-0.5"><p>I have no idea why my memory is so bad, but it just is.</p></div>
<ul>
<li><strong>Events</strong></li>
</ul>
<p>I use a random mixture of pen and paper, todo lists, and some reminders on my
phone to keep up on events and other things happening in my life but I haven&#x27;t
settled on a good calendar app that satisfies all my needs.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="starting-off">Starting Off:</h2>
<p>So of course instead of doing a fresh install of react and all the other tools I
need in another directory, I decided to boot up a codepen and just start with
some code.</p>
<p>I have written about this before, but Codepen is a pretty great tool to just poc
some ideas.</p>
<p>After I got set up with some simple styles, i jumped into the javascript to
render out some days in my calendar.</p>
<p>After about an hour of tinkering around and finding a really odd bug with some
of my code which you can read about here: <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2017/march/javascript-weirdness">Javascript Weirdness</a>,
I finally had a suitable graphical demo of what I was going for.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="next-steps">Next steps:</h2>
<p>After my initial mock up on code pen I am finally ready to boot up a new
directory with Next.js, React, ReactDOM, and styled-jsx-postcss. This is my new
go to install command:</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">yarn</span><span style="color:#B07D48;--shiki-dark:#BD976A"> add</span><span style="color:#B07D48;--shiki-dark:#BD976A"> next</span><span style="color:#393A34;--shiki-dark:#DBD7CAEE">@</span><span style="color:#2F798A;--shiki-dark:#4C9A91">2.0</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#2F798A;--shiki-dark:#4C9A91">0</span><span style="color:#B07D48;--shiki-dark:#BD976A"> react</span><span style="color:#B07D48;--shiki-dark:#BD976A"> react</span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#B07D48;--shiki-dark:#BD976A">dom</span><span style="color:#B07D48;--shiki-dark:#BD976A"> styled</span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#B07D48;--shiki-dark:#BD976A">jsx</span><span style="color:#AB5959;--shiki-dark:#CB7676">-</span><span style="color:#B07D48;--shiki-dark:#BD976A">postcss</span></span></code></pre>
<p>First before installing all that I need to determine a good name for the
project. im thinking <strong>Months</strong>.</p>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="two-days-later">Two Days Later:</h2>
<p>Ok so I have the rough draft up and working locally, there are however some
changes that I might need to make to get this working the way I want it.</p>
<p>Lets document them down here in this post:</p>
<ul>
<li>Performance is terrible even on a mildly spec&#x27;d macbook pro (what happens when
you render out 365(6) elements)</li>
<li>I want a scroll indicator somewhere saying what month you are scrolled on</li>
<li>I want the sidebar to represent the current selected day (reminders + event
info there)</li>
</ul>
<h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="yet-another-day-later">Yet another day later:</h2>
<p>So Today I split out each day as a separate component, adding some content and
styles.</p>
<p>I also added some logic to scroll to the element, highlight it if it is the
current day and a few other things.</p>
<p>Still have no idea how to implement the proper rendering of items to be more
efficient and improve performance.</p>
<p>Going to stop updates on this project until I get back from my trip. The next
week will be spent working on getting a really basic website set up for tracking
photos, memories, videos etc from my trip to New Zealand.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/calendar.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Rebuilding Mustache]]></title>
            <link>https://matthamlin.me//2017/march/rebuilding-mustache</link>
            <guid>https://matthamlin.me//2017/march/rebuilding-mustache</guid>
            <pubDate>Wed, 01 Mar 2017 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I have recently been thinking a lot about template literal strings and their
power within the scope of javascript.</p>
<p>I know that we have all decided to drop Mustache and move to react and similar
libraries but I figured I would flex my muscles a bit and try to build out a
very dead simple rendering function.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">const</span><span style="color:#59873A;--shiki-dark:#80A665"> render</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">template</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> model</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">  template</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">replace</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">/</span><span style="color:#BDA437;--shiki-dark:#E6CC77">\{\{</span><span style="color:#5A6AA6;--shiki-dark:#6872AB">\s</span><span style="color:#2F798A;--shiki-dark:#4C9A91">?</span><span style="color:#999999;--shiki-dark:#666666">([</span><span style="color:#5A6AA6;--shiki-dark:#6872AB">\w.</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#2F798A;--shiki-dark:#4C9A91">+</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#5A6AA6;--shiki-dark:#6872AB">\s</span><span style="color:#2F798A;--shiki-dark:#4C9A91">?</span><span style="color:#BDA437;--shiki-dark:#E6CC77">\}\}</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">/</span><span style="color:#1E754F;--shiki-dark:#4D9375">g</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> (</span><span style="color:#B07D48;--shiki-dark:#BD976A">match</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> variable</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> (</span></span>
<span class="line"><span style="color:#B07D48;--shiki-dark:#BD976A">    variable</span><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#59873A;--shiki-dark:#80A665">split</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">.</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">).</span><span style="color:#59873A;--shiki-dark:#80A665">reduce</span><span style="color:#999999;--shiki-dark:#666666">((</span><span style="color:#B07D48;--shiki-dark:#BD976A">previous</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#B07D48;--shiki-dark:#BD976A"> current</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#999999;--shiki-dark:#666666"> =&gt;</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#1E754F;--shiki-dark:#4D9375">      return</span><span style="color:#B07D48;--shiki-dark:#BD976A"> previous</span><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">current</span><span style="color:#999999;--shiki-dark:#666666">];</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">    },</span><span style="color:#B07D48;--shiki-dark:#BD976A"> model</span><span style="color:#999999;--shiki-dark:#666666">)</span><span style="color:#AB5959;--shiki-dark:#CB7676"> ||</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> &#x27;&#x27;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">  ))</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;--shiki-dark:#CB7676">let</span><span style="color:#B07D48;--shiki-dark:#BD976A"> temp</span><span style="color:#999999;--shiki-dark:#666666"> =</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span><span style="color:#B56959;--shiki-dark:#C98A7D">my &lt;span&gt;{{test}}&lt;/span&gt;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#59873A;--shiki-dark:#80A665">render</span><span style="color:#999999;--shiki-dark:#666666">(</span><span style="color:#B07D48;--shiki-dark:#BD976A">temp</span><span style="color:#999999;--shiki-dark:#666666">,</span><span style="color:#999999;--shiki-dark:#666666"> {</span><span style="color:#998418;--shiki-dark:#B8A965"> test</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#B5695977;--shiki-dark:#C98A7D77"> `</span><span style="color:#B56959;--shiki-dark:#C98A7D">&lt;h2 class=&quot;testing&quot;&gt;Test!&lt;/h2&gt;</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">`</span><span style="color:#999999;--shiki-dark:#666666"> });</span></span></code></pre>
<p>Lets break this down a bit. The render method takes in a template and a model or
store of data, it searches through the template to find any words wrapped in
<code>{{}}</code> with or without spaces, all its matches are then matched and replaced
with the corresponding values from the model.</p>
<p>This is just a really plain render method, the next step up beyond this would be
to start caching the template and storing it in the VDOM, well only if we wanted
this to become a bit more efficient on handling re-renders/data updating.</p>
<p>Either way figured this was a simple little thing worth playing around with.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/rebuilding-mustache.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Push vs Pull AI]]></title>
            <link>https://matthamlin.me//2017/january/push-vs-pull-ai</link>
            <guid>https://matthamlin.me//2017/january/push-vs-pull-ai</guid>
            <pubDate>Sun, 01 Jan 2017 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<link rel="preload" as="image" href="/images/her.jpg"/><h2 class="text-3xl font-semibold text-gray-800 dark:text-gray-200" id="push-vs-pull-ai-assistants">Push vs Pull AI Assistants</h2>
<img alt="A scene from the movie Her, depicting the main character and his AI" src="/images/her.jpg" style="max-width:100%;height:auto"/>
<p>If you haven&#x27;t watched the movie <cite>Her</cite> I really recommend it, its
quite an interesting story exploring a lot of different ideas about
relationships, AI&#x27;s and individuality. One of the best parts of the movie was
simply the AI, voiced by Scarlett Johansson, which acts as an (almost) always on
voice for the main character.</p>
<p>The thing is that the AI in the movie feels like something that is near
impossible to actually make in the real world, or at least about 50 or more
years away from becoming a reality. This is even more noticeable when you start
to use either Google Assistant, Siri, or even Alexa because all of these &quot;AIs&quot;
are miles away from being the kind of personality of the AI from her.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/push-vs-pull-ai.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Links]]></title>
            <link>https://matthamlin.me//2016/november/links</link>
            <guid>https://matthamlin.me//2016/november/links</guid>
            <pubDate>Sat, 19 Nov 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>The web is one of the best things in the world. It has never been replicated and
something may never reach the same kind of exposure that it has. The only
problem with the web is that there is too much content to follow along with. I
sometimes discover a really cool website, only to forget about it sometime
later.</p>
<p>If you think about it the web is ephemeral, not just in the sense that a website
can be there one month and gone the next but that you can discover a website one
day and then the next day completely forget about it.</p>
<p>I decided I wanted to keep a directory of (some useful) links that I have
stumbled upon. I will be adding more links to this list for as long as I
remember to and also I plan on sorting this in the future so it is easy to
navigate through.</p>
<ul>
<li><a href="http://jxnblk.com/Spectral/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Spectral</a> - Color</li>
<li><a href="https://monochrome.jxnblk.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Monochrome</a> - Color</li>
<li><a href="https://simpleicons.org/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Simple Icons</a> - A collection of SVG Icons for
random brands</li>
<li><a href="http://jxnblk.com/papercraft/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Papercraft</a> - A collection of cool SVG based
letters</li>
<li><a href="http://uigradients.com/#GreenBeach" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">UI Gradients</a> - Sweet looking gradients</li>
<li><a href="http://ref.openweb.io/CSS/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">CSS Reference</a> - A pretty cool CSS Reference page</li>
<li><a href="http://overapi.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Over API</a> - API&#x27;s for a lot of common languages</li>
<li><a href="https://aerotwist.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Paul Lewis&#x27;s Blog</a></li>
<li><a href="https://github.com/enaqx/awesome-react" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Awesome React Resources</a></li>
<li><a href="https://github.com/bnb/awesome-hyper" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Awesome Hyper Resources</a></li>
<li><a href="https://github.com/Wildhoney/ReactShadow" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">React using Shadow Dom</a></li>
<li><a href="http://academy.plot.ly/react/1-introduction/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Intro to React</a> - Great
resource for learning about React</li>
<li><a href="http://liamrosen.com/fitness.html" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Fitness Resources</a></li>
<li><a href="http://devarchy.com/react-components" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">React Components</a></li>
<li><a href="http://ricostacruz.com/cheatsheets/react.html" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">React Cheatsheet</a></li>
<li><a href="http://floatingboxes.com/resources/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Web Development Resources</a></li>
<li><a href="https://github.com/melanierichards/just-build-websites" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Ideas for side projects in Web Development</a></li>
<li><a href="http://tawian.io/text-spinners/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Pure text only css spinners</a></li>
<li><a href="https://github.com/jaywcjlove/awesome-mac/blob/master/README-en.md" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Awesome Mac Resources and Apps</a></li>
<li><a href="http://clrs.cc/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Colors</a> - New defaults for the web</li>
<li><a href="http://blog.neave.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">A cool design blog</a></li>
<li><a href="http://www.frankchimero.com/writing/what-screens-want/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">An interesting thoughtpiece on digital design</a></li>
<li><a href="http://www.colourco.de/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Choose your own color scheme</a></li>
<li><a href="https://brandcolors.net/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Brand Colors</a></li>
<li><a href="http://qz.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Quartz</a> - One of my favorite news sites</li>
<li><a href="http://www.minimallyminimal.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">A blog about minimal design</a></li>
<li><a href="http://adamschwartz.co/magic-of-css/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Great website about CSS animation</a></li>
<li><a href="http://cssreference.io/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">CSS Reference</a> - A great little reference to some
common CSS rules and declarations.</li>
<li><a href="http://reactpatterns.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">React Patterns</a> - Patterns to follow within React
applications.</li>
<li><a href="https://colorme.io/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Color Me</a> - A cool interactive color tool showing you
the css color function</li>
</ul>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/links.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The Great CSS Debate]]></title>
            <link>https://matthamlin.me//2016/october/css-debate</link>
            <guid>https://matthamlin.me//2016/october/css-debate</guid>
            <pubDate>Sat, 08 Oct 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>If you aren&#x27;t actively developing websites or web applications you might not
know about the growing debate about one of my favorite web languages CSS. I want
to dive into some of the history of how the debate originated, what exactly is
being debated about and where we as web developers might be able to make some
compromises as well.</p>
<p>If you don&#x27;t fully know what CSS is or Javascript, I highly recommend learning
more about both
<a href="https://www.w3.org/standards/webdesign/htmlcss" data-css-link-article="true">here
first</a> and then coming back here once you understand the basics of both.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="history">History:</h4>
<p>It is difficult to point to any one place where the fracture between both sides
actually started, I have a feeling that minor fractures between each side
started when componentization began to rise in the Javascript community.</p>
<p>With the rise of Javascript libraries and frameworks such as Backbone, then
Ember, Angular, React and others many Javascript developers began separating
their view logic from their business logic, this separation became known as the
MVC paradigm and was and still is prevalent in different programming languages
and entirely different environments than just on the web. This paradigm gave way
to modern day componentization where developers wanted to compose their
applications from a core library of patterns that they could reuse across
different applications or websites to simplify development.</p>
<p>Componentization was the ultimate step towards keeping code DRY, meaning that
developers didn&#x27;t need to spend the time redeveloping the same dropdown every
time a designer requests a dropdown. This drive lead to a group of engineers at
Facebook to develop a very popular framework known as React. I don&#x27;t have the
time (or the effort) to dive into the background of React however React really
made the fractures grow between developers who support CSS and those who don&#x27;t.</p>
<p>The Great Debate really kicked off when an engineer at Facebook named
Christopher Chedeau, gave a talk where he exposed some of the issues he and his
team had seen with CSS while developing web applications and components at
Facebook. The entire presentation can be summarized by the slide below but the
entire slide deck is
<a href="https://speakerdeck.com/vjeux/react-css-in-js" data-css-link-article="true">available
here</a> to read through.</p>
<figure class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:75%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/css-debate/the-slide.jpg" height="768" width="1024" loading="lazy" class="rounded-lg" alt="A slide containing the following content: &#x27;Plan: Problems with CSS at scale - Global Namespace - Dependencies - Dead Code Elimination - Minification - Sharing Constants - Non-deterministic Resolution - Isolation  Before we get to the crazy JS part, I&#x27;m going to go over all the issues we&#x27;ve been facing when trying to use CSS at scale and how we worked around them. When I&#x27;m saying at scale, it means in a codebase with hundreds of developers that are committing code everyday and where most of them are not front-end developers&#x27;"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">The slide that started the great debate!</figcaption></figure>
<p>In the slide Christopher describes 7 issues with the way that CSS is currently
spec&#x27;d out.</p>
<ol>
<li>Global Namespace</li>
<li>Dependencies</li>
<li>Dead Code Elimination</li>
<li>Minification</li>
<li>Sharing Constants</li>
<li>Non-Deterministic Resolution</li>
<li>Isolation</li>
</ol>
<p>Now most of these issues only arise from having thousands of developers touching
hundreds of thousands of lines of code all in a day, so for the most part the
only issues that arise from CSS when adopting a React-like Javascript paradigm
is the Cascade.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="core-issues">Core Issues:</h3>
<p>Many of the points brought up by Christopher are indeed valid, but only valid
from a javascript developer&#x27;s mindset, and he even notes that in the following
slides. So I will narrow down the core issues with CSS that almost everyone on
the side arguing to eliminate the need for CSS can agree with.</p>
<ol>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#global">Global Namespace</a></li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#inheritance">Inheritance, Source Order and Specificity</a></li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#codebase">Codebase Growth</a></li>
<li><a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#static">Static</a></li>
</ol>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="global-namespace">Global Namespace:</h4>
<p>CSS is, by nature, globally name-spaced. Every time a developer writes out the
following they have declared a CSS &quot;Global variable&quot;.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">.</span><span style="color:#B07D48;--shiki-dark:#BD976A">myClass</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#393A34;--shiki-dark:#DBD7CAEE">  ...</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>Anytime this CSS is linked to a document with an element that has the class
<code>.myClass</code> those styles will be applied to that element.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="inheritance-source-order-and-specificity">Inheritance, Source Order and Specificity:</h4>
<p>This is a pretty tricky concept of CSS even for those who are used to
programming in different languages. Inheritance means that a sibling element
will inherit <em>(some)</em> styles from their parent node. If you want to inherit all
styles from the parent you can simply style the child node and set every style
you want inherited to be like the following: <code>color: inherit;</code></p>
<p>Source order and Specificity are coupled together when considering CSS. Both are
really tricky to understand as well, CSS, or rather CSS parsers, assign weights
to selectors when parsing the CSS into an
<a href="#ast" data-css-link-article="true" data-footnote="Abstract Syntax Tree" id="ast">AST</a>.
The breakdown is as follows:</p>
<ul>
<li><code>!important</code></li>
<li>Inline Styles via the <code>style</code> attribute</li>
<li>ID Selectors <code>#foo { ... }</code></li>
<li>Class Selectors, Pseudo class selectors, attribute selectors</li>
<li>Element Selectors</li>
</ul>
<p>These are commonly laid out as a comma separated list of numbers something like
0,0,0,0 (notice that there is no value assigned to <code>!important</code>). This is known
as Specificity.</p>
<p>If you happen to have, in your CSS two selectors that target the same element
the one with the highest specificity will win over no matter the order of your
CSS. However if both selectors share the same specificity, then the one that was
declared last will win out. Sometimes this convinces new CSS developers to
naively move the styling they want to take effect to the bottom of their CSS
document<sup><a id="user-content-fnref-1" data-footnote-ref="true" aria-describedby="footnote-label" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#user-content-fn-1">1</a></sup></p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="codebase-growth">Codebase Growth:</h4>
<p>This is something that is only highlighted when you have a codebase that has
existed for any fairly long amount of time. This also isn&#x27;t a concept that only
happens in CSS, it happens to any codebase, it just becomes slightly more
complicated because CSS is separated from the content that it is styling. This
was solved in Javascript with the invention of JSX where React was able to move
the content into the Javascript.</p>
<p>This issue doesn&#x27;t only affect React applications though, at Wayfair I ran into
this issue hundreds of times, where I was tasked with redesigning something and
I need to decide whether to make a new file to style the stuff and add new
classnames to everything or to spend the hours of time to search through the
current styles and determine which need to stay and which need to remove. It
gets even more complicated when you find out that the CSS you might be editing
to fit your page/section is possibly in use somewhere else, so any edits you
make will affect everyone else.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="static">Static:</h4>
<p>Prior to CSS4, every shared value in CSS had to be repeated when using it on a
different element. So if you had defined your brand color across a few selectors
or many selectors simply as the hexadecimal value you would have to do a search
and replace on the code to change it if your brand colors changed.</p>
<p>This issue has mostly been addressed for us web developers, most organizations
have solved this by introducing pre-processors into their workflow, at Wayfair
we use SCSS and Grunt, on my personal projects I use PostCSS and Webpack. Even
the CSS spec has added in ways to solve this with CSS Custom Attributes aka CSS
Variables.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="resolving-the-conflict">Resolving the Conflict:</h3>
<p>CSS, as with every language for web development, is a growing standard with
flaws. Some of these flaws are being addressed in newer editions, and some of
these flaws are addressable by adapting your build processes. I intently believe
that CSS has a ton of value in it&#x27;s current form, and that as the people that
write the spec add more and more value to the language.</p>
<p>I think build tools like CSS Modules can allow developers to build using the CSS
standards and then in the background the build process handles the conversion of
standard CSS to either inline styles or modules of scoped styles in the HTML.</p>
<p>I love web standards, and I love being able to use them but sometimes it feels
like developers want to move towards using their own build process that takes
this great new technology and converts it into old technology. Sure this is
great for the end users but it also feels like a way to relieve the pressure put
on browser vendors to add these new standards to their parsing engines.</p>
<p>So thats my take on the great CSS debate, feel free to reach out to me by <a href="https://twitter.com/intent/tweet?url=https%3A%2F%2Fmatthamlin.me%2FPosts%2F2016%2FSeptember%2FSeptemberUpdate&amp;via=immatthamlin&amp;text=%20%20-&amp;" class="link link--article">tweeting
to me</a>, <a href="mailto:matthewjameshamlin@gmail.com" class="link link--article">emailing
me</a> or <a data-footnote="+1 425 210 0980" href="sms:+14252100980" class="link link--article">texting
me</a> with your thoughts on whether CSS is good. I would also love to learn how
you use CSS either at work or on your own projects!</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<section data-footnotes="true" class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>Heck, even I did this when I was first getting interviewed for my current
position at Wayfair because I didn&#x27;t completely understand the concept yet
üòÑ <a data-footnote-backref="" aria-label="Back to reference 1" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline data-footnote-backref" href="#user-content-fnref-1">‚Ü©</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/css-debate.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[October 4th]]></title>
            <link>https://matthamlin.me//2016/october/october-4th</link>
            <guid>https://matthamlin.me//2016/october/october-4th</guid>
            <pubDate>Tue, 04 Oct 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<link rel="preload" as="image" href="/images/october-4th/pixel.jpg"/><link rel="preload" as="image" href="/images/october-4th/pixels.jpg"/><link rel="preload" as="image" href="/images/october-4th/pixels_front.jpg"/><link rel="preload" as="image" href="/images/october-4th/chromecast.jpg"/><h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="quick-look">Quick Look:</h3>
<p>A TL;DR for the article below, feel free to jump to the section you want to read
more about.</p>
<p>What <del>will</del> <em>might</em> be announced at the event:</p>
<ul>
<li>Google Pixel (5&quot; phone) - <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#the-google-pixel-and-pixel-xl">More Here</a></li>
<li>Google Pixel XL (5.5&quot; phone) - <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#the-google-pixel-and-pixel-xl">More Here</a></li>
<li>Chromecast Ultra (maybe named something else, see <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#the-chromecast">here</a>)</li>
<li>Android 7.1 - <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#android-71">More Here</a></li>
<li>Google Andromeda - <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#andromeda">More Here</a></li>
<li>Nexus 7 2016 running Andromeda - <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#nexus">More Here</a></li>
<li>Daydream VR Viewer - <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#daydream-vr-viewer">More Here</a></li>
<li>Google Home - <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#google-home">More Here</a></li>
<li>Google WiFi - <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#google-wifi">More Here</a></li>
<li>Overview - <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#overview">More Here</a></li>
</ul>
<p>As a side-note, I want to say that although this article is meant to be
comprehensive, a lot of the content will be short and straight to the point.
This is because of a couple reasons, the first is that I didn&#x27;t get a degree in
professional writing, much like many bloggers around me. The second is that if I
took my time to completely flush out this article, it would be posted after the
event, at which time I would be writing another article with all the actual news
that gets announced. With that out of the way lets get into the content.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="the-google-pixel-and-pixel-xl">The Google Pixel and Pixel XL</h4>
<p>This is the baseline phone, if you are familiar with the past Nexus phones this
is basically the Nexus 5 but with a great build quality. The price is rumored to
start at $649 for the 32GB baseline variant. It comes with a 1080p (1920x1080)
5 inch display, Qualcomm Snapdragon 821, 3 or 4 GB of ram, 12MP rear and 8MP
front-facing cameras, 2,770mAh battery. It also will come with USB-C, a
fingerprint sensor and the regular 3.5mm headphone jack.</p>
<img src="/images/october-4th/pixel.jpg" alt="A high res render of the Google Pixel" height="600" width="1000"/>
<p>Both the Pixel and the Pixel XL have been leaked in photos as shown below:</p>
<img src="/images/october-4th/pixels.jpg" alt="A high res render of the Google Pixel" height="728" width="650"/>
<img src="/images/october-4th/pixels_front.jpg" alt="A high res render of the Google Pixel" height="720" width="608"/>
<p>A lot of the initial feedback from leaked photos of the Pixel and Pixel XL was
negative because of the size of the top and bottom bezels. I have since come to
accept the bezels, I think they will be bearable, what I will miss is the
smaller screen size compared to my Nexus 6.</p>
<p>The Pixel XL is basically an exact copy of the Pixel, except for a larger screen
size coming in at 5.5 inches and at a higher screen resolution of 2560x1440.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="the-chromecast">The Chromecast</h4>
<p>This is the interesting one, first off I am still sure that Google will release
a new 4k Chromcast, some are calling this the Chromecast Ultra, however I feel
like Google has been shifting away from the Chromecast name towards just Cast.
So we might see a change in the name of the chromecast device. Other than 4k
support not that much as been leaked about this, they might not even spend that
much time on it during the event.</p>
<img src="/images/october-4th/chromecast.jpg" alt="A high res render of the Google Pixel" height="728" width="546"/>
<p>The price is expected to be $69 dollars, so double that of the baseline
Chromecast, and the current generation of Chromecast&#x27;s will still also be
available.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="android-71">Android 7.1</h4>
<p>We have known for a while that there have been some devices running Android 7.1
in the wild, most likely some Googlers with the new Pixel phones, or updated
OS&#x27;s on their own devices. This time Android might be splitting up into two
separate versions, or at least two variants, the stock Android and then the
Google version of Android. This has been the trend ever since the release of the
Google Launcher with Google Now. Now though Google is starting to bake more
features into their variant of the OS through Google Play Services.</p>
<p>I am really looking forward to this mainly because I believe Google can build
some really great features on Android. There are many people who use Android
without using any Google services, and they are the people who will probably be
for Google doing this because this is going to be a seperation of Google and
Android.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="andromeda">Andromeda</h4>
<p>This is the new and amazing news that only broke this week. Google Andromeda is
a merger of Chrome OS and Android and is supposedly going to be on the Pixel 3
laptop in Q3/4 of 2017, and maybe even the new Nexus 7 tablet announced at this
event. There really isn&#x27;t that much that is known about this OS yet, I kind of
doubt that the Nexus 7 will be released with it at this event because there has
been no information about the OS yet.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="nexus">Nexus?</h4>
<p>Some rumors have been pointing to Huawei-made Nexus 7 that will run Andromeda,
however if this is actually true I doubt it will be unveiled at the event
because nothing else has leaked about it.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="daydream-vr-viewer">Daydream VR Viewer</h4>
<p>A lot of the hype around this has been caused because of a marketing stunt by
Google Cardboard in the UK recently, however that stunt was only for Google
Cardboard. We don&#x27;t know that much about the Daydream Viewer, other than some
patents that Google filled recently.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="google-home">Google Home</h4>
<p>This is one of the exciting products to be released at the event, Google Home is
going to be a competitor to Amazon&#x27;s Alexa and going to be Google&#x27;s greatest
attempt at expanding into the home since the chromecast launch, or even the
Nexus Q.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="google-wifi">Google WiFi</h4>
<p>This is sort of a wildcard one, we have heard some about this device (or
devices) but it seems odd to launch this when Google Home, and Google OnHub both
exist. Supposedly this is going to be a competitor of Eero, a mesh wifi network
system.</p>
<h4 class="text-xl font-medium text-gray-600 dark:text-gray-400" id="overview">Overview</h4>
<p>Ultimately I am mostly excited for the Pixels and the Daydream Viewer, I expect
to buy a Pixel xl, and a Daydream Viewer. If I had a TV I would also consider
the Chromecast Ultra, but I won&#x27;t be going for the Google Home device simply
because my apartment is small enough that I can use my phone or tablet at all
times with &#x27;Ok Google&#x27; voice commands.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/october-4th.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[My New Website]]></title>
            <link>https://matthamlin.me//2016/august/my-new-website</link>
            <guid>https://matthamlin.me//2016/august/my-new-website</guid>
            <pubDate>Sun, 28 Aug 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Over the past 2 or three weeks I have been both busy at work and also busy
outside of work. Most of my work that I have been doing outside of work has been
devoted to this website. I originally made this website in (apparently) October
of 2015, and since then I have redesigned the site only about 5 or 6 times, each
time fully re-hauling the entire infrastructure and design language. These past
two or three weeks have been spent building out an infrastructure that will
hopefully be a bit easier to manage. I still will do a ton of things manually,
however I generally prefer to touch the code myself more often than not üòÑ.</p>
<p>I wanted to write out everything that I have done, and also talk a bit about the
code that I am using to build this site. Don‚Äôt worry if you don‚Äôt know that much
about web development you can still read along most of this post will be really
low level stuff.</p>
<p>I wanted to start this off with a brief timeline of all the visual changes I
have made to my site. Unfortunately the css for the site snapshots on the
Wayback machine doesn‚Äôt seem to load (either that or it didn‚Äôt collect the css).
In fact I can only find one version of the site that has working css at all and
unfortunately this version also rendered part of the site via JS so that doesn‚Äôt
show up either<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>. The version that I can find is
<a href="http://web.archive.org/web/20160111084107/http://matthamlin.me/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">here</a>. I had
just found out about <a href="//getskeleton.com">skeleton-css</a> and wanted to
put it to use in my own website. I loved this version of my site, it was clean
and also a bit colorful.</p>
<p>The current version of the site, shown below in case it changes in the
future, is broken down into basically 4 page types as it is now. The first is
the <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#image1">home page</a> the second is <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#image2">my resume</a>, the third is my <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#image3">blog archive</a>, and the fourth is the layout of a <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#image4">blog post</a>.</p>
<figure id="image1" class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:150.36458333333331%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/my-new-website/landing.png" height="5774" width="3840" loading="lazy" class="rounded-lg" alt="Landing Page"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">Landing page</figcaption></figure>
<figure id="image2" class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:378.1770833333333%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/my-new-website/resume.png" height="14522" width="3840" loading="lazy" class="rounded-lg" alt="Resume Page"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">Resume page</figcaption></figure>
<figure id="image3" class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:135.20833333333334%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/my-new-website/archive.png" height="5192" width="3840" loading="lazy" class="rounded-lg" alt="Archive Page"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">Archive page</figcaption></figure>
<figure id="image4" class="p-2 border-2 border-gray-300 rounded-lg bg-gray-100"><div style="position:relative;width:100%;padding-bottom:125.93749999999999%" data-radix-aspect-ratio-wrapper=""><div data-slot="aspect-ratio" class="flex justify-center" style="position:absolute;top:0;right:0;bottom:0;left:0"><img src="/images/my-new-website/post.png" height="4836" width="3840" loading="lazy" class="rounded-lg" alt="Blog post page"/></div></div><figcaption class="text-gray-500 border-l-4 pl-4 py-2 m-2 border-gray-500 italic">Blog post page</figcaption></figure>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="the-design">The Design:</h3>
<p>I originally came up with the current basic design in June of this year, having
a very simple and minimal landing page really excited me. I wanted to make it
very easy for visitors to know just how much I like to keep things minimal.</p>
<p>Any good design article wouldn&#x27;t be good without showing off the various design
assets used across the site, so below is a quick demonstration of the various
assets I used when designing and developing this version of the website.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="code">Code:</h3>
<p>I was going to try and add an interactive file structure map here on this
article but figured it would be easier to discuss it. My entire site is built
off of HTML and CSS. I don&#x27;t use any JS simply because I don&#x27;t need any
javascript for functionality. All my HTML is hand written and I use emmet to
help in writing it efficiently. All my css is compiled from SCSS files. I do the
compiling myself on my machine before pushing to Github because Github doesn&#x27;t
handle compiling when pushing new commits.</p>
<p>For compiling my SCSS I use Grunt, and I know its now considered an out of date
build system but I like it and I find it works pretty well for what I need it to
do.</p>
<p>For the most part that is the site. Everything is wired up is done by hand, I do
this because I really enjoy touching code. So whenever I make a new post I copy
my template html, edit in the title&#x27;s and other data and then add a link back to
it from the archive page when I am ready to publish it.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->To combat this in the future I plan on making a snapshot branch on Github and forking those out into their separate repos (maybe).</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/my-new-website.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Pull Quotes]]></title>
            <link>https://matthamlin.me//2016/august/pull-quotes</link>
            <guid>https://matthamlin.me//2016/august/pull-quotes</guid>
            <pubDate>Wed, 24 Aug 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently read <a href="https://adactio.com/journal/11102">this</a> interesting
blog post about why pull quotes are used on the web. The article talks a bit
about why pull quotes existed in the first place<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>. and the author feels that
web developers blindly followed what they were doing in print and implemented
them on the web.</p>
<p>Some may find this statement a bit overreaching however I actually think it is
right on the target. If you think about it most of web development from the
early days even up to now has been trying to emulate what you can do in paper
(be that newspaper, books, or magazines). The ‚Äúholy grail‚Äù problem for web
development was how do I make my website look like a magazine.</p>
<p>I understand a need for developers to make their sites look normal or ordinary.
Heck this blog post is ordinary in that it is a centered stream of paragraphs
just like newspapers and books before it. Part of the reason behind this is
because readers happen to read in an ‚ÄúF‚Äù shaped pattern where they read from
left to right (if their language is laid out like that) for the first line or
two (generally the headline), then skip down the page, read a bit more and then
skim down the rest of the page. This has been analyzed by many different groups
by tracking eyes while reading webpages and other media.</p>
<p>I am not here to say that we should completely drop pull quotes from our writing
or from our web layout standards, nor am I saying that we should avoid these
deep layout patterns (they make reading really easy for a lot of people). What I
do want to say is that pull quotes should be more than just direct copies of a
sentence that already exists in the body copy of the article. If you go through
and read most of my blog posts, you will undoubtably see a ton of block quotes
meant to stand out to the reader. I am proud to say that I have tried to make
each and every one of those contain different content that what is found in the
body of the post. This is because I want users to quickly read a bit about the
article by reading the block quotes, and then if they want to read the article
the block quotes offer extra value when reading.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->In newspaper‚Äôs people would flip through the pages and pull quotes were
intended to grab the reader‚Äôs attention and pull them into reading the article.
I seriously doubt that they were named pull quotes because they wanted to pull
the reader in.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/pull-quotes.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Redesign v5]]></title>
            <link>https://matthamlin.me//2016/august/redesign-v5</link>
            <guid>https://matthamlin.me//2016/august/redesign-v5</guid>
            <pubDate>Wed, 24 Aug 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Technically the name of this document is <var>designV5.html</var> however I
really don&#x27;t know what version this is of my personal webpage. I know I have
written about redesigning this website about 2 or three times now
(<a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2016/april/redesign">once here</a> and again <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2015/november/weekend-projects">here</a>).</p>
<p>The point of the matter is that I have redesigned my website several times over
and each time I generally design it using the new things I have learned about
design and web development. This time I wanted to focus on revitalizing my blog
and making my website look a bit more professional.</p>
<p>I have officially dropped any need for external resources (css, images, other
assets are all locally hosted), and as with the past redesign I have completely
cut out any Javascript resources. Of course all this leads to faster lead times
which is a great benefit.</p>
<p>One of the things that I also realized along the redesign process was that I
will no longer be supporting any browser older than Edge, that means that I am
doing no optimization with any of the css to let it work with older browsers.
The main reason I am doing this is because I believe writing code to work with
older browsers is fairly useless at this point <em>(Sorry <small>not
sorry</small> IE8 users)</em>.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/redesign-v5.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Attribute Selectors]]></title>
            <link>https://matthamlin.me//2016/august/attribute-selectors</link>
            <guid>https://matthamlin.me//2016/august/attribute-selectors</guid>
            <pubDate>Sun, 21 Aug 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I have recently been reading a lot of interesting articles and looking at a few
interesting Codepen&#x27;s that deal with attribute selectors. The two links that
stand out the most are
<a href="https://css-tricks.com/weird-design-languages-with-attributes/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this article</a>
about making a design language with attribute selectors and
<a href="http://codepen.io/alexzaworski/pen/xOBmXP" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">this</a> Codepen about making a color
mixer from attribute selectors.</p>
<p>After I saw these two ideas expressed I began to think about specificity.
Regularly when dealing with css developers need to keep in mind the number of
selectors they use to style specific parts of a website. It really only gets
complicated when managing a large codebase with several developers all authoring
new code and also updating old code. <em>So if you are looking for a solution for a
large company (more than 5 developers) this is probably not the way to go.</em></p>
<p>The large reason why I began to see Attribute Selectors as being awesome is
because I wouldn&#x27;t need to arbitrarily increase my specificity just to style
things like id specific elements. This becomes immediately valuable when dealing
with any links that link to a specific element on the current document.</p>
<pre class="shiki shiki-themes vitesse-light vitesse-dark" style="background-color:#ffffff;--shiki-dark-bg:#121212;color:#393a34;--shiki-dark:#dbd7caee" tabindex="0"><code><span class="line"><span style="color:#999999;--shiki-dark:#666666">#</span><span style="color:#B07D48;--shiki-dark:#BD976A">id</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> red</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">[</span><span style="color:#B07D48;--shiki-dark:#BD976A">id</span><span style="color:#AB5959;--shiki-dark:#CB7676">=</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#B56959;--shiki-dark:#C98A7D">id</span><span style="color:#B5695977;--shiki-dark:#C98A7D77">&#x27;</span><span style="color:#999999;--shiki-dark:#666666">]</span><span style="color:#999999;--shiki-dark:#666666"> {</span></span>
<span class="line"><span style="color:#998418;--shiki-dark:#B8A965">  color</span><span style="color:#999999;--shiki-dark:#666666">:</span><span style="color:#A65E2B;--shiki-dark:#C99076"> red</span><span style="color:#999999;--shiki-dark:#666666">;</span></span>
<span class="line"><span style="color:#999999;--shiki-dark:#666666">}</span></span></code></pre>
<p>These two snippets of css are exactly the same, except for their specificity,
because attribute selectors are equivalent to class selectors and id selectors
are equivalent to 0,1,0,0. In case you can&#x27;t tell yet, this s huge! Now the only
time that developers have to worry about specificity is when nesting rules in
preprocessors like SASS or LESS.</p>
<p>But wait, theres more! You actually don&#x27;t have to worry about nesting selectors
either! Attribute selectors are so smart that you can build out &quot;nested&quot;-like
selectors simply with their own operators. Attribute selectors have this sweet
functionality with matching attributes. These are fully explained in this great
article by CSS-Tricks which can be found
<a href="https://css-tricks.com/attribute-selectors/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">here</a>. The gist is that you can
select based on if the attribute is exactly equal to something, begins with a
certain value, ends with a certain value, is in a space separated list, and is
in a dash separated list.</p>
<h5 class="text-lg font-medium text-gray-500" id="exactly-equal-to">Exactly Equal to:</h5>
<p><code>[attribute=&#x27;something&#x27;]</code></p>
<h5 class="text-lg font-medium text-gray-500" id="begins-with-a-value">Begins with a value:</h5>
<p><code>[attribute^=&#x27;something&#x27;]</code></p>
<h5 class="text-lg font-medium text-gray-500" id="ends-with-a-value">Ends with a value:</h5>
<p><code>[attribute$=&#x27;something&#x27;]</code></p>
<h5 class="text-lg font-medium text-gray-500" id="space-separated-list">Space separated list:</h5>
<p><code>[attribute~=&#x27;something&#x27;]</code></p>
<h5 class="text-lg font-medium text-gray-500" id="dash-separated-list">Dash separated list:</h5>
<p><code>[attribute|=&#x27;something&#x27;]</code></p>
<h5 class="text-lg font-medium text-gray-500" id="substring-match">Substring match:</h5>
<p><code>[attribute*=&#x27;something&#x27;]</code></p>
<h5 class="text-lg font-medium text-gray-500" id="case-insensitivity-1">Case Insensitivity <sup><a id="user-content-fnref-1" data-footnote-ref="true" aria-describedby="footnote-label" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="#user-content-fn-1">1</a></sup>:</h5>
<p><code>[attribute=&#x27;something&#x27; i]</code></p>
<p>With all these we can make basically any nested structure you might make in SASS
or in LESS.</p>
<p>I haven&#x27;t yet updated my css for this site to use attribute selectors but it is
on my list. The main reason I haven&#x27;t done it yet is because its really
semantic. So far it includes a lot of typing whereas a simple class syntax and
nesting classes with preprocessors is really easy to type and is still really
powerful. I will be replacing all id selectors with attribute selectors however
because it will make my code a lot easier to manage in the long run.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<section data-footnotes="true" class="footnotes"><h2 class="sr-only" id="footnote-label">Footnotes</h2>
<ol>
<li id="user-content-fn-1">
<p>Note: Operator here can be any of the predefined operations in the above
examples, such as <code>=</code>, <code>~=</code>, <code>|=</code>, <code>^=</code>, <code>$=</code>, and <code>*=</code>. Also the <code>i</code> can be
lowercase or uppercase. <a data-footnote-backref="" aria-label="Back to reference 1" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline data-footnote-backref" href="#user-content-fnref-1">‚Ü©</a></p>
</li>
</ol>
</section>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/attribute-selectors.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[August]]></title>
            <link>https://matthamlin.me//2016/august/august</link>
            <guid>https://matthamlin.me//2016/august/august</guid>
            <pubDate>Sat, 20 Aug 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Where to start? There has been 4 months since my last post on my blog here. A
lot has changed since that last post. First off I am now located in Boston
Massachusetts. (Hopefully I spelled that correctly, I&#x27;ve had really bad luck
with spelling it right on the first time). I am working at a company called
<a href="http://wayfair.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Wayfair</a> (and probably should say that I don&#x27;t speak for
the company at all).</p>
<p>I have been working as a web developer crushing CSS and HTML bugs, as well as
shipping several large new features for Wayfair and it&#x27;s affiliated brands.
While doing this work I have begun to hate web development work, at least work
for a large company and brand (<s>I will probably write another post about these
feelings.</s> <del><a href="/post/Web-Development-Sucks">Here</a> is a link to that
post.</del> <strong>update: I have no idea where that blog post has gone to</strong>)</p>
<p>Over the past few months I have been working on several projects, one for a
small startup which will launch soon, another that is coming up for another
startup, some small personal projects and mostly searching for work. I haven&#x27;t
been as active as I would have liked with my personal projects, so now I have
been focusing on side projects in the evenings and on the weekends.</p>
<p>I have also been working on revising my diet, I bought
<a href="https://www.soylent.com/product/coffiest/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Coffiest</a> a week or two ago and have
been addicted to it since the second one üòÑ. After I began to like that I
decided to pull the trigger and bought some
<a href="https://www.spacenutrientsstation.com" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">&quot;Space Food&quot;</a>. This stuff is really odd
at first but once you get used to it its actually quite interesting. I have
begun to replace my lunches at work with simply a cup of powder and some water.
Unfortunately I still have a ton of real food in my fridge that I need to go
through first before completely switching over.</p>
<p>The only things I really only need to change are my productivity habits/systems
and also starting to get some bodyweight fitness activities into my daily
schedules.</p>
<p>I plan on writing a lot more as I have several blog ideas built up over the
months that I wasn&#x27;t writing, so stay tuned for more!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/august.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Redesign]]></title>
            <link>https://matthamlin.me//2016/april/redesign</link>
            <guid>https://matthamlin.me//2016/april/redesign</guid>
            <pubDate>Mon, 04 Apr 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently redesigned my entire website for two reasons. The first was that I
wanted to try and use a CSS library I have started work on, and the second was
because I felt like my current site was a bit chaotic.</p>
<p>I have written several posts about redesigning certain websites whether they are
mine or some other sites, and for most of those writeups I went into the
specific design principles or explained the different reasons as to why I used
specific things. This writeup will not be like those as I am currently fairly
short on time. instead I wanted to talk about a few things that I am using and a
few things that I am cutting entirely from the website.</p>
<p>The first thing that I cut, and not initially by need or want, was any sort of
external javascript file. I used to be loading in jQuery and a few external
files because I was using things like mustachejs for templates and loading in a
ton of data. Now I simply use javascript for Google analytics and thats all. I
haven&#x27;t done the due diligence of checking load times of my website before the
redesign and after the redesign, however I am fairly certain that by removing a
ton of the waste the site should be loading faster for a lot of people.</p>
<p>The last thing I want to add is to talk a bit about what I used for my css. The
entire layout is done using¬†<kbd>flexbox</kbd>¬†which made the design part
incredibly easy. This of course means that the website will look completely
terrible when viewed from browsers that don&#x27;t support these css standards, but I
am alright with that. I was considering using the Grid Layout CSS features but
decided to not use it because only a small number of browsers actually support
Grid Layout and I figured it would be easier for me to simply use flexbox.</p>
<p>As I said in the beginning I am using a lot of my own CSS / HTML assets. In fact
I am only really using Ion Icons and Normalize.css as my external 3rd party
resources. I am sure I could have optimized my site more but as it stands now I
am fairly happy with how it works and feels.</p>
<p>As a sidenote, about a month ago I moved all my sites over to Cloudflare in
order to setup HTTPS on all my domains. This has been really easy to do and I am
happy with how simple it was to actually setup.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/redesign.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Afraid]]></title>
            <link>https://matthamlin.me//2016/january/afraid</link>
            <guid>https://matthamlin.me//2016/january/afraid</guid>
            <pubDate>Fri, 22 Jan 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>If you asked me any time in the past three years at college about if I wanted to
stay in college or leave I would have been eager to cut you off and say I wanted
to get out as soon as possible. However now that I am embarking on my final
semester which ends May 30th, I am scared every single day to think about what
happens come June 1st.</p>
<p>I don‚Äôt mean to harp on the Millennial hype-train, however in about 4 days I am
starting the final period of my schooling that I have been working on for 16 and
a half years by now. Now if I interviewed myself and my friends a few years ago,
the main response I would have gotten would be to get out of school as soon as
possible.</p>
<blockquote>
<p>Students in High school and Middle school and Elementary school only want to
get out of school, most seniors in college never want to leave school.</p>
</blockquote>
<p>This final semester is going to have a lot going on for me, but the only
consistent thought on my mind is what happens next? Most of my friends, which I
find very surprising, are going to stay in school and go for their masters. I
however am going to leave college and (hopefully) going to go to a nice, amazing
job that I thoroughly enjoy</p>
<p>Yet every single night until then I am going to fear about the what-ifs.</p>
<ul>
<li>What if I don‚Äôt have a job by June 1st?</li>
<li>What if I have to come back to live at my parents place?</li>
<li>What if this whole thing was just a mistake, like what if I chose the wrong
major and field?</li>
</ul>
<p>These thoughts keep me up far later at night than my friends at college.</p>
<p>I brought this up on twitter a week or two ago as well, where I tweeted:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><div lang="en" dir="ltr"><p>It&#x27;s so odd to think about events happening post-graduation for me this
year.‚Äî Matt Hamlin (@immatthamlin)<!-- --> </p><a href="https://twitter.com/immatthamlin/status/688932733490343938"><p>January 18, 2016</p></a></div></blockquote></div>
<p>And its true, even just thinking about movie releases in December of this year
is odd. Its almost as if it will end up being two completely separate periods
and even lives for me. In the first one I am still my normal student self, and
in the second one, I am a completely new person.</p>
<blockquote>
<p>If your dreams do not scare you, they are not big enough.</p>
</blockquote>
<p>Ultimately this could be a good thing that this is my scariest time of my life,
if the above quote by Ellen Johnson Sirleaf has any truth to it. The fact of the
matter is that things will be changing in the coming months, and I sincerely
hope that they are for the better rather than the worse.</p>
<p>If you recently transitioned from school to the professional world, please email
me/tweet at me with what you wished you had known before leaving school, and if
you‚Äôre in the same boat as me reach out with some of your plans after school!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/afraid.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Clientside]]></title>
            <link>https://matthamlin.me//2016/january/clientside</link>
            <guid>https://matthamlin.me//2016/january/clientside</guid>
            <pubDate>Tue, 19 Jan 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Recent trend articles are always the popular kind of thing to post on a blog,
however I wanted to quickly writeup a simple little prediction about web
development because the web is changing more than it ever has in the past.</p>
<p>In the past web applications were huge codebases, and more importantly the code
was tightly merged meaning that the front end code (html) was written directly
in PHP code. This was very helpful for the beginning of the web 1.0 revolution.
PHP was and is a very powerful language to handle web sites and data, however as
the web entered a new age browsers got far more powerful. Browsers started
becoming more amazing, offering more access to the CPU and other OS-level
features.</p>
<p>Browsers like Chrome and Firefox began to grow in user numbers, as well as
features. Web developers began to test the limits of their browsers by making
awesome experiments<span class="inline-flex md:hidden"><button data-state="closed" data-slot="tooltip-trigger"><span class="bg-neutral-300 px-1 text-sm mx-1 align-baseline items-center justify-center rounded-full">fn-<!-- -->1</span></button></span><sup id="fn-1" class="hidden md:inline [&amp;:target]:border-dashed [&amp;:target]:border-primary border-1\ [&amp;:not(:target)]:border-transparent"><a href="#fnref-1" class="text-primary hover:underline focus:underline">[<!-- -->1<!-- -->]<span class="sr-only">Jump to footnote</span></a></sup>. However the whole of web development didn&#x27;t change that
much, people shifted over to Node.JS as the fundamental server-side architecture
from PHP, and their HTML was served in much the same way.</p>
<p>However the major key was that the shift to Node separated the server logic from
the html through routers and tools like Jade. There was still a strict binding
between the server and the client, however there was a fundamental shift from
writing the client-side code on the server-side scripts.</p>
<p>And all was well with this new shift, companies were hiring Node developers and
Rails developers instead of PHP developers. These companies called their
positions Full Stack web developers, trying to find a developer who could do it
all.</p>
<p>Yet, as we have learned from the past developments in the web, things were a
changing. Companies like Fieldbook, Airtable, and services like
<a href="https://www.producthunt.com/tech/formsubmit" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">formsubmit</a> began to rise and a
new trend began to take place. Some web developers shifted away from working on
server-side coding and began to couple the logic on the client-side scripts.
With these new technologies and entire server-side app could be written with a
few API calls, and a relatively small sized JS file to run in the browser. A
complete web app will only consist of a few static files for views
(html/MST/whatever template you choose) and controllers (JS) and the model will
be stored on 3rd party services. One could even serve a complete functioning
application through a CDN, and in fact many full applications can be served from
Github safely and securely. The entire process of writing javascript on Node is
and will begin to get out of date.</p>
<p>Another amazing bonus to this new architecture of web development, because of
how simple it will be to develop complete web applications, and reduced cost for
servers, more and more people will be able to build things on the web. The web
has always been in a sense a walled garden with many of the plants growing over
the walls. People could build little applications and things, yet when they went
to share that with others there was an immense barrier to buy a domain name and
a server to make their creation public. So with this new architecture anyone
could get a free account on Github, Dropbox, or some other cloud storage
platform, write some JS, HTML, and CSS and upload it to share with others.</p>
<p>However there are yet again some issues with this setup, as there were issues
with the previous status quo, and the status quo before that. Exposing
authentication processes to end users could end up being a very bad idea. This
might change when services like Airtable and Fieldbook add Authentication
plugins for their database management services. Yet for now most authentication
needs to happen on the client-side of the application.</p>
<p>One other major flaw in this setup could be slower times, most current web
frameworks such as Angular and React all have sections talking about fouc (flash
of unstyled content) and how to prevent it (Angular handles this by having a
skeleton app layout in the html that will get overwritten when the framework
loads the data from the data source). With applications that run on the client,
there are two primary render times, when the static HTML is rendered and when
the data is ready to be rendered on the page. This can be something that will
change as browsers get faster (with the new http2 standard and parallelism) and
also with faster internet speeds, as well as hybrid storage techniques
(localStorage).</p>
<p>Ultimately the web changes more often than a political candidate. It might start
with a completely new server language to handle everything for web developers,
and the next month everyone will shift to using some new JS client-side
framework to build entire application platforms. One thing will not change as
web development progresses, more and more applications will begin to be written
as client-side applications.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="footnotes">Footnotes:</h3>
<p id="fnref-1" class="hidden md:inline-block [&amp;:target]:border-dashed [&amp;:target]:border-primary border-2 border-transparent"><a href="#fn-1" class="text-primary hover:underline focus:underline">üëÜ<span class="sr-only">Back to reference</span></a> <!-- -->Mr. Doob was one of my most well remembered sites, with cool little
experiments written for Chrome. More information about these can be found <a href="http://mrdoob.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">here</a>.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/clientside.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[10,000 Characters]]></title>
            <link>https://matthamlin.me//2016/january/10000-characters</link>
            <guid>https://matthamlin.me//2016/january/10000-characters</guid>
            <pubDate>Wed, 06 Jan 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>So I might be a bit late to the party to write about Twitter considering a new
10,000 character limit for tweets but I had a pretty interesting idea the other
day which I expressed in this tweet:</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><div lang="en" dir="ltr"><p>What if <a href="https://twitter.com/twitter">@twitter</a> is building
&quot;Instant Articles&quot; that anyone can write?<!-- --> <!-- -->
<a href="https://t.co/CLVcER5C6B"><a href="https://t.co/CLVcER5C6B" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">https://t.co/CLVcER5C6B</a></a>‚Äî Matt
Hamlin (@immatthamlin)<!-- --> </p><a href="https://twitter.com/immatthamlin/status/684528854694670337"><p>January 6, 2016</p></a></div></blockquote></div>
<p>Facebook developed a service known as Instant Articles (written about
<a href="http://www.theverge.com/2015/5/13/8595263/facebooks-instant-articles-arrive-to-speed-up-the-news-feed" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">here</a>)
where publishers can partner with Facebook to upload their content to Facebook&#x27;s
servers in a lightweight format. Then this content can be loaded quickly within
Facebook&#x27;s applications. As I expressed in the tweet above, a great way for
Twitter to implement longer tweets would be in the form of simple &quot;Instant
Article&quot;-like pages.</p>
<p>Lets say that I am reading my feed on Twitter, and I find a tweet that starts
off as:</p>
<blockquote>
<p><em>Some random blog post about Twitter and Facebook... [Read More]</em></p>
</blockquote>
<p>So when I click on the Read More link, the full post slides over my feed from a
side of the screen. I can then read the full post and then click back to the
feed. This way these longer tweets will be hidden from the streamlined feed that
everyone is used to, and if someone decides to post to these longer tweets, a
simple button will be all that users will see so that these tweets don&#x27;t
overflow the feed like Owen Williams recently tweeted as a joke.</p>
<div class="bg-blue-100 dark:bg-blue-900/20 p-4 rounded-lg border border-blue-400 dark:border-blue-600 prose prose-blue"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-twitter w-8 h-8 block mb-2 text-blue-400 dark:text-blue-600" aria-hidden="true"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg><blockquote><div lang="en" dir="ltr"><p>H <br/>E<br/>Y<br/>
<br/>J<br/>U<br/>S<br/>T<br/>
<br/>T<br/>E<br/>S<br/>T<br/>I<br/>N<br/>G<br/>
<br/>O<br/>U<br/>T<br/>
<br/>T<br/>H<br/>A<br/>T<br/>
<br/>N<br/>E<br/>W<br/>
<br/>1<br/>0<br/>0<br/>0<br/>0<br/>
<br/>C<br/>H<br/>A<br/>R<br/>A<br/>C<br/>T<br/>E<br/>R<br/>
<br/>L<br/>I<br/>M<br/>I<br/>T<br/>
<br/>W<br/>H<br/>A<br/>T<br/>
<br/>D<br/>O<br/>
<br/>Y<br/>O<br/>U<br/>
<br/>T<br/>H<br/>I<br/>N<br/>K<br/></p><br/><p>üíÅ‚Äî Owen Williams ‚ö°Ô∏è (@ow)<!-- --> </p><a href="https://twitter.com/ow/status/684528705561989121"><p>January 6, 2016</p></a></div></blockquote></div>
<p>A side note that probably needs to be made is that the current trend is to bash
Twitter for becoming more like Facebook with now potentially longer tweets and
the recent change from Favorites to Likes, however this kind of implementation
feels like a natural way to handle longer posts. Since the inception of the
social network, many of the features of Twitter have been &quot;developed&quot; by the
community (hashtags and at mentions are the most significant, to recent
developments like tweetstorms and screenshorts) so it would only make sense for
some simple application to implement some sort of longer tweet in a popular
style for Twitter to pick it up and implement that format into the service.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/10000-characters.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Building in 2016]]></title>
            <link>https://matthamlin.me//2016/january/building-in-2016</link>
            <guid>https://matthamlin.me//2016/january/building-in-2016</guid>
            <pubDate>Sun, 03 Jan 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I often read about people who set impressive goals of number of projects to
complete every new year. Sometimes these numbers enter into the obscene like
building 100 products in a year, or more. I have been thinking about making a
similar resolution of building X number of things this year, but instead I
figured that I wanted to focus on building a few great products, and focusing on
growing these projects.</p>
<p>This year I want to focus on a few key things when building any side project.</p>
<ol>
<li>Learning new technologies for each new project.</li>
<li>Building out the service to support users after launch (30 day promise)</li>
<li>Building something that I plan on using at least once a week</li>
<li>Building quickly, if I can&#x27;t complete the project in less than a month,
choose something else</li>
</ol>
<p>My 30 day promise is a plan to support development, and grow a project to more
people for 30 days. So once I finish a rough v1 of a product I will spend 30
days focusing on spreading the word on the project and growing a user base
around the project.</p>
<p>The goal of this isn&#x27;t to pump out thousands of small micro-services, nor many
huge applications with thousands of functions. I want to build complete small
services that are actually useful for myself, and maybe others.</p>
<p>Let me know if you have any feedback on this simple idea, or if you are doing a
similar project for 2016 reach out to me!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/building-in-2016.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[DJI vs GoPro]]></title>
            <link>https://matthamlin.me//2016/january/dji-vs-gopro</link>
            <guid>https://matthamlin.me//2016/january/dji-vs-gopro</guid>
            <pubDate>Fri, 01 Jan 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>2016 is going to be a large year for tech, with a lot of potential shown for new
products rising from nothing such as the breakout hit hoverboards that came to
rise. One of the rivalries within the tech market that I am personally really
excited to see play out this year is the battle between DJI and GoPro.</p>
<p>Some people may be scratching their heads at this rivalry because DJI is focused
on drones, and GoPro is focused on making great action cameras, but these two
companies are on a path that leads either to a merger or to intense competition.
Both of these companies have been flirting with the other company&#x27;s products.</p>
<p>DJI stepped into the camera market with their odd little DJI Osmo, a stabilizing
video camera in a small compact form. The Osmo is built on the technology that
DJI has developed for the camera systems on their drones. Meanwhile GoPro has
countless rumors of them developing a
<a href="http://techcrunch.com/2015/12/27/how-gopro-is-building-its-future-drone-platform-foundations/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">drone platform</a>
for them to build a great drone experience for customers.</p>
<p>These companies do currently work together in some regards, with GoPro mounts
for DJI drones but, as every technology company knows, its better to build your
own version than it is to outsource to another company. We have seen this play
out <a href="http://www.wired.com/2015/07/like-google-facebook-twitter-designs-computer-servers/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">multiple</a> <a href="http://www.wired.com/2012/03/google-miner-helmet/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">times</a> <a href="http://spectrum.ieee.org/cars-that-think/transportation/self-driving/uber-could-be-first-to-test-completely-driverless-cars-in-public" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">with</a>
other large tech companies.</p>
<p>I really hope that we get to see these companies compete over their own
respective drones in 2016. These companies are going to be great competitors and
either way the consumers will be getting great drones to use.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/dji-vs-gopro.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[My First Project of 2016]]></title>
            <link>https://matthamlin.me//2016/january/my-first-project-of-2016</link>
            <guid>https://matthamlin.me//2016/january/my-first-project-of-2016</guid>
            <pubDate>Fri, 01 Jan 2016 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>So I wanted to quickly updated this post, I have decided to shift away from the
two libraries I listed below to Skeleton and to a custom JS library. I did this
to simplify some of the development of the project to both finish the entire
project in less than 30 days, and to also simplify the development of the
application.</p>
<p>As I mentioned in my <a class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline" href="/2016/january/building-in-2016">Building in 2016</a> post, I want to make sure I am building
things in 2016 primarily for me. So my first project for 2016 is going to be
focused just on one of my own pain points. First, before I jump into the full
project breakdown, I want to talk a bit about the background.</p>
<p>As you can read in the subtitle, this project is going to be a simple
transaction manager. I just got my first credit card this summer and so my
parents wanted me to have a better understanding and attitude towards my
finances. So I stated a Google sheet from a template to track my expenditures. I
have been using that sheet even to this day and it is completely slow,
especially on my phone. It takes a only up to around a minute to add in all the
various bits I have been tracking but those minutes add up, just like the
balance on the credit card. And the user interface of Google Sheets isn&#x27;t all
that efficient yet.</p>
<p>So I decided that I would try to build a really simple online form where I can
quickly add in some recent expenditures. I have been tinkering around with a few
new small CSS and JS libraries so I figured why not combine this project with
what I am learning right now. I plan on building an extremely simple website
with two pages, the first is simply a form to add transactions, and the second
is going to be for showing in depth analysis on my expenditures.</p>
<p>For the people interested I plan on building this with:</p>
<ul>
<li><a href="http://milligram.github.io/">Milligram</a> (Which I might change to
<a href="http://getskeleton.com">Skeleton</a>)</li>
<li>
<a href="http://vuejs.org/">Vue.JS</a>
</li>
<li>
<a href="https://airtable.com/">Airtable (for the database)</a>
</li>
</ul>
<p>I plan on hosting the entire project on Github so others can use the code for
their own expense tracking, and also to allow other contributors to the project
as well.</p>
<p>I currently am also working on <a href="http://goexploring.today">Bundles</a>
which I plan to launch in the coming 30 days or so.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/my-first-project-of-2016.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[2015]]></title>
            <link>https://matthamlin.me//2015/december/2015</link>
            <guid>https://matthamlin.me//2015/december/2015</guid>
            <pubDate>Thu, 31 Dec 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>2015 was a big year for me, I changed a lot about myself internally, and also
the settings around me. I began the year focusing on growing social acceptance
in terms of followers, friends, and other online interactions. I changed that
mindset only a few weeks ago to instead focus on building a value network around
me of trusted friends and family.</p>
<p>I focused more on my friendships with others, making sure that I thank those
that have been there for me when I needed them the most. I have truly been lucky
this year to be able to surround myself in caring and thoughtful friends and
family.</p>
<p>While looking back on 2015, I also wanted to look forward to 2016. What the new
year will offer me I barely know, all I can do is organize my life as much as
possible so that I am prepared to take on any new challenges that come my way.
In the end that&#x27;s all we really are able to do, build up our support so that we
can bounce back when we get hit hard.</p>
<blockquote>
<p>...that&#x27;s all we really are able to do, build up a strong support system to
bounce back when we get knocked down</p>
</blockquote>
<p>In 2016 I want to focus on finishing school and setting up a pathway to a
successful life, emphasis on life and not career. I do really want to find a
nice job, but I would rather fail at doing something I love than succeed at
doing something I hate.</p>
<p>I want everyone to know that I loved 2015, especially all the time I spent with
my friends and family, and I can&#x27;t wait to kick off 2016!</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/2015.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Looking Ahead: 2016]]></title>
            <link>https://matthamlin.me//2015/december/2016</link>
            <guid>https://matthamlin.me//2015/december/2016</guid>
            <pubDate>Thu, 31 Dec 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I never stick to my goals and resolutions after New Years Evening. The next day
I wake up without changing anything about my life that I wanted to. So I decided
to make something that would act as a sort of public status check. Something
that I can continuously update easily, and that others can watch and give me
feedback on as the year progresses. I started something like this a while ago as
a private subreddit, but this will be fully public and I plan on tweeting the
status of each day by the end of the day.</p>
<p>Of course there is nothing keeping me from doing this except the drive to do new
things everyday. In many ways I am drawing inspiration from Casey Neistat&#x27;s
daily vlog. Where he started making videos daily to give him an impetus to
create more things.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="what-is-this">What is this?</h3>
<p>Here is a link to the page:
<del><a href="http://matthamlin.me/status.html" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">Status (Not Active Anymore)</a></del></p>
<p>Well this is simply an about post about the project, I plan on building a new
page for my personal website, where I track tasks completed and to be completed
each day. These simple tasks will be things such as doing some sort of exercise
each day, to eating something healthy (ideally vegetables and lean meats like
chicken or turkey). I also want to focus on being able to build up my coding
experience, so I want to track progress working on new projects as well.</p>
<p>Each day I will update the website with tasks that I completed that day, and
with goals for the next day.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/2016.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Blogging vs Working]]></title>
            <link>https://matthamlin.me//2015/december/blogging-vs-working</link>
            <guid>https://matthamlin.me//2015/december/blogging-vs-working</guid>
            <pubDate>Tue, 15 Dec 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>From November 25th to December 1st I was posting a blog update once a day, I
unfortunately didn&#x27;t post yesterday however. I realized something yesterday,
while I was posting these blog updates I figured that each post was like doing
the same kind of work on a project, yet they aren&#x27;t the same as doing work on a
project. They have been acting as time sinks draining all m time and efforts
that I could be putting towards working on Bundles or other school related
projects.</p>
<p>So I took yesterday off, and I focused on school work, and from here on out I
only plan on writing a post when I have something I need to say or for updates
about my projects.</p>
<blockquote>
<p>Blogging just makes you feel like you are being productive.</p>
</blockquote>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/blogging-vs-working.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Powerpoint]]></title>
            <link>https://matthamlin.me//2015/december/powerpoint</link>
            <guid>https://matthamlin.me//2015/december/powerpoint</guid>
            <pubDate>Wed, 02 Dec 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>If you happen to be following the startup world (which is a fairly large
catchall term) you may have noticed a trend of new companies building new
software that simplifies older software and adds a new UI to it. This has been
happening with text editors, first came Google docs, making a web version of
tools like Microsoft Word. Then others showed up such as Evernote, Dropbox
Paper, Notorious and plenty of other text editing solutions. This has been
happening with software like Excel, where Google yet again made google sheets,
then companies like Fieldbook and Airtable have been re-inventing the excel
spreadsheet.</p>
<blockquote>
<p>All web apps are just derivative versions of Excel</p>
</blockquote>
<p>The one thing that I haven&#x27;t seen is a remake of Powerpoint or presentation
software. I am sure some people might point out to solutions like Prezi, however
there really hasn&#x27;t been a breakout powerpoint alternative.</p>
<p>So I figured why not make a post calling for people to make such a thing. This
is clearly a product that thousands of people and businesses use on a daily
basis and so therefor has a huge market to penetrate.</p>
<p>So here is what I want to see in a Powerpoint killer web app:</p>
<ol>
<li>Automation</li>
<li>Interactivity</li>
<li>Collaboration</li>
<li>Endlessness</li>
</ol>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="automation">Automation</h3>
<p>What I mean by automation is that when I make a new presentation, I should be
able to drag and drop in some media assets such as branding iconography, logos,
fonts, color palates etc. and the software should know what to do with that. On
top of this I want to be able to easily specify an agenda at the beginning of
the presentation and have the software automatically generate the slides with
titles relating to the agenda (This should be done in all software!). All this
should happen without me worrying about copy-pasting assets from one slide deck
to another.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="interactivity">Interactivity</h3>
<p>The web has been the leading point of development for interactivity, we now
interact with content like never before, and yet we still only interact with
presentations linearly. Prezi handles this fairly well, each presentation should
be able to have some dynamic navigation, while also allowing people to interact
with the presentation in the format they prefer.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="collaboration">Collaboration</h3>
<p>This is easy, allow many people to edit it at the same time and you are set.</p>
<h3 class="text-2xl font-medium text-gray-700 dark:text-gray-300" id="endlessness">Endlessness</h3>
<p>As a person who makes presentations I should feel like there is nothing I can&#x27;t
do with this new web app. I should be able to use it to make mock ups of mobile
applications, or use it as a dynamic photo gallery. The presentation software
can be as bare bones as possible, all that should limit someone with the
software should be their imagination.</p>
<p>Ultimately I am sure someone is probably working on a Powerpoint remake, and I
hope that they design it as well as recent Word and Excel remakes. The key to
remember that you may feel like you are designing some new piece of software but
most web developers end up simply re-building some old piece of software with a
new look and feel. This isn&#x27;t a bad thing at all, I don&#x27;t want to have to use
Windows 98 to write a quick word document. Just make sure that you realize that
what you are developing has probably already been done.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/powerpoint.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The Social Max]]></title>
            <link>https://matthamlin.me//2015/december/the-social-max</link>
            <guid>https://matthamlin.me//2015/december/the-social-max</guid>
            <pubDate>Tue, 01 Dec 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>A few days ago I tweeted about an idea I had on social networking. I tweeted
saying that there is a a maximum limit on the number of social networks someone
is willing to keep up to date. I feel like this number is independent from
person to person, so there will be people who can manage 5, 10 or even 15 social
networks and others who can only manage one or two.</p>
<p>The question arrises, is the social network startup market oversaturated? There
are hundreds of social networks out there and more seem to always be entering
the app stores, however have people already met their social max with the apps
they have already? There is always a possibility that these new social apps will
sometimes replace another but most social apps try to aim at a new killer
feature/focus.</p>
<p>The most recent example of this is the app called Beme that I have been using
here and there for the past few weeks. Unfortunately whenever I use it I never
really feel like I want to share with the app. It just hasn&#x27;t clicked for me to
be one of the apps I go to to share a moment.</p>
<p>I currently only manage probably 3 social apps at any given time, these apps I
have used for a while and I have heavily invested time in both sharing and
curating the right network to share to. Other apps that are built on their own
network (not using Facebook or Twitter login/account making) are far more
difficult to invest the same amount of time that I spent on my current networks.</p>
<p>Ultimately I believe that the social app market is oversaturated, but only for
the non-current generation, I feel that as another generation comes along they
will be more willing to use more social apps as they want to share more of their
lives with others. Let me know what you think about the social max and if it
changes at all as a generation gets older.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/the-social-max.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Thanksgiving]]></title>
            <link>https://matthamlin.me//2015/november/thanksgiving</link>
            <guid>https://matthamlin.me//2015/november/thanksgiving</guid>
            <pubDate>Tue, 24 Nov 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Today is Thanksgiving day 2015 and right before I jump in the kitchen to help my
family bake delicious food I wanted to write quickly about what I am thankful
for.</p>
<p>Most days out of the year I don&#x27;t really recognize how thankful I am for
everyone around me. In general one can&#x27;t always be aware of just how much
someone who loves you does for you day in and out.</p>
<p>The past few days I have been reflecting on how much my family and friends
actually mean to me. These are the people that I surround myself with whether a
country away or right next door in my apartment. I surround myself with these
people not only for the fun times but also for the help they offer me. I
wouldn&#x27;t be where I am now and I especially wouldn&#x27;t be aspiring to do the
things I dream of without my friends and family.</p>
<p>To my friends and family reading this, thank you so much, you have been there
when I needed it the most and also have been there to share in the laughter. I
hope that I can be the same kind of support that you offer me every day.</p>
<p>Thanks.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/thanksgiving.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Family Time]]></title>
            <link>https://matthamlin.me//2015/november/family-time</link>
            <guid>https://matthamlin.me//2015/november/family-time</guid>
            <pubDate>Fri, 20 Nov 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>This week(end) for me has been an amazing whirlwind of fun times with family
members. Coming home this weekend has been in the works since mid September and
up until the time I arrived only a total of 8 people and only 2 family members
knew I was coming home.</p>
<p>Since Freshman year at RPI I had always wanted to find a way to sneak home
during one of my breaks to surprise my family and I was fortunate enough to come
home for Thanksgiving this year to surprise most of my family.</p>
<p>Saving time for family when pressured to complete work or school tasks is
important, not only to give yourself a break but also to sit back an enjoy life
with those around you. My blog post on Thanksgiving day expanded more about how
thankful I am for those around me, but I am also really glad that I can be
spoiled with all this time to be around my family.</p>
<p>No matter what you do during the year, the holidays are always the best time to
take a rest and spend time with your loved ones.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/family-time.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[Weekend Projects]]></title>
            <link>https://matthamlin.me//2015/november/weekend-projects</link>
            <guid>https://matthamlin.me//2015/november/weekend-projects</guid>
            <pubDate>Wed, 04 Nov 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Since I came home for Thanksgiving I figured I would have enough time to get
away from pesky homework assignments and projects and spend some time not only
with my family but also working on some of my own projects. The first was
building and launching Bundles version 1, the second was launching this blog,
and the third is reworking my portfolio website.</p>
<p>My old portfolio website used to load in an image from Unsplash on the left
sidebar. The problem was that every time that I pulled up my site and others
pulled up my site that image would take forever to load. It would end up making
my site look ridiculously terrible, especially since I am looking for front end
web development opportunities.</p>
<p>So I decided to change that and completely change my portfolio website in the
process, I dropped the slow framework I was using for a simpler one (currently
using <a href="http://getskeleton.com/" class="inline-flex items-center justify-center whitespace-nowrap font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 text-primary underline-offset-4 hover:underline focus:underline">skeleton css</a>) I also dropped a lot of the
unnecessary content that was on my portfolio website.</p>
<p>That above is what my current portfolio website looks like, its simple, clean
and loads far quicker than my previous website.</p>
<p>The next project I plan on finishing up this weekend is changing my resume
website over to the Skeleton framework as well.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/weekend-projects.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[The Message is in the Medium]]></title>
            <link>https://matthamlin.me//2015/november/message</link>
            <guid>https://matthamlin.me//2015/november/message</guid>
            <pubDate>Tue, 03 Nov 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>The above title is something that was taught to me in one of my introductory
courses at RPI. It&#x27;s meant to convey that sometimes the way a piece of content
is delivered will change the meaning of the content entirely. This, our class
and I, have found to be true. From sending a message through Snapchat versus
email one conveys a certain light-hearted demeanor, something possibly meant to
be deleted upon being seen, or even something that is too intimate for an email.
All this and more is conveyed to the consumer when they get the message, yet
these deeper meanings will vary from individual to individual.</p>
<p>The reason I wanted to write this post is because of some revelations I had
while my flight was taxiing to take off to Albany. I had a great many thoughts
while waiting for takeoff (some I might write about later) but the key thought I
wanted to convey today was that the web, or all software in general, has always
sat behind big media formats simply as a distribution network, and I think that
this idea is flawed.</p>
<p>For years software has been showcased to stand for this wonderful
all-encompassing thing where content can be shared, people and physical items
can connect, and where the future will exist.</p>
<p>However in recent days I have begun to think of software and more specifically
the web as its own form of content. The web is more dynamic than a video clip,
has more tones than a song, and conveys, or rather has the ability to convey,
more emotions to a consumer than any form of art. A key note to make, when I
talk about the web as a piece of content I really mean the mashups of different
forms of content coming together forming digital experiences online.</p>
<p>The main reason why I consider software similar to media such as photos,
paintings, architecture and so on is because the fact that people have to craft
each piece of software. Every single digital process you use was taken from an
idea in someone&#x27;s head and implemented in code to render as it does. Just like a
painting will come to life through brush strokes, lines of code build up the
content of software.</p>
<p>Now there are many ways to take this, such as making a point that software
should be treated as art and the coders behind it as artists but I don&#x27;t want to
make that point. The main takeaway I want to convey to anyone reading is that in
a couple of years we won&#x27;t be thinking of the difference between apps on your
phone and the photos and videos you took with your phone. Ideally developers,
designers and all those who build things will begin to think of their software
as something to convey deep emotions to users, hopefully these emotions are
heartfelt and warm.</p>
<p>This is what I want to try to focus on every time I make another website or
develop a web app, I want to focus on making an experience for people, not just
something people look at.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/message.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[A New Look]]></title>
            <link>https://matthamlin.me//2015/november/a-new-look</link>
            <guid>https://matthamlin.me//2015/november/a-new-look</guid>
            <pubDate>Sun, 01 Nov 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I just setup Poole as a blogging style with Jekyll on this (my main website).
Hopefully this provides a larger incentive to start posting here then cross
posting to Medium.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/a-new-look.png" length="0" type="image/png"/>
        </item>
        <item>
            <title><![CDATA[A New Resume]]></title>
            <link>https://matthamlin.me//2015/november/a-new-resume</link>
            <guid>https://matthamlin.me//2015/november/a-new-resume</guid>
            <pubDate>Sun, 01 Nov 2015 12:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>This weekend I set out to work on Bundles and to also work on my own website. I
successfully launched Bundles v1, setup a blog on my website, redesigned my
portfolio, and now I have finished redesigning my resume website also</p>
<p>The new cleaner resume focuses on just the key areas of my technical resume,
allowing potential employers to find what they need to know about me without
needing to sort through tons of unrelated content.</p>
<p>This weekend over all served as a great experiment in learning new technologies
(Jekyll) and also in learning a new framework to build sites on.</p>
<p>Hopefully I spend more weekends working on these side projects and launching
things more often. On my schedule for Christmas day however is a fully working
version of Bundles, or at least the core requirements.</p>
<p>Honestly though I wish I didn&#x27;t have to go back to classes for three weeks and
wish I could spend more time just on development.</p>]]></content:encoded>
            <author>matthewjameshamlin@gmail.com (Matt Hamlin)</author>
            <enclosure url="https://matthamlin.me/og-images/a-new-resume.png" length="0" type="image/png"/>
        </item>
    </channel>
</rss>